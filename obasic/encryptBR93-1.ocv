(*************************************************************
 *                                                           *
 *       Cryptographic protocol verifier                     *
 *                                                           *
 *       Bruno Blanchet and David Cadé                       *
 *                                                           *
 *       Copyright (C) ENS, CNRS, INRIA, 2005-2020           *
 *                                                           *
 *************************************************************)

(*

    Copyright ENS, CNRS, INRIA 
    contributors: Bruno Blanchet, Bruno.Blanchet@inria.fr
                  David Cadé

This software is a computer program whose purpose is to verify 
cryptographic protocols in the computational model.

This software is governed by the CeCILL-B license under French law and
abiding by the rules of distribution of free software.  You can  use, 
modify and/ or redistribute the software under the terms of the CeCILL-B
license as circulated by CEA, CNRS and INRIA at the following URL
"http://www.cecill.info". 

As a counterpart to the access to the source code and  rights to copy,
modify and redistribute granted by the license, users are provided only
with a limited warranty  and the software's author,  the holder of the
economic rights,  and the successive licensors  have only  limited
liability. 

In this respect, the user's attention is drawn to the risks associated
with loading,  using,  modifying and/or developing or reproducing the
software by the user in light of its specific status of free software,
that may mean  that it is complicated to manipulate,  and  that  also
therefore means  that it is reserved for developers  and  experienced
professionals having in-depth computer knowledge. Users are therefore
encouraged to load and test the software's suitability as regards their
requirements in conditions enabling the security of their systems and/or 
data to be ensured and,  more generally, to use and operate it in the 
same conditions as regards security. 

The fact that you are presently reading this means that you have had
knowledge of the CeCILL-B license and that you accept its terms.

*)
(* encryption scheme by Bellare and Rogaway, Random Oracles are
Practical: a Paradigm for Designing Efficient Protocols, CCS'93, 
section 3.1: E(x) = f(r) || H(r) xor x (CPA) *)

(* In order to determine the proof, use interactive mode: 
   set interactiveMode = true.
The proof is as follows: 

proof {
crypto rom(hash);
remove_assign binder pk;
crypto ow(f) r;
crypto remove_xor(xor) *;
success
}
It works automatically with priority 2 for pkgen(r) in ow(f).
*)
param nx.

type key [bounded].
type keyseed [large,fixed].
type hasht [large,fixed].
type seed [large,fixed]. 

(* One-way trapdoor permutation *)

proba POW.

expand OW_trapdoor_perm(keyseed, key, key, seed, pkgen, skgen, f, invf, POW).

(* Hash function, random oracle model *)

type hashkey [fixed].

expand ROM_hash_large(hashkey, seed, hasht, hash, hashoracle, qH).

(* Xor *)

expand Xor(hasht, xor, zero).

(* Implementing a test as a function.
   Useful to avoid expanding if, which is necessary for this proof. *)

fun test(bool, hasht, hasht):hasht.
equation forall x:hasht,y:hasht; test(true,x,y) = x.
equation forall x:hasht,y:hasht; test(false,x,y) = y.

(* Queries *)

query secret b1.

let processT(hk: hashkey, pk0: key) = 
	OT(m1:hasht, m2:hasht) :=
	b1 <-R bool;
	(* The next line is equivalent to an "if" that will not be
	expanded. This is necessary for the system to succeed in
	proving the protocol. *)
	menc <- test(b1, m1, m2);
	x <-R seed;
	a <- f(pk0,x);
	b <- xor(hash(hk,x), menc);
	return(a,b).

process 
	Ohkgen() :=
	hk <-R hashkey;
	return;
	(run hashoracle(hk) |
	Ogen() :=
	r <-R keyseed; 
	pk <- pkgen(r);
	sk <- skgen(r);
	return(pk);
	run processT(hk, pk))


(* EXPECTED
All queries proved.
0.048s (user 0.048s + system 0.000s), max rss 16652K
END *)
