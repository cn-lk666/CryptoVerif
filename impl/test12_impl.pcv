(*
    TDX protocol
    six entities: Challenger, CPU, TDXM, TD, VMM, QE.
    Steps:
    1. Challenger->TD: Attestation requirements
    2. TD generate rdata and TD->TDXM: request TD report
    3.  Assemble tdi from TDCS and compute its hash tdih
    4. TDXM->CPU: rtyp, tdi, rdata and request SEAMREPORT
    5. CPU genarate SEAMREPORT
    6. CPU->TDXM: SEAMREPORT
    7. TDXM create TDREPORT
    8. TDXM->TD: TDREPORT
    9. TD->VMM: TDREPORT and request Quote
    10. VMM->QE: TDREPORT
    11. QE check hashes
    12. QE ->CPU: report mac struct
    13. CPU verify the MAC in the report
    14. CPU->QE: Verification result
    15. QE sign to form Quote
    16. QE->VMM: Quote
    17. VMM->TD: TD: Quote
    18. TD->Challenger: Quote
*)


(*replication numbers*)
param qChallenger, qTD, qTDXM, qCPU, qQE, qIAS.

set interactiveMode = true.
proof{
    crypto ind_cca2(enc);

crypto uf_cma(sign);

crypto ind_cca2(enc);
success
}

(*
    bounded means that the type is a set of bitstrings of bounded length or perhaps ⊥. In other
        words, the type is a finite subset of bitstrings plus ⊥.
    fixed means that the type is the set of all bitstrings of a certain length n. In particular, the
        type is a finite set, so fixed implies bounded.
    large: By default, large means that the type T is large enough so that all collisions with ran-
        dom elements of T can be eliminated
*)
(*These three types are used in the macro IND_CCA2_public_key_enc and UF_CMA_det_signature*)
type skey [bounded].
type pkey [bounded].

type keypair [bounded].
type keyseed [large,fixed].
fun kp(pkey,skey):keypair [data].
type signature [bounded].
type sskey [bounded].
type spkey [bounded].
type skeypair [bounded].
type skeyseed [large,fixed].
fun skp(spkey,sskey):skeypair [data].
type macres_t [bounded].
(*channel name*)
channel c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14,c15, c16, c17, c18, c19, c20, c21, c22, c23,c24, c25, start.

(*session key*)
type key [large,fixed].
type hashoutput1 [large, fixed].
type hashoutput2 [large, fixed].

(* Hash *)
expand ROM_hash_large(
    key,                 (**)
    bitstring,         (*hashinput is the type of the input of the hash function.*)
    hashoutput1,        (*hashoutput is the type of the output of the hash function, 
                                    must be bounded or nonuniform (typically fixed)*)
                                (*如果这里这里说了fixed，那么我们还可以用bitstring吗?还是定义一个type*)    
    hash1,               (*hash (key ,hashinput ) : hashoutput is the hash function.*)
    hashoracle1,  (*hashoracle is a process that allows the adversary to call the hash function*)
    qH1                      (*qH is the number of queries to the hash oracle*)
).

expand ROM_hash_large(
    key,                 (**)
    bitstring,         (*hashinput is the type of the input of the hash function.*)
    hashoutput2,        (*hashoutput is the type of the output of the hash function, 
                                    must be bounded or nonuniform (typically fixed)*)
                                (*如果这里这里说了fixed，那么我们还可以用bitstring吗?还是定义一个type*)    
    hash2,               (*hash (key ,hashinput ) : hashoutput is the hash function.*)
    hashoracle2,  (*hashoracle is a process that allows the adversary to call the hash function*)
    qH2                      (*qH is the number of queries to the hash oracle*)
).

(* MAC *)
proba Pmac.
expand SUF_CMA_det_mac(
    key,            (*mkey is the type of keys, must be bounded*)
    bitstring , (*macinput is the type of inputs of MACs*)
    macres_t,  (*macres_t is the type of MACs.*)
    mac,          (*mac(macinput ,mkey ) : macres_t is the MAC function.*)
    check,      (*check (macinput ,mkey ,macres_t ) : bool is the verification function*)
    Pmac        (*Pmac(t,N,N′,Nu′,l) is the probability of breaking the SUF-CMA property in time t for one key,
                N MAC queries, N′ verification queries modified by the transformation and Nu verification queries
                left unchanged by the transformation for messages of length at most l.*)
).


(* Signature *)
proba Psign.
proba Psigncoll.
expand UF_CMA_det_signature(
        skeyseed,
        spkey,                  (*pkey is the type of public keys, must be bounded.*)
        sskey,                  (*skey is the type of secret keys, must be bounded.*)
        bitstring,            (*signinput*)
        signature,            (*signature*)
       	sskgen,                  (*skgen(keyseed ) : skey is the secret key generation function.*)
        spkgen,                 (*pkgen (keyseed ) : pkey is the public key generation function.*)
        sign,                     (*sign (signinput ,skey ) : signature is the signature function.*)
        verify,                  (*check (signinput ,pkey ,signature) : bool is the verification function.*)
        Psign,                  (*Psign (t,N,l) is the probability of breaking the UF-CMA property 
                                        in time t, for one key, N signature queries with messages of length at most l.*)
        Psigncoll           (*Psigncoll is the probability of collision between independently generated keys.*)
).


(* Asymmetric encryption *)
proba Penc.
proba Penccoll.
expand IND_CCA2_public_key_enc(
        keyseed, 
        pkey,                       (*pkey is the type of public keys, must be bounded*)
        skey,                        (*skey is the type of secret keys, must be bounded*) 
        bitstring,                (*cleartext is the type of cleartexts.*)
        bitstring,             (*ciphertext is the type of ciphertexts.*)
        skgen,                      (*skgen(keyseed ) : skey is the secret key generation function.*)
        pkgen,                      (*pkgen (keyseed ) : pkey is the public key generation function.*)
        enc,                            (*enc(cleartext ,pkey ) : ciphertext is the encryption function. 
                                                Internally, it generates random coins, so that it is probabilistic*)
        dec,                            (*dec(ciphertext ,skey ) : bitstringbot is the decryption function; it returns bottom 
                                                when decryption fails*)
        injbot,                         (*injbot (cleartext ) : bitstringbot is the natural injection from cleartext to bitstringbot*)
        Z,                                  (*Z (cleartext ) : cleartext is the function that returns for each cleartext a cleartext of 
                                                the same length consisting only of zeroes.*)
        Penc,                           (*Penc(t,N) is the probability of breaking the IND-CCA2 property
                                                (indistinguishable under adaptive chosen ciphertext attacks)
                                                in time t for one key and N decryption queries.*)
        Penccoll                    (*Penccoll is the probability of collision between independently generated keys.*)
).






type rtyp_t[bounded].
type res_t[bounded].
type csvn_t[bounded].
type user_data_t [bounded, nonuniform].
type tdi_t[bounded].
type tcbi_t[bounded].
type rdata_t[bounded].
type arg_TDXM_CPU_t[bounded].
type rms_without_mac_t[bounded].
type rms_t[bounded].
type smr_t[bounded].
type smr_without_mac_t[bounded].
type tdr_t[bounded].
type tdr_without_mac_t[bounded].
type quote_t[bounded].


set casesInCorresp = false.
    (* Distringuishing cases in the proof of correspondences
       is too slow with the "unique channel id" property,
       and not necessary *)

fun get_rtyp():rtyp_t.
fun get_tdi():tdi_t.
fun get_tcbi():tcbi_t.
fun get_csvn():csvn_t.
fun get_res():res_t.

fun rdata_f(pkey, user_data_t):rdata_t[data].
fun rms_without_mac_f(rtyp_t, res_t, csvn_t, hashoutput1, hashoutput2, rdata_t, res_t): rms_without_mac_t[data].
fun rms_f(rms_without_mac_t, macres_t):rms_t[data].
fun smr_f(rms_t, tcbi_t):smr_t[data].
fun smr_without_mac_f(rms_without_mac_t, tcbi_t):smr_without_mac_t[data].
fun tdr_f(smr_t, res_t, tdi_t):tdr_t[data].
fun tdr_without_mac_f(smr_without_mac_t, res_t, tdi_t):tdr_without_mac_t[data].

fun quote_f(tdr_without_mac_t, signature):quote_t[data].
fun tdi_t2bitstring(tdi_t): bitstring [data].
fun rms_without_mac_t2bitstring(rms_without_mac_t):bitstring[data].
fun key2bitstring(key):bitstring[data].
fun tdr_without_mac_t2bitstring(tdr_without_mac_t):bitstring[data].
fun quote_t2bitstring(quote_t):bitstring[data].
fun arg_TDXM_CPU_f(rdata_t, rtyp_t, hashoutput1):arg_TDXM_CPU_t[data].
fun tcbi_t2bitstring(tcbi_t):bitstring[data].



letfun kgen() =  k <-R keyseed;  kp (pkgen(k) ,skgen(k) ).
letfun kgen_s() =  ks <-R skeyseed;  skp (spkgen(ks) ,sskgen(ks) ).

event QuoteVerified(rtyp_t, res_t, csvn_t, hashoutput1,hashoutput2, rdata_t, res_t).
event CPUsentSMR(rtyp_t, res_t, csvn_t, hashoutput1,hashoutput2, rdata_t, res_t, macres_t).
event eve_QE(rtyp_t, res_t, csvn_t, hashoutput1,hashoutput2, rdata_t, res_t).
query x1:rtyp_t, x2:res_t, x3:csvn_t, x4:hashoutput1, x5:hashoutput2, x6:rdata_t, x7:res_t, x8:macres_t;
	event(QuoteVerified(x1, x2, x3, x4,x5, x6, x7)) ==> event(eve_QE(x1, x2, x3, x4,x5,  x6, x7)).

query x1:rtyp_t, x2:res_t, x3:csvn_t, x4:hashoutput1, x5:hashoutput2, x6:rdata_t, x7:res_t, x8:macres_t;
	event(eve_QE(x1, x2, x3, x4,x5, x6, x7)) ==> event(CPUsentSMR(x1, x2, x3, x4, x5, x6, x7, x8 )).

query x1:rtyp_t, x2:res_t, x3:csvn_t, x4:hashoutput1, x5:hashoutput2,x6:rdata_t, x7:res_t, x8:macres_t;
	event(QuoteVerified(x1, x2, x3, x4,x5, x6, x7)) ==> event(CPUsentSMR(x1, x2, x3, x4,x5, x6, x7, x8 )).

event TDXMsentTDR_8(smr_t, tdi_t).
event QEaccepted2_14(smr_t, tdi_t).

query x1:smr_t, x2:tdi_t;
    event(QEaccepted2_14(x1, x2))==>event(TDXMsentTDR_8(x1, x2)).

const Zkey : bitstring.
equation forall y:bitstring;
	Z(y) = Zkey.


query secret session_key.

table mes_TD_TDXM_2(rdata_t).
implementation table mes_TD_TDXM_2="mes_TD_TDXM_2".
table mes_TDXM_CPU_4(arg_TDXM_CPU_t).
implementation table mes_TDXM_CPU_4="mes_TDXM_CPU_4".
table mes_CPU_TDXM_6(smr_t).
implementation table mes_CPU_TDXM_6="mes_CPU_TDXM_6".
table mes_TDXM_TD_8(tdr_t).
implementation table mes_TDXM_TD_8="mes_TDXM_TD_8".
table mes_QE_CPU_12(rms_t).
implementation table mes_QE_CPU_12="mes_QE_CPU_12".
table mes_CPU_QE_14(rms_without_mac_t).
implementation table mes_CPU_QE_14="mes_CPU_QE_14".


implementation
    type skeyseed=64;
    type keyseed=64;
    type key = 128;
    type user_data_t=1024;
    type macres_t = "string";
    fun tdi_t2bitstring="tdi_t2bitstring" [inverse = "bitstring2tdi_t"];
    fun tcbi_t2bitstring="tcbi_t2bitstring" [inverse = "bitstring2tcbi_t"]; 
    type pkey="pkey" [serial = "pkey_to","pkey_from"];
    type skey="skey" [serial = "skey_to","skey_from"];                  
    fun kgen = "(pk_kgen 1024)";
    fun kgen_s = "(pk_kgen 1024)";
    fun kp="id" [inverse="id"];
    fun skp="id" [inverse="id"];
    fun enc="pk_enc";
    fun dec="pk_dec";
    fun sign="(rsassa_pss_sign 8)";
    fun injbot="injbot" [inverse =  "injbot_inv"];
    fun hash1 = "Ssh_crypto.hash";
    fun hash2 = "Ssh_crypto.hash";
    fun get_rtyp="get_rtyp";
    fun get_tdi="get_tdi";
    fun get_csvn="get_csvn";
    fun get_tcbi="get_tcbi";
    fun get_res="get_res";
    fun rdata_f="rdata_f"[inverse = "inv_rdata_f"];
    fun arg_TDXM_CPU_f="arg_TDXM_CPU_f"[inverse ="inv_arg_TDXM_CPU_f"];
    type signature="string";
    type hashoutput1=160;
    type hashoutput2=160;
    type rdata_t="string" [serial = "id", "id"];
    type tdr_t="string" [serial = "id", "id"];
    fun tdr_f="tdr_f"[inverse="inv_tdr_f"];
    fun smr_f="smr_F"[inverse="inv_smr_f"];
    fun rms_f="rms_f"[inverse="inv_rms_f"];
    fun rms_without_mac_f="rms_without_mac_f"[inverse="inv_rms_without_mac_f"];
    fun smr_without_mac_f="smr_without_mac_f"[inverse="inv_smr_without_mac_f"];
    fun tdr_without_mac_f="tdr_without_mac_f"[inverse="inv_tdr_without_mac_f"];
    fun tdr_without_mac_t2bitstring="tdr_without_mac_t2bitstring"[inverse="bitstring2tdr_without_mac_t"];
    fun quote_f="quote_f"[inverse="inv_quote_f"];
    fun quote_t2bitstring="quote_t2bitstring"[inverse="bitstring2quote_t"];
    fun verify="(rsassa_pss_verify 8)";
    fun key2bitstring="key2bitstring"[inverse="bitstring2key"];
    fun mac = "(mac Cryptokit.MAC.hmac_sha1)";
    fun rms_without_mac_t2bitstring="rms_without_mac_t2bitstring"[inverse="bitstring2rms_without_mac_t"];
    fun check = "(mac_check Cryptokit.MAC.hmac_sha1)";
    type rms_t ="string"[serial="id", "id"];
    type rms_without_mac_t="string"[serial ="id", "id"];

    type res_t="string" [serial = "id", "id"];
    type tdi_t="string" [serial = "id", "id"];
    type tcbi_t="string" [serial = "id", "id"];
    type rtyp_t="string" [serial = "id", "id"];
    type smr_t="string" [serial = "id", "id"];
    type arg_TDXM_CPU_t="string"[serial = "id", "id"];
    type spkey="pkey" [serial = "pkey_to","pkey_from"];
    type sskey="skey" [serial = "skey_to","skey_from"].


let TD()=

TDX_TD[pk_TD>Impl_pk_TD, sk_TD>Impl_sk_TD]{
    in(c4, ());
    let kp(pk_TD:pkey, sk_TD:skey)=kgen() in
    new rdata_other:user_data_t;
    let rdata_TD:rdata_t=rdata_f(pk_TD, rdata_other) in
    insert mes_TD_TDXM_2(rdata_TD);
    out(c5, ());
    in(c12, ());
    get mes_TDXM_TD_8(tdr_TD) in
    out(c13, tdr_TD)
}.


let TDXM(hk_TDXM:key)=
TDX_TDXM[res4_TDXM> Impl_res4_TDXM, tdi_TDXM>Impl_tdi_TDXM]{
    in(c6, ());
    let rtyp_TDXM=get_rtyp() in
    let tdi_TDXM:tdi_t=get_tdi() in
    let tdih_TDXM=hash1(hk_TDXM, tdi_t2bitstring(tdi_TDXM)) in
    get mes_TD_TDXM_2(rdata_TDXM) in
    let arg_TDXM_CPU:arg_TDXM_CPU_t=arg_TDXM_CPU_f(rdata_TDXM, rtyp_TDXM, tdih_TDXM) in
    insert mes_TDXM_CPU_4(arg_TDXM_CPU);
    let res4_TDXM:res_t=get_res() in
    out(c7, ());

    in(c10, ());
    get mes_CPU_TDXM_6(smr_TDXM) in
    event TDXMsentTDR_8(smr_TDXM, tdi_TDXM);
    let tdr_TDXM:tdr_t=tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
    event TDXMsentTDR_8(smr_TDXM, tdi_TDXM);
    insert mes_TDXM_TD_8(tdr_TDXM);
    out(c11, ())
}.
  

let CPU(hk_CPU:key, mkey_CPU:key)=
TDX_CPU{
    
    in(c8, ());
    get mes_TDXM_CPU_4(arg_TDXM_CPU) in
    let arg_TDXM_CPU_f(rdata_CPU, rtyp_CPU, tdih_CPU)=arg_TDXM_CPU in
    let res1_CPU=get_res() in
    let csvn_CPU =get_csvn() in
    let tcbi_CPU=get_tcbi() in
    let res2_CPU=get_res() in
    let tcbh_CPU=hash2(hk_CPU, tcbi_t2bitstring(tcbi_CPU) ) in
    let rms_without_mac_CPU=rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, tdih_CPU, tcbh_CPU, rdata_CPU, res2_CPU ) in
    let mac_CPU=mac(rms_without_mac_t2bitstring(rms_without_mac_CPU), mkey_CPU) in
    let rms_CPU=rms_f(rms_without_mac_CPU, mac_CPU) in
    let smr_CPU=smr_f(rms_CPU, tcbi_CPU) in
    event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, tdih_CPU, tcbh_CPU, rdata_CPU, res2_CPU, mac_CPU);
    insert mes_CPU_TDXM_6(smr_CPU);
    out(c9, ());
    in(c16, ());
    get mes_QE_CPU_12(rms_QE_to_CPU) in
    let rms_f(rms_without_mac_QE_to_CPU, mac_QE_to_CPU) =rms_QE_to_CPU in
    if(check(rms_without_mac_t2bitstring(rms_without_mac_QE_to_CPU), mkey_CPU, mac_QE_to_CPU))then 
        insert mes_CPU_QE_14(rms_without_mac_QE_to_CPU);
        let rms_without_mac_from_CPU:rms_without_mac_t=rms_without_mac_QE_to_CPU in
        out(c17, ())
    
}.




let QE(hk_QE1:key,hk_QE2:key, ssk:sskey, pk: pkey, spk:spkey, sk:skey)=
TDX_QE{
    in(c14, (tdr_QE:tdr_t));
    get mes_TDXM_TD_8(tdr_TDXM) suchthat tdr_QE=tdr_TDXM in
    let tdr_f(smr_QE, res4_QE, tdi_QE)=tdr_QE in
    let smr_f(rms_QE, tcbi_QE)=smr_QE in
    let rms_f(rms_without_mac_QE, macres_QE)=rms_QE in
    let rms_without_mac_f(rtyp_QE, res1_QE, csvn_QE, tdih_QE, tcbh_QE, rdata_QE, res2_QE)=rms_without_mac_QE in
    insert mes_QE_CPU_12(rms_QE);
    if (tdih_QE=hash1(hk_QE1,tdi_t2bitstring(tdi_QE))) && (tcbh_QE=hash2(hk_QE2, tcbi_t2bitstring(tcbi_QE))) then
    out(c15, ());
    in(c18, ());
    get mes_CPU_QE_14(rms_without_mac_from_CPU) suchthat rms_without_mac_from_CPU=rms_without_mac_QE in
    event eve_QE(rtyp_QE, res1_QE, csvn_QE, tdih_QE, tcbh_QE, rdata_QE, res2_QE);
    event QEaccepted2_14(smr_QE, tdi_QE );
    let smr_without_mac_QE=smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
    let tdr_without_mac_QE=tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
    let sig_QE=sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk) in
    let quote_QE =quote_f(tdr_without_mac_QE, sig_QE) in
    let m1=enc(quote_t2bitstring(quote_QE), pk) in
    out(c19, (m1))
}.

let Challenger(spk:spkey, sk:skey)=
TDX_Ch{
    in(c20, ());
    out(c21, ());
    in(c22, (m2:bitstring));
    let injbot(quote_t2bitstring(quote_Ch))=dec(m2, sk) in
    let quote_f(tdr_without_mac_Ch, sig_Ch) =quote_Ch in
    if(verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk, sig_Ch)) then
        let tdr_without_mac_f(smr_without_mac_Ch, res4_Ch, tdi_Ch)=tdr_without_mac_Ch in
        let smr_without_mac_f(rms_without_mac_Ch, tcbi_Ch)=smr_without_mac_Ch in
        let rms_without_mac_f(rtyp_Ch, res1_Ch, csvn_Ch, tdih_Ch, tcbh_CH, rdata_Ch, res2_Ch)=rms_without_mac_Ch in
        let rdata_f(x1_Ch, y1_Ch)=rdata_Ch in
        event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tdih_Ch,tcbh_CH, rdata_Ch, res2_Ch);
        new session_key:key;
        let m2_Ch=enc(key2bitstring(session_key), x1_Ch) in
        out(c23, (m2_Ch))  
    
}.

process
keygen[spk1>Impl_spk1, ssk1>Impl_ssk1, pk2>Impl_pk2, sk2>Impl_sk2, hk1>Impl_hk1, hk2>Impl_hk2, mkey>Impl_mkey]{
    in(start, ());
    let skp (spk1:spkey,ssk1:sskey) = kgen_s () in
    let kp(pk2:pkey, sk2:skey)=kgen() in
    new hk1:key;(*key for hash*)
    new hk2:key;(*key for hash*)
    new mkey:key;(*key for mac*)
    out (c1, ())
};
	(
        (!i<=qChallenger Challenger(spk1, sk2)) | 
        (hashoracle1(hk1) ) |
        (hashoracle2(hk2) ) |
        (!i<=qTD TD() ) |
        (!i<=qTDXM TDXM(hk1) ) |    
        (!i<=qCPU CPU(hk2, mkey) ) |
        (!i<=qQE QE(hk1, hk2, ssk1, pk2, spk1, sk2) )
    )