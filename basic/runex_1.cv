(* Example updated from CV 1.28 by Benjamin Beurdouche *)
(* 这个例子说明了*)
(* Trivial running example for conference paper. *)
param NA, NB.

type mkey [bounded].
type mkeyseed [fixed].
type key [fixed].
type keyseed [fixed].
type seed [fixed].
type macs [bounded].
type plaintext[bounded].



(* Shared-key generation *)
expand keygen(keyseed, key, kgen).

(* Shared-key encryption (CPA Stream cipher) *)
proba Penc.
expand IND_CPA_sym_enc(key, bitstring, bitstring, enc, dec, injbot, Z, Penc).

(* The function Z returns for each bitstring, a bitstring
   of the same length, consisting only of zeroes. *)


(* Mac key generation *)
expand keygen(mkeyseed, mkey, mkgen).

(* Mac *)
proba Pmac.
expand SUF_CMA_proba_mac(mkey, bitstring, macs, mac, check, Pmac).

(* Queries *)
(*Here k2 is the  encrypted message, k3 is the decrypted message*)
query secret k2 [cv_onesession].


(* Channels and Processes *)
channel cA, cB, start, c,c1,c2,c3,c4.

fun outEncryption(bitstring):bitstring[data].
fun keyToBitstring(key):bitstring[data].

const Zkey : bitstring.
equation forall y:key;
	Z(keyToBitstring(y)) = Zkey.

let processA(Kab:key, mKab:mkey) =
	in(cA, ());
	new k2 : key;
	let ea1:bitstring = enc(keyToBitstring(k2), Kab) in
	out(c1, (ea1) ).

let processB(Kab:key, mKab:mkey) =
	in(c1, (ea2:bitstring));
	find i<=NA suchthat defined(ea1[i])  && ea2=ea1[i] then
	let	injbot(keyToBitstring(k3:key)) = dec(ea2, Kab) in
	out(cB, ()).

process
	in(start, ());
	new rKab: keyseed;
	let Kab = kgen(rKab) in
	new rmKab: mkeyseed;
	let mKab = mkgen(rmKab) in
	out(c, ());
	((! NA processA(Kab,mKab)) |
	 (! NB processB(Kab,mKab)))

(* EXPECTED
RESULT Could not prove secrecy of k3.
0.064s (user 0.064s + system 0.000s), max rss 16840K
END *)
