(*************************************************************
 *                                                           *
 *       Cryptographic protocol verifier                     *
 *                                                           *
 *       Bruno Blanchet and David Cadé                       *
 *                                                           *
 *       Copyright (C) ENS, CNRS, INRIA, 2005-2020           *
 *                                                           *
 *************************************************************)

(*

    Copyright ENS, CNRS, INRIA 
    contributors: Bruno Blanchet, Bruno.Blanchet@inria.fr
                  David Cadé

This software is a computer program whose purpose is to verify 
cryptographic protocols in the computational model.

This software is governed by the CeCILL-B license under French law and
abiding by the rules of distribution of free software.  You can  use, 
modify and/ or redistribute the software under the terms of the CeCILL-B
license as circulated by CEA, CNRS and INRIA at the following URL
"http://www.cecill.info". 

As a counterpart to the access to the source code and  rights to copy,
modify and redistribute granted by the license, users are provided only
with a limited warranty  and the software's author,  the holder of the
economic rights,  and the successive licensors  have only  limited
liability. 

In this respect, the user's attention is drawn to the risks associated
with loading,  using,  modifying and/or developing or reproducing the
software by the user in light of its specific status of free software,
that may mean  that it is complicated to manipulate,  and  that  also
therefore means  that it is reserved for developers  and  experienced
professionals having in-depth computer knowledge. Users are therefore
encouraged to load and test the software's suitability as regards their
requirements in conditions enabling the security of their systems and/or 
data to be ensured and,  more generally, to use and operate it in the 
same conditions as regards security. 

The fact that you are presently reading this means that you have had
knowledge of the CeCILL-B license and that you accept its terms.

*)
(* Example updated from CV 1.28 by Benjamin Beurdouche *)

(* Trivial running example for conference paper. *)
param NA, NB.

type mkey [bounded].
type mkeyseed [fixed].
type key [fixed].
type keyseed [fixed].
type seed [fixed].
type macs [bounded].

type host [bounded].
const A : host.
const B : host.

fun keyToBitstring(key):bitstring [data].

(* Shared-key generation *)
expand keygen(keyseed, key, kgen).

(* Shared-key encryption (CPA Stream cipher) *)
proba Penc.
expand IND_CPA_sym_enc(key, bitstring, bitstring, enc, dec, injbot, Z, Penc).

(* The function Z returns for each bitstring, a bitstring
   of the same length, consisting only of zeroes. *)
const Zkey : bitstring.
equation forall y:key;
	Z(keyToBitstring(y)) = Zkey.

(* Mac key generation *)
expand keygen(mkeyseed, mkey, mkgen).

(* Mac *)
proba Pmac.
expand SUF_CMA_proba_mac(mkey, bitstring, macs, mac, check, Pmac).

event eveA(host, bitstring, macs).
event eveB(host, bitstring, macs).

query  x1:bitstring, x2:macs;

	event(eveB(A, x1, x2)) ==> event(eveA(B, x1, x2)).

(* Queries *)


(* Channels and Processes *)
channel cA, cB, start, c.

let processA(Kab:key, mKab:mkey) =
	in(cA, (=B));
	new k2 : key;
	let ea1 = enc(keyToBitstring(k2), Kab) in
	event eveA(B, ea1, mac(ea1, mKab));
	out(cA, (B, ea1, mac(ea1, mKab))).

let processB(Kab:key, mKab:mkey) =
	in(cB, (=A, ea:bitstring, ma:macs));
	if check(ea, mKab, ma) then
	event eveB(A, ea, ma);
	let injbot(keyToBitstring(k3:key)) = dec(ea, Kab) in
	out(cB, ()).

process
	in(start, ());
	new rKab: keyseed;
	let Kab = kgen(rKab) in
	new rmKab: mkeyseed;
	let mKab = mkgen(rmKab) in
	out(c, ());
	((! NA processA(Kab,mKab)) |
	 (! NB processB(Kab,mKab)))

(* EXPECTED
RESULT Could not prove secrecy of k3.
0.064s (user 0.064s + system 0.000s), max rss 16840K
END *)
