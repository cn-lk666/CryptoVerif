(* PFDH signature scheme: Full domain hash
   The prover finds the same probability as for FDH, not the better
   reduction by J.S.Coron. This is ok, because we do not give the
   hypothesis of random self-reducibility.
 *)
(*这个例子通过陷门函数证明了用私钥签名的信息是不可伪造的
	原来的例子中，有一个seed的类型，个人感觉没有什么用，为了方便理解，给删除了，
	可能seed在PFDH signature scheme中会有一些作用吧，反正不影响证明*)
(* Example updated from CV 1.28 by Benjamin Beurdouche *)

(*
set interactiveMode = true.

Proof:

crypto hash
crypto mf r r_35 r_38
crypto f r
success

The prover finds the proof automatically, like for fdh, but is unable to find
the better reduction which exists for this scheme...
*)

param qS.

type pkey [bounded].
type skey [bounded].
type keyseed [large,fixed].
type D [large,fixed].

(* One-way trapdoor permutation: 陷门函数 *)
proba pOW.
expand OW_trapdoor_perm(keyseed, pkey, skey, D, pkgen, skgen, f, mf, pOW).

(* Hash function, random oracle model,
	 随机预言函数，随机预言机的定义要求其是一个有无限个输出的函数， 是一部预言机（简单说像是理论的黑箱），
	 对任何输入都回传一个真正均匀随机的输出（请参考离散型均匀分布），
	 不过对相同的输入，该预言机每次都会用同一方法输出。
	 换句话说，随机预言机是一个将所有可能输入与输出作随机映射的函数*)

type hashkey [fixed].
expand ROM_hash_large(hashkey, bitstring, D, hash, hashoracle, qH).

(* Queries *)
event bad.
query event(bad) ==> false.

(* Channels and Processes *)
channel c0, c1, c2, c3, start.

let processS(hk:hashkey, sk:skey) =
	! qS
	in(c1, m:bitstring);
	(*这里可以理解为用私钥签名*)
	out(c2, (mf(sk, hash(hk, m)))).

let processT(hk:hashkey, pk:pkey) =
	in(c3, (m2:bitstring, s:D));
	if f(pk, s) = hash(hk, m2) then
	find j <= qS suchthat defined(m[j]) && (m2 = m[j]) then yield else
	event bad.

process
	(in(start, ());
	new hk: hashkey;
	new r:keyseed;
	let sk = skgen(r) in
	let pk = pkgen(r) in
	out(c0, ());
	(hashoracle(hk) | processS(hk,sk) | processT(hk,pk)))

(* EXPECTED
All queries proved.
0.136s (user 0.124s + system 0.012s), max rss 17248K
END *)
