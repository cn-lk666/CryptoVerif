File "/tmp/cvc67467.cv", line 327, character 5 - line 341, character 6:
Warning: Duplicate inputs on channel c22
(The second one is located under the return of the first one.).
This is an example (possibly among others) that contradicts the following recommendation:
Different inputs should use different channel names, except matching inputs in different branches of if, find, let, or get.
 - That guarantees that the adversary knows precisely to which input it sends messages.
 - That allows using the number of inputs on channels in probability results.
Furthermore, for the best precision, you should also make sure that replications use different bounds when they are above different inputs, except matching inputs in different branches of if, find, let, or get.
Doing expand get, insert... No change.
Doing simplify (non-expanded game)... No change.
Doing expand... Done.
Doing remove assignments of findcond... Done.
Doing simplify... Run simplify 1 time(s). Fixpoint reached.
No change.
Doing move all binders... Done.
Doing remove assignments of findcond... No change.
Doing merge branches... No change.
Trying equivalence ind_cca2(enc) with r3... Failed.
Doing remove assignments of binder pk3... Done.
Trying equivalence ind_cca2(enc) with r3... Transf. OK Transf. done Succeeded.
Doing simplify (non-expanded game)... Applied collision new r1_1: keyseed; new r2_1: keyseed; return((pkgen(r1_1) = pkgen2_1(r2_1))) <=(Penccoll)=> return(false) with r2_1 -> r3_2, r1_1 -> r2 Probability: Penccoll
Done.
Doing expand... Done.
Doing remove assignments of findcond... Done.
Doing simplify... Run simplify 2 time(s). Fixpoint reached.
Done.
Doing move all binders... Done.
Doing remove assignments of findcond... No change.
Doing merge branches... No change.
Proof of event(QuoteVerified(x1, x2, x3, x4, x5, x6, x7)) ==> event(eve_QE(x1, x2, x3, x4, x5, x6, x7)) failed:
  Found QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch) at 64
  but could not prove event(eve_QE(x1, x2, x3, x4, x5, x6, x7))
Proved query event(eve_QE(x1, x2, x3, x4, x5, x6, x7)) ==> event(CPUsentSMR(x1, x2, x3, x4, x5, x6, x7, x8, x9))
Proof of event(QuoteVerified(x1, x2, x3, x4, x5, x6, x7)) ==> event(CPUsentSMR(x1, x2, x3, x4, x5, x6, x7, x8, x9)) failed:
  Found QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch) at 64
  but could not prove event(CPUsentSMR(x1, x2, x3, x4, x5, x6, x7, x8, x9))
Proved query event(QEaccepted2_14(x1, x2)) ==> event(TDXMsentTDR_8(x1, x2))
Proof of (one-session) secrecy of session_key failed:
  at 118, bad usage(s) of m2_Ch, which may depend on session_key.
Trying equivalence ind_cpa(sym_enc)... Failed.
Trying equivalence ind_cca2(enc)... Failed.
Trying equivalence uf_cma(sign)... Failed.
Trying equivalence suf_cma(mac)... Transf. OK Transf. done Succeeded.
Doing simplify (non-expanded game)... No change.
Doing expand... Done.
Doing remove assignments of findcond... Done.
Doing simplify... Run simplify 2 time(s). Fixpoint reached.
Done.
Doing move all binders... Done.
Doing remove assignments of findcond... No change.
Doing merge branches... No change.
Proof of event(QuoteVerified(x1, x2, x3, x4, x5, x6, x7)) ==> event(eve_QE(x1, x2, x3, x4, x5, x6, x7)) failed:
  Found QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch) at 64
  but could not prove event(eve_QE(x1, x2, x3, x4, x5, x6, x7))
Proof of event(QuoteVerified(x1, x2, x3, x4, x5, x6, x7)) ==> event(CPUsentSMR(x1, x2, x3, x4, x5, x6, x7, x8, x9)) failed:
  Found QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch) at 64
  but could not prove event(CPUsentSMR(x1, x2, x3, x4, x5, x6, x7, x8, x9))
Proof of (one-session) secrecy of session_key failed:
  at 118, bad usage(s) of m2_Ch, which may depend on session_key.
Trying equivalence ind_cpa(sym_enc)... Failed.
Trying equivalence ind_cca2(enc)... Failed.
Trying equivalence uf_cma(sign)... Failed.
Trying equivalence suf_cma(mac)... Failed.
Trying equivalence rom(hash)... Transf. OK Transf. done Succeeded.
Doing simplify (non-expanded game)... Done.
Doing expand... Done.
Doing remove assignments of findcond... Done.
Doing simplify... Doing global dependency analysis on r_18 inside simplify... At 1021, output message m2_CPU depends on r_18.
No change
Doing global dependency analysis on r_17 inside simplify... At 463, output message m2_TDXM depends on r_17.
No change
Doing global dependency analysis on r_16 inside simplify... At 178, output message r_16 depends on r_16.
No change
Doing global dependency analysis on r_18 inside simplify... At 1018, output message m2_CPU depends on r_18.
No change
Doing global dependency analysis on r_17 inside simplify... At 461, output message m2_TDXM depends on r_17.
No change
Doing global dependency analysis on r_16 inside simplify... At 177, output message r_16 depends on r_16.
No change
Run simplify 2 time(s). Fixpoint reached.
Done.
Doing move all binders... Done.
Doing remove assignments of findcond... Done.
Doing merge branches... No change.
Proof of event(QuoteVerified(x1, x2, x3, x4, x5, x6, x7)) ==> event(eve_QE(x1, x2, x3, x4, x5, x6, x7)) failed:
  Found QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch) at 63
  but could not prove event(eve_QE(x1, x2, x3, x4, x5, x6, x7))
Proof of event(QuoteVerified(x1, x2, x3, x4, x5, x6, x7)) ==> event(CPUsentSMR(x1, x2, x3, x4, x5, x6, x7, x8, x9)) failed:
  Found QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch) at 63
  but could not prove event(CPUsentSMR(x1, x2, x3, x4, x5, x6, x7, x8, x9))
Proof of (one-session) secrecy of session_key failed:
  at 117, bad usage(s) of m2_Ch, which may depend on session_key.
Trying equivalence ind_cpa(sym_enc)... Failed.
Trying equivalence ind_cca2(enc)... Failed.
Trying equivalence uf_cma(sign)... Failed.
Trying equivalence suf_cma(mac)... Failed.
Trying equivalence rom(hash)... Failed.
Doing remove assignments of binder pk2... Done.
Doing remove assignments of binder sk2... Done.
Trying equivalence ind_cca2(enc) with r3_4, r3_1, r2, r3_5, r3_6, r3_7, r3_8, r3_9, r3_10, r3_11, r3_12... Transf. OK Transf. done Succeeded.
Doing simplify (non-expanded game)... No change.
Doing expand... Done.
Doing remove assignments of findcond... Done.
Doing simplify... Doing global dependency analysis on r_18 inside simplify... At 2322, output message m2_CPU depends on r_18.
No change
Doing global dependency analysis on r_17 inside simplify... At 1738, output message m2_TDXM depends on r_17.
No change
Doing global dependency analysis on r_16 inside simplify... At 1446, output message r_16 depends on r_16.
No change
Doing global dependency analysis on session_key inside simplify... The variable session_key depends on session_key and occurs in a query.
No change
Doing global dependency analysis on r_18 inside simplify... At 2222, output message m2_CPU depends on r_18.
No change
Doing global dependency analysis on r_17 inside simplify... At 1638, output message m2_TDXM depends on r_17.
No change
Doing global dependency analysis on r_16 inside simplify... At 1346, output message r_16 depends on r_16.
No change
Doing global dependency analysis on session_key inside simplify... The variable session_key depends on session_key and occurs in a query.
No change
Run simplify 2 time(s). Fixpoint reached.
Done.
Doing move all binders... Done.
Doing remove assignments of findcond... Done.
Doing merge branches... No change.
Proof of event(QuoteVerified(x1, x2, x3, x4, x5, x6, x7)) ==> event(eve_QE(x1, x2, x3, x4, x5, x6, x7)) failed:
  Found QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch) at 62
  but could not prove event(eve_QE(x1, x2, x3, x4, x5, x6, x7))
Proof of event(QuoteVerified(x1, x2, x3, x4, x5, x6, x7)) ==> event(CPUsentSMR(x1, x2, x3, x4, x5, x6, x7, x8, x9)) failed:
  Found QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch) at 62
  but could not prove event(CPUsentSMR(x1, x2, x3, x4, x5, x6, x7, x8, x9))
Proof of (one-session) secrecy of session_key failed:
  at 137, bad usage(s) of m2_Ch, which may depend on session_key.
Trying equivalence ind_cpa(sym_enc)... Failed.
Trying equivalence ind_cca2(enc)... Failed.
Trying equivalence uf_cma(sign)... Failed.
Trying equivalence suf_cma(mac)... Failed.
Trying equivalence rom(hash)... Failed.
Doing SA rename x1_Ch... Done.
Doing remove assignments of findcond... No change.
Doing simplify... Doing global dependency analysis on r_18 inside simplify... At 2142, output message m2_CPU depends on r_18.
No change
Doing global dependency analysis on r_17 inside simplify... At 1558, output message m2_TDXM depends on r_17.
No change
Doing global dependency analysis on r_16 inside simplify... At 1266, output message r_16 depends on r_16.
No change
Doing global dependency analysis on session_key inside simplify... The variable session_key depends on session_key and occurs in a query.
No change
Run simplify 1 time(s). Fixpoint reached.
No change.
Trying equivalence ind_cca2(enc) with r3_23, r3_24, r3_25, r3_26, r3_27, r3_28, r3_29, r3_30, r3_31, r3_32, r3_33... Failed.
Doing remove assignments of binder x1_Ch_10... No change.
Trying equivalence ind_cca2(enc) with r3_23, r3_24, r3_25, r3_26, r3_27, r3_28, r3_29, r3_30, r3_31, r3_32, r3_33... Failed:
Random variables: r3_33 -> r2_1, r3_32 -> r2_1, r3_31 -> r2_1, r3_30 -> r2_1, r3_29 -> r2_1, r3_28 -> r2_1, r3_27 -> r2_1, r3_26 -> r2_1, r3_25 -> r2_1, r3_24 -> r2_1, r3_23 -> r2_1
The transformation did not use the useful_change oracles, or oracles deemed useful by default.
Trying equivalence ind_cca2(enc) with r3_23, r3_24, r3_25, r3_26, r3_27, r3_28, r3_29, r3_30, r3_31, r3_32, r3_33... Failed:
Random variables: r3_33 -> r2_1, r3_32 -> r2_1, r3_31 -> r2_1, r3_30 -> r2_1, r3_29 -> r2_1, r3_28 -> r2_1, r3_27 -> r2_1, r3_26 -> r2_1, r3_25 -> r2_1, r3_24 -> r2_1, r3_23 -> r2_1
The transformation did not use the useful_change oracles, or oracles deemed useful by default.
Doing remove assignments of binder spk1... Done.
Trying equivalence uf_cma(sign) with r1... Transf. OK Transf. done Succeeded.
Doing simplify (non-expanded game)... Done.
Doing expand... Done.
Doing remove assignments of findcond... No change.
Doing simplify... Doing global dependency analysis on r_18 inside simplify... At 1908, output message m2_CPU depends on r_18.
No change
Doing global dependency analysis on r_17 inside simplify... At 1324, output message m2_TDXM depends on r_17.
No change
Doing global dependency analysis on r_16 inside simplify... At 1032, output message r_16 depends on r_16.
No change
Doing global dependency analysis on r_18 inside simplify... At 1907, output message m2_CPU depends on r_18.
No change
Doing global dependency analysis on r_17 inside simplify... At 1323, output message m2_TDXM depends on r_17.
No change
Doing global dependency analysis on r_16 inside simplify... At 1031, output message r_16 depends on r_16.
No change
Run simplify 2 time(s). Fixpoint reached.
Done.
Doing move all binders... No change.
Doing remove assignments of findcond... No change.
Doing merge branches... No change.
Proof of event(QuoteVerified(x1, x2, x3, x4, x5, x6, x7)) ==> event(eve_QE(x1, x2, x3, x4, x5, x6, x7)) failed:
  Found QuoteVerified(rtyp_QE[u_24], res1_QE[u_24], csvn_QE[u_24], tcbh_QE[u_24], tdih_QE[u_24], rdata_QE[u_24], res2_QE[u_24]) at 48
  but could not prove event(eve_QE(x1, x2, x3, x4, x5, x6, x7))
Proof of event(QuoteVerified(x1, x2, x3, x4, x5, x6, x7)) ==> event(CPUsentSMR(x1, x2, x3, x4, x5, x6, x7, x8, x9)) failed:
  Found QuoteVerified(rtyp_QE[u_24], res1_QE[u_24], csvn_QE[u_24], tcbh_QE[u_24], tdih_QE[u_24], rdata_QE[u_24], res2_QE[u_24]) at 48
  but could not prove event(CPUsentSMR(x1, x2, x3, x4, x5, x6, x7, x8, x9))
Proof of (one-session) secrecy of session_key failed:
  at 130, bad usage(s) of m2_Ch, which may depend on session_key.
Trying equivalence ind_cpa(sym_enc)... Failed.
Trying equivalence ind_cca2(enc)... Failed.
Trying equivalence uf_cma(sign)... Failed.
Trying equivalence suf_cma(mac)... Failed.
Trying equivalence rom(hash)... Failed.
Doing SA rename x1_Ch... Done.
Doing remove assignments of findcond... No change.
Doing simplify... Doing global dependency analysis on r_18 inside simplify... At 1907, output message m2_CPU depends on r_18.
No change
Doing global dependency analysis on r_17 inside simplify... At 1323, output message m2_TDXM depends on r_17.
No change
Doing global dependency analysis on r_16 inside simplify... At 1031, output message r_16 depends on r_16.
No change
Run simplify 1 time(s). Fixpoint reached.
No change.
Trying equivalence ind_cca2(enc) with r3_33, r3_25, r3_26, r3_27, r3_28, r3_29, r3_30, r3_31, r3_32... Failed.
Doing remove assignments of binder x1_Ch_19... No change.
Trying equivalence ind_cca2(enc) with r3_33, r3_25, r3_26, r3_27, r3_28, r3_29, r3_30, r3_31, r3_32... Failed:
Random variables: r3_33 -> r2_1, r3_32 -> r2_1, r3_31 -> r2_1, r3_30 -> r2_1, r3_29 -> r2_1, r3_28 -> r2_1, r3_27 -> r2_1, r3_26 -> r2_1, r3_25 -> r2_1
The transformation did not use the useful_change oracles, or oracles deemed useful by default.
Trying equivalence ind_cca2(enc) with r3_33, r3_25, r3_26, r3_27, r3_28, r3_29, r3_30, r3_31, r3_32... Failed:
Random variables: r3_33 -> r2_1, r3_32 -> r2_1, r3_31 -> r2_1, r3_30 -> r2_1, r3_29 -> r2_1, r3_28 -> r2_1, r3_27 -> r2_1, r3_26 -> r2_1, r3_25 -> r2_1
The transformation did not use the useful_change oracles, or oracles deemed useful by default.
===================== Proof starts =======================
Initial state
Game 1 is
      in(start, ());
      new r1: skeyseed;
      let spk1: spkey = spkgen(r1) in
      let ssk1: sskey = sskgen(r1) in
      new r2: keyseed;
      let pk2: pkey = pkgen(r2) in
      let sk2: skey = skgen(r2) in
      new r3: keyseed;
      new sym_key: key;
      let pk3: pkey = pkgen(r3) in
      let sk3: skey = skgen(r3) in
      new hk: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec(m1_Ch, sk2) in
        let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
        if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
        let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
        let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
        let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
        let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
        event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
        new session_key: key;
        let m2_Ch: bitstring = (let m_8: bitstring = key2bitstring(session_key) in new r_8: enc_seed; enc_r(m_8, x1_Ch, r_8)) in
        out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        out(ch2[iH], hash(hk, x1_1))
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let pk_TD1: pkey = pk3 in
        let rdata_TD: rdata_t = rdata_f(pk3, rdata_other) in
        let m1_TD: bitstring = (let m_9: bitstring = rdata_t2bitstring(rdata_TD) in new r_9: enc_seed_1; enc_r_1(m_9, sym_key, r_9)) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        let tdi_TDXM: tdi_t = get_tdi in
        let rtyp_TDXM: rtyp_t = get_rtyp in
        let tdih_TDXM: hashoutput = hash(hk, tdi_t2bitstring(tdi_TDXM)) in
        let m2_TDXM: bitstring = (let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, tdih_TDXM, rdata_TDXM) in new r_10: enc_seed_1; enc_r_1(m_10, sym_key, r_10)) in
        out(c7[i_2], m2_TDXM);
        in(c10[i_2], m3_TDXM: bitstring);
        let res4_TDXM: res_t = get_res in
        let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
        let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
        event TDXMsentTDR_8(smr_TDXM, tdi_TDXM);
        let m4_TDXM: bitstring = (let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in new r_11: enc_seed_1; enc_r_1(m_11, sym_key, r_11)) in
        out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        let csvn_CPU: csvn_t = get_csvn in
        let res1_CPU: res_t = get_res in
        let res2_CPU: res_t = get_res in
        let tcbi_CPU: tcbi_t = get_tcbi in
        let tcbh_CPU: hashoutput = hash(hk, tcbi_t2bitstring(tcbi_CPU)) in
        let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU) in
        let mac_CPU: macres_t = mac(rms_without_mac_t2bitstring(rms_without_mac_CPU), mkey) in
        let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, mac_CPU) in
        let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
        event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU, mac_CPU, tcbi_CPU);
        let m2_CPU: bitstring = (let m_12: bitstring = smr_t2bitstring(smr_CPU) in new r_12: enc_seed_1; enc_r_1(m_12, sym_key, r_12)) in
        out(c9[i_3], m2_CPU);
        in(c16[i_3], m3_CPU: bitstring);
        let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
        let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
        if check(rms_without_mac_t2bitstring(rms_without_mac_QE_to_CPU), mkey, mac_QE_to_CPU) then
        let resOfMac: bool = true in
        let m4_CPU: bitstring = (let m_13: bitstring = bool2bitstring(resOfMac) in new r_13: enc_seed_1; enc_r_1(m_13, sym_key, r_13)) in
        out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        if (hash(hk, tcbi_t2bitstring(tcbi_QE)) = tcbh_QE) && (hash(hk, tdi_t2bitstring(tdi_QE)) = tdih_QE) then
        let m1_QE: bitstring = (let m_14: bitstring = rms_t2bitstring(rms_QE) in new r_14: enc_seed_1; enc_r_1(m_14, sym_key, r_14)) in
        out(c15[i_4], m1_QE);
        in(c18[i_4], m2_QE: bitstring);
        let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
        if resOfMac_QE then
        let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
        let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
        let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
        let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
        let m3_QE: bitstring = (let m_15: bitstring = quote_t2bitstring(quote_QE) in new r_15: enc_seed; enc_r(m_15, pk2, r_15)) in
        out(c19[i_4], m3_QE)
      ))


Applying expand
  - Expand if/find/let
yields

Game 2 is
      in(start, ());
      new r1: skeyseed;
      let spk1: spkey = spkgen(r1) in
      let ssk1: sskey = sskgen(r1) in
      new r2: keyseed;
      let pk2: pkey = pkgen(r2) in
      let sk2: skey = skgen(r2) in
      new r3: keyseed;
      new sym_key: key;
      let pk3: pkey = pkgen(r3) in
      let sk3: skey = skgen(r3) in
      new hk: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec(m1_Ch, sk2) in
        let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
        if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
        let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
        let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
        let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
        let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
        event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
        new session_key: key;
        let m_8: bitstring = key2bitstring(session_key) in
        new r_8: enc_seed;
        let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r_8) in
        out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        out(ch2[iH], hash(hk, x1_1))
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let pk_TD1: pkey = pk3 in
        let rdata_TD: rdata_t = rdata_f(pk3, rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        let tdi_TDXM: tdi_t = get_tdi in
        let rtyp_TDXM: rtyp_t = get_rtyp in
        let tdih_TDXM: hashoutput = hash(hk, tdi_t2bitstring(tdi_TDXM)) in
        let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, tdih_TDXM, rdata_TDXM) in
        new r_10: enc_seed_1;
        let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
        out(c7[i_2], m2_TDXM);
        in(c10[i_2], m3_TDXM: bitstring);
        let res4_TDXM: res_t = get_res in
        let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
        let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
        event TDXMsentTDR_8(smr_TDXM, tdi_TDXM);
        let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
        new r_11: enc_seed_1;
        let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
        out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        let csvn_CPU: csvn_t = get_csvn in
        let res1_CPU: res_t = get_res in
        let res2_CPU: res_t = get_res in
        let tcbi_CPU: tcbi_t = get_tcbi in
        let tcbh_CPU: hashoutput = hash(hk, tcbi_t2bitstring(tcbi_CPU)) in
        let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU) in
        let mac_CPU: macres_t = mac(rms_without_mac_t2bitstring(rms_without_mac_CPU), mkey) in
        let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, mac_CPU) in
        let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
        event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU, mac_CPU, tcbi_CPU);
        let m_12: bitstring = smr_t2bitstring(smr_CPU) in
        new r_12: enc_seed_1;
        let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
        out(c9[i_3], m2_CPU);
        in(c16[i_3], m3_CPU: bitstring);
        let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
        let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
        if check(rms_without_mac_t2bitstring(rms_without_mac_QE_to_CPU), mkey, mac_QE_to_CPU) then
        let resOfMac: bool = true in
        let m_13: bitstring = bool2bitstring(resOfMac) in
        new r_13: enc_seed_1;
        let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
        out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        if (hash(hk, tcbi_t2bitstring(tcbi_QE)) = tcbh_QE) && (hash(hk, tdi_t2bitstring(tdi_QE)) = tdih_QE) then
        let m_14: bitstring = rms_t2bitstring(rms_QE) in
        new r_14: enc_seed_1;
        let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
        out(c15[i_4], m1_QE);
        in(c18[i_4], m2_QE: bitstring);
        let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
        if resOfMac_QE then
        let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
        let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
        let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
        let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
        let m_15: bitstring = quote_t2bitstring(quote_QE) in
        new r_15: enc_seed;
        let m3_QE: bitstring = enc_r(m_15, pk2, r_15) in
        out(c19[i_4], m3_QE)
      ))


Applying remove assignments of findcond
  - Remove assignments on sk3 (definition removed, all usages removed)
  - Remove assignments on pk_TD1 (definition removed, all usages removed)
yields

Game 3 is
      in(start, ());
      new r1: skeyseed;
      let spk1: spkey = spkgen(r1) in
      let ssk1: sskey = sskgen(r1) in
      new r2: keyseed;
      let pk2: pkey = pkgen(r2) in
      let sk2: skey = skgen(r2) in
      new r3: keyseed;
      new sym_key: key;
      let pk3: pkey = pkgen(r3) in
      new hk: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec(m1_Ch, sk2) in
        let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
        if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
        let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
        let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
        let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
        let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
        event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
        new session_key: key;
        let m_8: bitstring = key2bitstring(session_key) in
        new r_8: enc_seed;
        let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r_8) in
        out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        out(ch2[iH], hash(hk, x1_1))
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pk3, rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        let tdi_TDXM: tdi_t = get_tdi in
        let rtyp_TDXM: rtyp_t = get_rtyp in
        let tdih_TDXM: hashoutput = hash(hk, tdi_t2bitstring(tdi_TDXM)) in
        let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, tdih_TDXM, rdata_TDXM) in
        new r_10: enc_seed_1;
        let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
        out(c7[i_2], m2_TDXM);
        in(c10[i_2], m3_TDXM: bitstring);
        let res4_TDXM: res_t = get_res in
        let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
        let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
        event TDXMsentTDR_8(smr_TDXM, tdi_TDXM);
        let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
        new r_11: enc_seed_1;
        let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
        out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        let csvn_CPU: csvn_t = get_csvn in
        let res1_CPU: res_t = get_res in
        let res2_CPU: res_t = get_res in
        let tcbi_CPU: tcbi_t = get_tcbi in
        let tcbh_CPU: hashoutput = hash(hk, tcbi_t2bitstring(tcbi_CPU)) in
        let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU) in
        let mac_CPU: macres_t = mac(rms_without_mac_t2bitstring(rms_without_mac_CPU), mkey) in
        let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, mac_CPU) in
        let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
        event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU, mac_CPU, tcbi_CPU);
        let m_12: bitstring = smr_t2bitstring(smr_CPU) in
        new r_12: enc_seed_1;
        let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
        out(c9[i_3], m2_CPU);
        in(c16[i_3], m3_CPU: bitstring);
        let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
        let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
        if check(rms_without_mac_t2bitstring(rms_without_mac_QE_to_CPU), mkey, mac_QE_to_CPU) then
        let resOfMac: bool = true in
        let m_13: bitstring = bool2bitstring(resOfMac) in
        new r_13: enc_seed_1;
        let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
        out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        if (hash(hk, tcbi_t2bitstring(tcbi_QE)) = tcbh_QE) && (hash(hk, tdi_t2bitstring(tdi_QE)) = tdih_QE) then
        let m_14: bitstring = rms_t2bitstring(rms_QE) in
        new r_14: enc_seed_1;
        let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
        out(c15[i_4], m1_QE);
        in(c18[i_4], m2_QE: bitstring);
        let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
        if resOfMac_QE then
        let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
        let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
        let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
        let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
        let m_15: bitstring = quote_t2bitstring(quote_QE) in
        new r_15: enc_seed;
        let m3_QE: bitstring = enc_r(m_15, pk2, r_15) in
        out(c19[i_4], m3_QE)
      ))


Applying move all binders
  - Move assignment to res4_TDXM
yields

Game 4 is
      in(start, ());
      new r1: skeyseed;
      let spk1: spkey = spkgen(r1) in
      let ssk1: sskey = sskgen(r1) in
      new r2: keyseed;
      let pk2: pkey = pkgen(r2) in
      let sk2: skey = skgen(r2) in
      new r3: keyseed;
      new sym_key: key;
      let pk3: pkey = pkgen(r3) in
      new hk: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec(m1_Ch, sk2) in
        let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
        if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
        let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
        let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
        let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
        let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
        event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
        new session_key: key;
        let m_8: bitstring = key2bitstring(session_key) in
        new r_8: enc_seed;
        let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r_8) in
        out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        out(ch2[iH], hash(hk, x1_1))
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pk3, rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        let tdi_TDXM: tdi_t = get_tdi in
        let rtyp_TDXM: rtyp_t = get_rtyp in
        let tdih_TDXM: hashoutput = hash(hk, tdi_t2bitstring(tdi_TDXM)) in
        let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, tdih_TDXM, rdata_TDXM) in
        new r_10: enc_seed_1;
        let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
        out(c7[i_2], m2_TDXM);
        in(c10[i_2], m3_TDXM: bitstring);
        let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
        let res4_TDXM: res_t = get_res in
        let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
        event TDXMsentTDR_8(smr_TDXM, tdi_TDXM);
        let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
        new r_11: enc_seed_1;
        let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
        out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        let csvn_CPU: csvn_t = get_csvn in
        let res1_CPU: res_t = get_res in
        let res2_CPU: res_t = get_res in
        let tcbi_CPU: tcbi_t = get_tcbi in
        let tcbh_CPU: hashoutput = hash(hk, tcbi_t2bitstring(tcbi_CPU)) in
        let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU) in
        let mac_CPU: macres_t = mac(rms_without_mac_t2bitstring(rms_without_mac_CPU), mkey) in
        let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, mac_CPU) in
        let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
        event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU, mac_CPU, tcbi_CPU);
        let m_12: bitstring = smr_t2bitstring(smr_CPU) in
        new r_12: enc_seed_1;
        let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
        out(c9[i_3], m2_CPU);
        in(c16[i_3], m3_CPU: bitstring);
        let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
        let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
        if check(rms_without_mac_t2bitstring(rms_without_mac_QE_to_CPU), mkey, mac_QE_to_CPU) then
        let resOfMac: bool = true in
        let m_13: bitstring = bool2bitstring(resOfMac) in
        new r_13: enc_seed_1;
        let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
        out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        if (hash(hk, tcbi_t2bitstring(tcbi_QE)) = tcbh_QE) && (hash(hk, tdi_t2bitstring(tdi_QE)) = tdih_QE) then
        let m_14: bitstring = rms_t2bitstring(rms_QE) in
        new r_14: enc_seed_1;
        let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
        out(c15[i_4], m1_QE);
        in(c18[i_4], m2_QE: bitstring);
        let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
        if resOfMac_QE then
        let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
        let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
        let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
        let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
        let m_15: bitstring = quote_t2bitstring(quote_QE) in
        new r_15: enc_seed;
        let m3_QE: bitstring = enc_r(m_15, pk2, r_15) in
        out(c19[i_4], m3_QE)
      ))


Applying remove assignments of binder pk3
  - Remove assignments on pk3 (definition removed, all usages removed)
yields

Game 5 is
      in(start, ());
      new r1: skeyseed;
      let spk1: spkey = spkgen(r1) in
      let ssk1: sskey = sskgen(r1) in
      new r2: keyseed;
      let pk2: pkey = pkgen(r2) in
      let sk2: skey = skgen(r2) in
      new r3: keyseed;
      new sym_key: key;
      new hk: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec(m1_Ch, sk2) in
        let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
        if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
        let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
        let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
        let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
        let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
        event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
        new session_key: key;
        let m_8: bitstring = key2bitstring(session_key) in
        new r_8: enc_seed;
        let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r_8) in
        out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        out(ch2[iH], hash(hk, x1_1))
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pkgen(r3), rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        let tdi_TDXM: tdi_t = get_tdi in
        let rtyp_TDXM: rtyp_t = get_rtyp in
        let tdih_TDXM: hashoutput = hash(hk, tdi_t2bitstring(tdi_TDXM)) in
        let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, tdih_TDXM, rdata_TDXM) in
        new r_10: enc_seed_1;
        let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
        out(c7[i_2], m2_TDXM);
        in(c10[i_2], m3_TDXM: bitstring);
        let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
        let res4_TDXM: res_t = get_res in
        let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
        event TDXMsentTDR_8(smr_TDXM, tdi_TDXM);
        let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
        new r_11: enc_seed_1;
        let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
        out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        let csvn_CPU: csvn_t = get_csvn in
        let res1_CPU: res_t = get_res in
        let res2_CPU: res_t = get_res in
        let tcbi_CPU: tcbi_t = get_tcbi in
        let tcbh_CPU: hashoutput = hash(hk, tcbi_t2bitstring(tcbi_CPU)) in
        let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU) in
        let mac_CPU: macres_t = mac(rms_without_mac_t2bitstring(rms_without_mac_CPU), mkey) in
        let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, mac_CPU) in
        let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
        event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU, mac_CPU, tcbi_CPU);
        let m_12: bitstring = smr_t2bitstring(smr_CPU) in
        new r_12: enc_seed_1;
        let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
        out(c9[i_3], m2_CPU);
        in(c16[i_3], m3_CPU: bitstring);
        let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
        let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
        if check(rms_without_mac_t2bitstring(rms_without_mac_QE_to_CPU), mkey, mac_QE_to_CPU) then
        let resOfMac: bool = true in
        let m_13: bitstring = bool2bitstring(resOfMac) in
        new r_13: enc_seed_1;
        let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
        out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        if (hash(hk, tcbi_t2bitstring(tcbi_QE)) = tcbh_QE) && (hash(hk, tdi_t2bitstring(tdi_QE)) = tdih_QE) then
        let m_14: bitstring = rms_t2bitstring(rms_QE) in
        new r_14: enc_seed_1;
        let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
        out(c15[i_4], m1_QE);
        in(c18[i_4], m2_QE: bitstring);
        let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
        if resOfMac_QE then
        let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
        let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
        let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
        let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
        let m_15: bitstring = quote_t2bitstring(quote_QE) in
        new r_15: enc_seed;
        let m3_QE: bitstring = enc_r(m_15, pk2, r_15) in
        out(c19[i_4], m3_QE)
      ))


Applying equivalence ind_cca2(enc) with r3 [probability (qQE + qChallenger) * Penc(time(context for game 5) + time + (-1 + qChallenger + qQE) * time(enc_r, max(maxlength(game 5: m_15), maxlength(game 5: m_8))), 0)]
  - Equivalence ind_cca2(enc) with variables: r_15 -> r2_1, r_8 -> r2_1, r3 -> r
yields

Game 6 is
      in(start, ());
      new r1: skeyseed;
      let spk1: spkey = spkgen(r1) in
      let ssk1: sskey = sskgen(r1) in
      new r2: keyseed;
      let pk2: pkey = pkgen(r2) in
      let sk2: skey = skgen(r2) in
      new r3_2: keyseed;
      new sym_key: key;
      new hk: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec(m1_Ch, sk2) in
        let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
        if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
        let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
        let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
        let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
        let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
        event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
        new session_key: key;
        let m_8: bitstring = key2bitstring(session_key) in
        new r3_1: enc_seed;
        new r2_1: enc_seed;
        let m2_Ch: bitstring = (let x: bitstring = m_8 in 
          (let y: pkey = x1_Ch in 
            if defined(r3_2) && (y = pkgen2_1(r3_2)) then 
            (let m2: bitstring = enc_r2(Z(x), y, r2_1) in m2) 
            else enc_r(x, y, r3_1))) in
        out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        out(ch2[iH], hash(hk, x1_1))
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pkgen2_1(r3_2), rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        let tdi_TDXM: tdi_t = get_tdi in
        let rtyp_TDXM: rtyp_t = get_rtyp in
        let tdih_TDXM: hashoutput = hash(hk, tdi_t2bitstring(tdi_TDXM)) in
        let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, tdih_TDXM, rdata_TDXM) in
        new r_10: enc_seed_1;
        let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
        out(c7[i_2], m2_TDXM);
        in(c10[i_2], m3_TDXM: bitstring);
        let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
        let res4_TDXM: res_t = get_res in
        let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
        event TDXMsentTDR_8(smr_TDXM, tdi_TDXM);
        let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
        new r_11: enc_seed_1;
        let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
        out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        let csvn_CPU: csvn_t = get_csvn in
        let res1_CPU: res_t = get_res in
        let res2_CPU: res_t = get_res in
        let tcbi_CPU: tcbi_t = get_tcbi in
        let tcbh_CPU: hashoutput = hash(hk, tcbi_t2bitstring(tcbi_CPU)) in
        let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU) in
        let mac_CPU: macres_t = mac(rms_without_mac_t2bitstring(rms_without_mac_CPU), mkey) in
        let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, mac_CPU) in
        let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
        event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU, mac_CPU, tcbi_CPU);
        let m_12: bitstring = smr_t2bitstring(smr_CPU) in
        new r_12: enc_seed_1;
        let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
        out(c9[i_3], m2_CPU);
        in(c16[i_3], m3_CPU: bitstring);
        let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
        let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
        if check(rms_without_mac_t2bitstring(rms_without_mac_QE_to_CPU), mkey, mac_QE_to_CPU) then
        let resOfMac: bool = true in
        let m_13: bitstring = bool2bitstring(resOfMac) in
        new r_13: enc_seed_1;
        let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
        out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        if (hash(hk, tcbi_t2bitstring(tcbi_QE)) = tcbh_QE) && (hash(hk, tdi_t2bitstring(tdi_QE)) = tdih_QE) then
        let m_14: bitstring = rms_t2bitstring(rms_QE) in
        new r_14: enc_seed_1;
        let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
        out(c15[i_4], m1_QE);
        in(c18[i_4], m2_QE: bitstring);
        let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
        if resOfMac_QE then
        let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
        let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
        let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
        let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
        let m_15: bitstring = quote_t2bitstring(quote_QE) in
        new r3_3: enc_seed;
        new r2_2: enc_seed;
        let m3_QE: bitstring = 
          (let x_1: bitstring = m_15 in 
            (let y_1: pkey = pk2 in 
              {522}if defined(r3_2) && {523}(y_1 = pkgen2_1(r3_2)) then (let m2_1: bitstring = enc_r2(Z(x_1), y_1, r2_2) in m2_1) else enc_r(x_1, y_1, r3_3))) in
        out(c19[i_4], m3_QE)
      ))


Applying simplify (non-expanded game) [probability Penccoll]
  - Simplification pass
    - Replaced (y_1 = pkgen2_1(r3_2)) with false at 523
    - Remove branch 1 in find at 522
    - Find at 522 removed (else branch kept if any)
yields

Game 7 is
      in(start, ());
      new r1: skeyseed;
      let spk1: spkey = spkgen(r1) in
      let ssk1: sskey = sskgen(r1) in
      new r2: keyseed;
      let pk2: pkey = pkgen(r2) in
      let sk2: skey = skgen(r2) in
      new r3_2: keyseed;
      new sym_key: key;
      new hk: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec(m1_Ch, sk2) in
        let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
        if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
        let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
        let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
        let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
        let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
        event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
        new session_key: key;
        let m_8: bitstring = key2bitstring(session_key) in
        new r3_1: enc_seed;
        new r2_1: enc_seed;
        let m2_Ch: bitstring = (let x: bitstring = m_8 in (let y: pkey = x1_Ch in {95}if defined(r3_2) && (y = pkgen2_1(r3_2)) then (let m2: bitstring = enc_r2(Z(x), y, r2_1) in m2) else enc_r(x, y, r3_1))) in
        out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        out(ch2[iH], hash(hk, x1_1))
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pkgen2_1(r3_2), rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        let tdi_TDXM: tdi_t = get_tdi in
        let rtyp_TDXM: rtyp_t = get_rtyp in
        let tdih_TDXM: hashoutput = hash(hk, tdi_t2bitstring(tdi_TDXM)) in
        let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, tdih_TDXM, rdata_TDXM) in
        new r_10: enc_seed_1;
        let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
        out(c7[i_2], m2_TDXM);
        in(c10[i_2], m3_TDXM: bitstring);
        let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
        let res4_TDXM: res_t = get_res in
        let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
        event TDXMsentTDR_8(smr_TDXM, tdi_TDXM);
        let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
        new r_11: enc_seed_1;
        let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
        out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        let csvn_CPU: csvn_t = get_csvn in
        let res1_CPU: res_t = get_res in
        let res2_CPU: res_t = get_res in
        let tcbi_CPU: tcbi_t = get_tcbi in
        let tcbh_CPU: hashoutput = hash(hk, tcbi_t2bitstring(tcbi_CPU)) in
        let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU) in
        let mac_CPU: macres_t = mac(rms_without_mac_t2bitstring(rms_without_mac_CPU), mkey) in
        let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, mac_CPU) in
        let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
        event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU, mac_CPU, tcbi_CPU);
        let m_12: bitstring = smr_t2bitstring(smr_CPU) in
        new r_12: enc_seed_1;
        let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
        out(c9[i_3], m2_CPU);
        in(c16[i_3], m3_CPU: bitstring);
        let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
        let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
        if check(rms_without_mac_t2bitstring(rms_without_mac_QE_to_CPU), mkey, mac_QE_to_CPU) then
        let resOfMac: bool = true in
        let m_13: bitstring = bool2bitstring(resOfMac) in
        new r_13: enc_seed_1;
        let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
        out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        if (hash(hk, tcbi_t2bitstring(tcbi_QE)) = tcbh_QE) && (hash(hk, tdi_t2bitstring(tdi_QE)) = tdih_QE) then
        let m_14: bitstring = rms_t2bitstring(rms_QE) in
        new r_14: enc_seed_1;
        let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
        out(c15[i_4], m1_QE);
        in(c18[i_4], m2_QE: bitstring);
        let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
        if resOfMac_QE then
        let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
        let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
        let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
        let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
        let m_15: bitstring = quote_t2bitstring(quote_QE) in
        new r3_3: enc_seed;
        new r2_2: enc_seed;
        let m3_QE: bitstring = (let x_1: bitstring = m_15 in (let y_1: pkey = pk2 in enc_r(x_1, y_1, r3_3))) in
        out(c19[i_4], m3_QE)
      ))


Applying expand
  - Expand if/find/let
    - Transformed find at 95 into a test
yields

Game 8 is
      in(start, ());
      new r1: skeyseed;
      let spk1: spkey = spkgen(r1) in
      let ssk1: sskey = sskgen(r1) in
      new r2: keyseed;
      let pk2: pkey = pkgen(r2) in
      let sk2: skey = skgen(r2) in
      new r3_2: keyseed;
      new sym_key: key;
      new hk: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec(m1_Ch, sk2) in
        let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
        if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
        let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
        let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
        let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
        let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
        event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
        new session_key: key;
        let m_8: bitstring = key2bitstring(session_key) in
        new r3_1: enc_seed;
        new r2_1: enc_seed;
        let x: bitstring = m_8 in
        let y: pkey = x1_Ch in
        if y = pkgen2_1(r3_2) then
        (
          let m2: bitstring = enc_r2(Z(x), y, r2_1) in
          let m2_Ch: bitstring = m2 in
          out(c23[i], m2_Ch)
        )
        else
          let m2_Ch: bitstring = enc_r(x, y, r3_1) in
          out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        out(ch2[iH], hash(hk, x1_1))
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pkgen2_1(r3_2), rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        let tdi_TDXM: tdi_t = get_tdi in
        let rtyp_TDXM: rtyp_t = get_rtyp in
        let tdih_TDXM: hashoutput = hash(hk, tdi_t2bitstring(tdi_TDXM)) in
        let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, tdih_TDXM, rdata_TDXM) in
        new r_10: enc_seed_1;
        let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
        out(c7[i_2], m2_TDXM);
        in(c10[i_2], m3_TDXM: bitstring);
        let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
        let res4_TDXM: res_t = get_res in
        let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
        event TDXMsentTDR_8(smr_TDXM, tdi_TDXM);
        let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
        new r_11: enc_seed_1;
        let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
        out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        let csvn_CPU: csvn_t = get_csvn in
        let res1_CPU: res_t = get_res in
        let res2_CPU: res_t = get_res in
        let tcbi_CPU: tcbi_t = get_tcbi in
        let tcbh_CPU: hashoutput = hash(hk, tcbi_t2bitstring(tcbi_CPU)) in
        let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU) in
        let mac_CPU: macres_t = mac(rms_without_mac_t2bitstring(rms_without_mac_CPU), mkey) in
        let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, mac_CPU) in
        let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
        event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU, mac_CPU, tcbi_CPU);
        let m_12: bitstring = smr_t2bitstring(smr_CPU) in
        new r_12: enc_seed_1;
        let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
        out(c9[i_3], m2_CPU);
        in(c16[i_3], m3_CPU: bitstring);
        let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
        let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
        if check(rms_without_mac_t2bitstring(rms_without_mac_QE_to_CPU), mkey, mac_QE_to_CPU) then
        let resOfMac: bool = true in
        let m_13: bitstring = bool2bitstring(resOfMac) in
        new r_13: enc_seed_1;
        let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
        out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        if (hash(hk, tcbi_t2bitstring(tcbi_QE)) = tcbh_QE) && (hash(hk, tdi_t2bitstring(tdi_QE)) = tdih_QE) then
        let m_14: bitstring = rms_t2bitstring(rms_QE) in
        new r_14: enc_seed_1;
        let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
        out(c15[i_4], m1_QE);
        in(c18[i_4], m2_QE: bitstring);
        let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
        if resOfMac_QE then
        let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
        let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
        let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
        let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
        let m_15: bitstring = quote_t2bitstring(quote_QE) in
        new r3_3: enc_seed;
        new r2_2: enc_seed;
        let x_1: bitstring = m_15 in
        let y_1: pkey = pk2 in
        let m3_QE: bitstring = enc_r(x_1, y_1, r3_3) in
        out(c19[i_4], m3_QE)
      ))


Applying remove assignments of findcond
  - Remove assignments on x_1 (definition removed, all usages removed)
  - Remove assignments on y_1 (definition removed, all usages removed)
  - Remove assignments on x (definition removed, all usages removed)
  - Remove assignments on y (definition removed, all usages removed)
  - Remove assignments on m2_Ch (definition removed, all usages removed)
yields

Game 9 is
      in(start, ());
      new r1: skeyseed;
      let spk1: spkey = spkgen(r1) in
      let ssk1: sskey = sskgen(r1) in
      new r2: keyseed;
      let pk2: pkey = pkgen(r2) in
      let sk2: skey = skgen(r2) in
      new r3_2: keyseed;
      new sym_key: key;
      new hk: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec(m1_Ch, sk2) in
        let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
        if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
        let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
        let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
        let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
        let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
        event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
        new session_key: key;
        let m_8: bitstring = key2bitstring(session_key) in
        new r3_1: enc_seed;
        new r2_1: enc_seed;
        if x1_Ch = pkgen2_1(r3_2) then
        (
          let m2: bitstring = {95}enc_r2(Z(m_8), x1_Ch, r2_1) in
          out(c23[i], m2)
        )
        else
          let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_1) in
          out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        out(ch2[iH], hash(hk, x1_1))
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pkgen2_1(r3_2), rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        let tdi_TDXM: tdi_t = get_tdi in
        let rtyp_TDXM: rtyp_t = get_rtyp in
        let tdih_TDXM: hashoutput = hash(hk, tdi_t2bitstring(tdi_TDXM)) in
        let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, tdih_TDXM, rdata_TDXM) in
        new r_10: enc_seed_1;
        let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
        out(c7[i_2], m2_TDXM);
        in(c10[i_2], m3_TDXM: bitstring);
        let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
        let res4_TDXM: res_t = get_res in
        let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
        event TDXMsentTDR_8(smr_TDXM, tdi_TDXM);
        let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
        new r_11: enc_seed_1;
        let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
        out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        let csvn_CPU: csvn_t = get_csvn in
        let res1_CPU: res_t = get_res in
        let res2_CPU: res_t = get_res in
        let tcbi_CPU: tcbi_t = get_tcbi in
        let tcbh_CPU: hashoutput = hash(hk, tcbi_t2bitstring(tcbi_CPU)) in
        let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU) in
        let mac_CPU: macres_t = mac(rms_without_mac_t2bitstring(rms_without_mac_CPU), mkey) in
        let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, mac_CPU) in
        let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
        event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU, mac_CPU, tcbi_CPU);
        let m_12: bitstring = smr_t2bitstring(smr_CPU) in
        new r_12: enc_seed_1;
        let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
        out(c9[i_3], m2_CPU);
        in(c16[i_3], m3_CPU: bitstring);
        let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
        let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
        if check(rms_without_mac_t2bitstring(rms_without_mac_QE_to_CPU), mkey, mac_QE_to_CPU) then
        let resOfMac: bool = true in
        let m_13: bitstring = bool2bitstring(resOfMac) in
        new r_13: enc_seed_1;
        let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
        out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        if (hash(hk, tcbi_t2bitstring(tcbi_QE)) = tcbh_QE) && (hash(hk, tdi_t2bitstring(tdi_QE)) = tdih_QE) then
        let m_14: bitstring = rms_t2bitstring(rms_QE) in
        new r_14: enc_seed_1;
        let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
        out(c15[i_4], m1_QE);
        in(c18[i_4], m2_QE: bitstring);
        let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
        if resOfMac_QE then
        let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
        let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
        let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
        let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
        let m_15: bitstring = quote_t2bitstring(quote_QE) in
        new r3_3: enc_seed;
 {513}  new r2_2: enc_seed;
        let m3_QE: bitstring = enc_r(m_15, pk2, r3_3) in
        out(c19[i_4], m3_QE)
      ))


Applying simplify
  - Simplification pass
    - Remove random number generation at 513
    - Replaced enc_r2(Z(m_8), x1_Ch, r2_1) with enc_r2(Zkey1, x1_Ch, r2_1) at 95
yields

Game 10 is
      in(start, ());
      new r1: skeyseed;
      let spk1: spkey = spkgen(r1) in
      let ssk1: sskey = sskgen(r1) in
      new r2: keyseed;
      let pk2: pkey = pkgen(r2) in
      let sk2: skey = skgen(r2) in
      new r3_2: keyseed;
      new sym_key: key;
      new hk: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec(m1_Ch, sk2) in
        let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
        if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
        let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
        let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
        let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
        let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
        event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
        new session_key: key;
        let m_8: bitstring = key2bitstring(session_key) in
        new r3_1: enc_seed;
        new r2_1: enc_seed;
        if x1_Ch = pkgen2_1(r3_2) then
        (
          let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
          out(c23[i], m2)
        )
        else
          let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_1) in
          out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        out(ch2[iH], hash(hk, x1_1))
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pkgen2_1(r3_2), rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        let tdi_TDXM: tdi_t = get_tdi in
        let rtyp_TDXM: rtyp_t = get_rtyp in
        let tdih_TDXM: hashoutput = hash(hk, tdi_t2bitstring(tdi_TDXM)) in
        let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, tdih_TDXM, rdata_TDXM) in
        new r_10: enc_seed_1;
        let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
        out(c7[i_2], m2_TDXM);
        in(c10[i_2], m3_TDXM: bitstring);
        let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
        let res4_TDXM: res_t = get_res in
        let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
        event TDXMsentTDR_8(smr_TDXM, tdi_TDXM);
        let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
        new r_11: enc_seed_1;
        let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
        out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        let csvn_CPU: csvn_t = get_csvn in
        let res1_CPU: res_t = get_res in
        let res2_CPU: res_t = get_res in
        let tcbi_CPU: tcbi_t = get_tcbi in
        let tcbh_CPU: hashoutput = hash(hk, tcbi_t2bitstring(tcbi_CPU)) in
        let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU) in
        let mac_CPU: macres_t = mac(rms_without_mac_t2bitstring(rms_without_mac_CPU), mkey) in
        let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, mac_CPU) in
        let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
        event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU, mac_CPU, tcbi_CPU);
        let m_12: bitstring = smr_t2bitstring(smr_CPU) in
        new r_12: enc_seed_1;
        let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
        out(c9[i_3], m2_CPU);
        in(c16[i_3], m3_CPU: bitstring);
        let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
        let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
        if check(rms_without_mac_t2bitstring(rms_without_mac_QE_to_CPU), mkey, mac_QE_to_CPU) then
        let resOfMac: bool = true in
        let m_13: bitstring = bool2bitstring(resOfMac) in
        new r_13: enc_seed_1;
        let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
        out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        if (hash(hk, tcbi_t2bitstring(tcbi_QE)) = tcbh_QE) && (hash(hk, tdi_t2bitstring(tdi_QE)) = tdih_QE) then
        let m_14: bitstring = rms_t2bitstring(rms_QE) in
        new r_14: enc_seed_1;
        let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
        out(c15[i_4], m1_QE);
        in(c18[i_4], m2_QE: bitstring);
        let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
        if resOfMac_QE then
        let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
        let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
        let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
        let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
        let m_15: bitstring = quote_t2bitstring(quote_QE) in
        new r3_3: enc_seed;
        let m3_QE: bitstring = enc_r(m_15, pk2, r3_3) in
        out(c19[i_4], m3_QE)
      ))


Applying move all binders
  - Move random number generation r2_1
  - Move random number generation r3_1
  - Move assignment to m_8
  - Move random number generation session_key
yields

Game 11 is
      in(start, ());
      new r1: skeyseed;
      let spk1: spkey = spkgen(r1) in
      let ssk1: sskey = sskgen(r1) in
      new r2: keyseed;
      let pk2: pkey = pkgen(r2) in
      let sk2: skey = skgen(r2) in
      new r3_2: keyseed;
      new sym_key: key;
      new hk: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec(m1_Ch, sk2) in
        let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
        if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
        let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
        let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
        let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
        let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
        event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
        if x1_Ch = pkgen2_1(r3_2) then
        (
          new r2_1: enc_seed;
          let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
          new session_key: key;
          out(c23[i], m2)
        )
        else
          new r3_1: enc_seed;
          new session_key: key;
          let m_8: bitstring = key2bitstring(session_key) in
          let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_1) in
          out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        out(ch2[iH], hash(hk, x1_1))
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pkgen2_1(r3_2), rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        let tdi_TDXM: tdi_t = get_tdi in
        let rtyp_TDXM: rtyp_t = get_rtyp in
        let tdih_TDXM: hashoutput = hash(hk, tdi_t2bitstring(tdi_TDXM)) in
        let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, tdih_TDXM, rdata_TDXM) in
        new r_10: enc_seed_1;
        let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
        out(c7[i_2], m2_TDXM);
        in(c10[i_2], m3_TDXM: bitstring);
        let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
        let res4_TDXM: res_t = get_res in
        let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
        event TDXMsentTDR_8(smr_TDXM, tdi_TDXM);
        let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
        new r_11: enc_seed_1;
        let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
        out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        let csvn_CPU: csvn_t = get_csvn in
        let res1_CPU: res_t = get_res in
        let res2_CPU: res_t = get_res in
        let tcbi_CPU: tcbi_t = get_tcbi in
        let tcbh_CPU: hashoutput = hash(hk, tcbi_t2bitstring(tcbi_CPU)) in
        let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU) in
        let mac_CPU: macres_t = mac(rms_without_mac_t2bitstring(rms_without_mac_CPU), mkey) in
        let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, mac_CPU) in
        let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
        event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU, mac_CPU, tcbi_CPU);
        let m_12: bitstring = smr_t2bitstring(smr_CPU) in
        new r_12: enc_seed_1;
        let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
        out(c9[i_3], m2_CPU);
        in(c16[i_3], m3_CPU: bitstring);
        let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
        let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
        if check(rms_without_mac_t2bitstring(rms_without_mac_QE_to_CPU), mkey, mac_QE_to_CPU) then
        let resOfMac: bool = true in
        let m_13: bitstring = bool2bitstring(resOfMac) in
        new r_13: enc_seed_1;
        let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
        out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        if (hash(hk, tcbi_t2bitstring(tcbi_QE)) = tcbh_QE) && (hash(hk, tdi_t2bitstring(tdi_QE)) = tdih_QE) then
        let m_14: bitstring = rms_t2bitstring(rms_QE) in
        new r_14: enc_seed_1;
        let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
        out(c15[i_4], m1_QE);
        in(c18[i_4], m2_QE: bitstring);
        let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
        if resOfMac_QE then
        let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
        let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
        let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
        let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
        let m_15: bitstring = quote_t2bitstring(quote_QE) in
        new r3_3: enc_seed;
        let m3_QE: bitstring = enc_r(m_15, pk2, r3_3) in
        out(c19[i_4], m3_QE)
      ))


Proved event(QEaccepted2_14(x1, x2)) ==> event(TDXMsentTDR_8(x1, x2)) in game 11
Proved event(eve_QE(x1, x2, x3, x4, x5, x6, x7)) ==> event(CPUsentSMR(x1, x2, x3, x4, x5, x6, x7, x8, x9)) in game 11

Applying equivalence suf_cma(mac) [probability Pmac(time(context for game 11) + time, qCPU, qCPU, 0, length(rms_without_mac_t2bitstring))]
  - Equivalence suf_cma(mac) with variables: mkey -> k_1
yields

Game 12 is
      in(start, ());
      new r1: skeyseed;
      let spk1: spkey = spkgen(r1) in
      let ssk1: sskey = sskgen(r1) in
      new r2: keyseed;
      let pk2: pkey = pkgen(r2) in
      let sk2: skey = skgen(r2) in
      new r3_2: keyseed;
      new sym_key: key;
      new hk: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec(m1_Ch, sk2) in
        let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
        if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
        let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
        let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
        let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
        let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
        event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
        if x1_Ch = pkgen2_1(r3_2) then
        (
          new r2_1: enc_seed;
          let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
          new session_key: key;
          out(c23[i], m2)
        )
        else
          new r3_1: enc_seed;
          new session_key: key;
          let m_8: bitstring = key2bitstring(session_key) in
          let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_1) in
          out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        out(ch2[iH], hash(hk, x1_1))
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pkgen2_1(r3_2), rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        let tdi_TDXM: tdi_t = get_tdi in
        let rtyp_TDXM: rtyp_t = get_rtyp in
        let tdih_TDXM: hashoutput = hash(hk, tdi_t2bitstring(tdi_TDXM)) in
        let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, tdih_TDXM, rdata_TDXM) in
        new r_10: enc_seed_1;
        let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
        out(c7[i_2], m2_TDXM);
        in(c10[i_2], m3_TDXM: bitstring);
        let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
        let res4_TDXM: res_t = get_res in
        let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
        event TDXMsentTDR_8(smr_TDXM, tdi_TDXM);
        let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
        new r_11: enc_seed_1;
        let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
        out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        let csvn_CPU: csvn_t = get_csvn in
        let res1_CPU: res_t = get_res in
        let res2_CPU: res_t = get_res in
        let tcbi_CPU: tcbi_t = get_tcbi in
        let tcbh_CPU: hashoutput = hash(hk, tcbi_t2bitstring(tcbi_CPU)) in
        let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU) in
        let mac_CPU: macres_t = (let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in (let ma2: macres_t = mac'(x_2, mkey) in ma2)) in
        let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, mac_CPU) in
        let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
        event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU, mac_CPU, tcbi_CPU);
        let m_12: bitstring = smr_t2bitstring(smr_CPU) in
        new r_12: enc_seed_1;
        let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
        out(c9[i_3], m2_CPU);
        in(c16[i_3], m3_CPU: bitstring);
        let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
        let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
 {383}  if (let m_16: bitstring = rms_without_mac_t2bitstring(rms_without_mac_QE_to_CPU) in (let ma: macres_t = mac_QE_to_CPU in find u = ri <= qCPU suchthat defined(x_2[ri], ma2[ri]) && (m_16 = x_2[ri]) && (ma = ma2[ri]) then true else false)) then
        let resOfMac: bool = true in
        let m_13: bitstring = bool2bitstring(resOfMac) in
        new r_13: enc_seed_1;
        let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
        out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        if (hash(hk, tcbi_t2bitstring(tcbi_QE)) = tcbh_QE) && (hash(hk, tdi_t2bitstring(tdi_QE)) = tdih_QE) then
        let m_14: bitstring = rms_t2bitstring(rms_QE) in
        new r_14: enc_seed_1;
        let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
        out(c15[i_4], m1_QE);
        in(c18[i_4], m2_QE: bitstring);
        let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
        if resOfMac_QE then
        let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
        let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
        let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
        let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
        let m_15: bitstring = quote_t2bitstring(quote_QE) in
        new r3_3: enc_seed;
        let m3_QE: bitstring = enc_r(m_15, pk2, r3_3) in
        out(c19[i_4], m3_QE)
      ))


Applying expand
  - Expand if/find/let
    - Test at 383 always false
    - Test at 383 always true
yields

Game 13 is
      in(start, ());
      new r1: skeyseed;
      let spk1: spkey = spkgen(r1) in
      let ssk1: sskey = sskgen(r1) in
      new r2: keyseed;
      let pk2: pkey = pkgen(r2) in
      let sk2: skey = skgen(r2) in
      new r3_2: keyseed;
      new sym_key: key;
      new hk: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec(m1_Ch, sk2) in
        let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
        if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
        let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
        let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
        let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
        let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
        event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
        if x1_Ch = pkgen2_1(r3_2) then
        (
          new r2_1: enc_seed;
          let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
          new session_key: key;
          out(c23[i], m2)
        )
        else
          new r3_1: enc_seed;
          new session_key: key;
          let m_8: bitstring = key2bitstring(session_key) in
          let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_1) in
          out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        out(ch2[iH], hash(hk, x1_1))
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pkgen2_1(r3_2), rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        let tdi_TDXM: tdi_t = get_tdi in
        let rtyp_TDXM: rtyp_t = get_rtyp in
        let tdih_TDXM: hashoutput = hash(hk, tdi_t2bitstring(tdi_TDXM)) in
        let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, tdih_TDXM, rdata_TDXM) in
        new r_10: enc_seed_1;
        let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
        out(c7[i_2], m2_TDXM);
        in(c10[i_2], m3_TDXM: bitstring);
        let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
        let res4_TDXM: res_t = get_res in
        let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
        let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
        new r_11: enc_seed_1;
        let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
        out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        let csvn_CPU: csvn_t = get_csvn in
        let res1_CPU: res_t = get_res in
        let res2_CPU: res_t = get_res in
        let tcbi_CPU: tcbi_t = get_tcbi in
        let tcbh_CPU: hashoutput = hash(hk, tcbi_t2bitstring(tcbi_CPU)) in
        let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU) in
        let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
        let ma2: macres_t = mac'(x_2, mkey) in
        let mac_CPU: macres_t = ma2 in
        let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, mac_CPU) in
        let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
        event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU, mac_CPU, tcbi_CPU);
        let m_12: bitstring = smr_t2bitstring(smr_CPU) in
        new r_12: enc_seed_1;
        let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
        out(c9[i_3], m2_CPU);
        in(c16[i_3], m3_CPU: bitstring);
        let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
        let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
        let m_16: bitstring = rms_without_mac_t2bitstring(rms_without_mac_QE_to_CPU) in
        let ma: macres_t = mac_QE_to_CPU in
        find u = ri <= qCPU suchthat defined(x_2[ri], ma2[ri]) && (m_16 = x_2[ri]) && (ma = ma2[ri]) then
        let resOfMac: bool = true in
        let m_13: bitstring = bool2bitstring(resOfMac) in
        new r_13: enc_seed_1;
        let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
        out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        if (hash(hk, tcbi_t2bitstring(tcbi_QE)) = tcbh_QE) && (hash(hk, tdi_t2bitstring(tdi_QE)) = tdih_QE) then
        let m_14: bitstring = rms_t2bitstring(rms_QE) in
        new r_14: enc_seed_1;
        let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
        out(c15[i_4], m1_QE);
        in(c18[i_4], m2_QE: bitstring);
        let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
        if resOfMac_QE then
        let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
        let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
        let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
        let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
        let m_15: bitstring = quote_t2bitstring(quote_QE) in
        new r3_3: enc_seed;
        let m3_QE: bitstring = enc_r(m_15, pk2, r3_3) in
        out(c19[i_4], m3_QE)
      ))


Applying remove assignments of findcond
  - Remove assignments on mac_CPU (definition removed, all usages removed)
  - Remove assignments on ma (definition removed, all usages removed)
yields

Game 14 is
      in(start, ());
      new r1: skeyseed;
      let spk1: spkey = spkgen(r1) in
      let ssk1: sskey = sskgen(r1) in
      new r2: keyseed;
      let pk2: pkey = pkgen(r2) in
      let sk2: skey = skgen(r2) in
      new r3_2: keyseed;
      new sym_key: key;
      new hk: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec(m1_Ch, sk2) in
        let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
        if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
        let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
        let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
        let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
        let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
        event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
        if x1_Ch = pkgen2_1(r3_2) then
        (
          new r2_1: enc_seed;
          let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
          new session_key: key;
          out(c23[i], m2)
        )
        else
          new r3_1: enc_seed;
          new session_key: key;
          let m_8: bitstring = key2bitstring(session_key) in
          let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_1) in
          out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        out(ch2[iH], hash(hk, x1_1))
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pkgen2_1(r3_2), rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        let tdi_TDXM: tdi_t = get_tdi in
        let rtyp_TDXM: rtyp_t = get_rtyp in
        let tdih_TDXM: hashoutput = hash(hk, tdi_t2bitstring(tdi_TDXM)) in
        let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, tdih_TDXM, rdata_TDXM) in
        new r_10: enc_seed_1;
        let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
        out(c7[i_2], m2_TDXM);
        in(c10[i_2], m3_TDXM: bitstring);
        let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
        let res4_TDXM: res_t = get_res in
        let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
        let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
        new r_11: enc_seed_1;
        let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
        out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        let csvn_CPU: csvn_t = get_csvn in
        let res1_CPU: res_t = get_res in
        let res2_CPU: res_t = get_res in
        let tcbi_CPU: tcbi_t = get_tcbi in
        let tcbh_CPU: hashoutput = hash(hk, tcbi_t2bitstring(tcbi_CPU)) in
        let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU) in
        let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
        let ma2: macres_t = mac'(x_2, mkey) in
        let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
        let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
        event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
        let m_12: bitstring = smr_t2bitstring(smr_CPU) in
        new r_12: enc_seed_1;
        let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
        out(c9[i_3], m2_CPU);
        in(c16[i_3], m3_CPU: bitstring);
        let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
        let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
        let m_16: bitstring = rms_without_mac_t2bitstring(rms_without_mac_QE_to_CPU) in
 {376}  find u = ri <= qCPU suchthat defined(x_2[ri], ma2[ri]) && {379}((m_16 = x_2[ri]) && (mac_QE_to_CPU = ma2[ri])) then
        let resOfMac: bool = true in
        let m_13: bitstring = bool2bitstring(resOfMac) in
        new r_13: enc_seed_1;
        let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
        out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        if (hash(hk, tcbi_t2bitstring(tcbi_QE)) = tcbh_QE) && (hash(hk, tdi_t2bitstring(tdi_QE)) = tdih_QE) then
        let m_14: bitstring = rms_t2bitstring(rms_QE) in
        new r_14: enc_seed_1;
        let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
        out(c15[i_4], m1_QE);
        in(c18[i_4], m2_QE: bitstring);
        let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
        if resOfMac_QE then
        let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
        let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
        let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
        let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
        let m_15: bitstring = quote_t2bitstring(quote_QE) in
        new r3_3: enc_seed;
        let m3_QE: bitstring = enc_r(m_15, pk2, r3_3) in
        out(c19[i_4], m3_QE)
      ))


Applying simplify
  - Simplification pass
    - Replaced ((m_16 = x_2[ri]) && (mac_QE_to_CPU = ma2[ri])) with ((rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri])) at 379
    - Replaced defined condition x_2[ri], ma2[ri] with ma2[ri], rms_without_mac_CPU[ri] in find at 376
yields

Game 15 is
      in(start, ());
      new r1: skeyseed;
      let spk1: spkey = spkgen(r1) in
      let ssk1: sskey = sskgen(r1) in
      new r2: keyseed;
      let pk2: pkey = pkgen(r2) in
      let sk2: skey = skgen(r2) in
      new r3_2: keyseed;
      new sym_key: key;
      new hk: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec(m1_Ch, sk2) in
        let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
        if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
        let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
        let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
        let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
        let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
        event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
        if x1_Ch = pkgen2_1(r3_2) then
        (
          new r2_1: enc_seed;
          let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
          new session_key: key;
          out(c23[i], m2)
        )
        else
          new r3_1: enc_seed;
          new session_key: key;
          let m_8: bitstring = key2bitstring(session_key) in
          let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_1) in
          out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        out(ch2[iH], hash(hk, x1_1))
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pkgen2_1(r3_2), rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        let tdi_TDXM: tdi_t = get_tdi in
        let rtyp_TDXM: rtyp_t = get_rtyp in
        let tdih_TDXM: hashoutput = hash(hk, tdi_t2bitstring(tdi_TDXM)) in
        let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, tdih_TDXM, rdata_TDXM) in
        new r_10: enc_seed_1;
        let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
        out(c7[i_2], m2_TDXM);
        in(c10[i_2], m3_TDXM: bitstring);
        let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
        let res4_TDXM: res_t = get_res in
        let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
        let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
        new r_11: enc_seed_1;
        let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
        out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        let csvn_CPU: csvn_t = get_csvn in
        let res1_CPU: res_t = get_res in
        let res2_CPU: res_t = get_res in
        let tcbi_CPU: tcbi_t = get_tcbi in
        let tcbh_CPU: hashoutput = hash(hk, tcbi_t2bitstring(tcbi_CPU)) in
        let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU) in
        let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
        let ma2: macres_t = mac'(x_2, mkey) in
        let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
        let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
        event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
        let m_12: bitstring = smr_t2bitstring(smr_CPU) in
        new r_12: enc_seed_1;
        let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
        out(c9[i_3], m2_CPU);
        in(c16[i_3], m3_CPU: bitstring);
        let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
        let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
        let m_16: bitstring = rms_without_mac_t2bitstring(rms_without_mac_QE_to_CPU) in
        find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
        let resOfMac: bool = true in
        let m_13: bitstring = bool2bitstring(resOfMac) in
        new r_13: enc_seed_1;
        let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
        out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        if (hash(hk, tcbi_t2bitstring(tcbi_QE)) = tcbh_QE) && (hash(hk, tdi_t2bitstring(tdi_QE)) = tdih_QE) then
        let m_14: bitstring = rms_t2bitstring(rms_QE) in
        new r_14: enc_seed_1;
        let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
        out(c15[i_4], m1_QE);
        in(c18[i_4], m2_QE: bitstring);
        let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
        if resOfMac_QE then
        let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
        let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
        let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
        let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
        let m_15: bitstring = quote_t2bitstring(quote_QE) in
        new r3_3: enc_seed;
        let m3_QE: bitstring = enc_r(m_15, pk2, r3_3) in
        out(c19[i_4], m3_QE)
      ))


Applying move all binders
  - Move assignment to m_16
yields

Game 16 is
      in(start, ());
      new r1: skeyseed;
      let spk1: spkey = spkgen(r1) in
      let ssk1: sskey = sskgen(r1) in
      new r2: keyseed;
      let pk2: pkey = pkgen(r2) in
      let sk2: skey = skgen(r2) in
      new r3_2: keyseed;
      new sym_key: key;
      new hk: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec(m1_Ch, sk2) in
        let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
        if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
        let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
        let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
        let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
        let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
        event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
        if x1_Ch = pkgen2_1(r3_2) then
        (
          new r2_1: enc_seed;
          let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
          new session_key: key;
          out(c23[i], m2)
        )
        else
          new r3_1: enc_seed;
          new session_key: key;
          let m_8: bitstring = key2bitstring(session_key) in
          let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_1) in
          out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        out(ch2[iH], hash(hk, x1_1))
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pkgen2_1(r3_2), rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        let tdi_TDXM: tdi_t = get_tdi in
        let rtyp_TDXM: rtyp_t = get_rtyp in
        let tdih_TDXM: hashoutput = hash(hk, tdi_t2bitstring(tdi_TDXM)) in
        let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, tdih_TDXM, rdata_TDXM) in
        new r_10: enc_seed_1;
        let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
        out(c7[i_2], m2_TDXM);
        in(c10[i_2], m3_TDXM: bitstring);
        let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
        let res4_TDXM: res_t = get_res in
        let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
        let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
        new r_11: enc_seed_1;
        let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
        out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        let csvn_CPU: csvn_t = get_csvn in
        let res1_CPU: res_t = get_res in
        let res2_CPU: res_t = get_res in
        let tcbi_CPU: tcbi_t = get_tcbi in
        let tcbh_CPU: hashoutput = hash(hk, tcbi_t2bitstring(tcbi_CPU)) in
        let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU) in
        let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
        let ma2: macres_t = mac'(x_2, mkey) in
        let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
        let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
        event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
        let m_12: bitstring = smr_t2bitstring(smr_CPU) in
        new r_12: enc_seed_1;
        let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
        out(c9[i_3], m2_CPU);
        in(c16[i_3], m3_CPU: bitstring);
        let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
        let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
        find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
        let resOfMac: bool = true in
        let m_13: bitstring = bool2bitstring(resOfMac) in
        new r_13: enc_seed_1;
        let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
        out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        if (hash(hk, tcbi_t2bitstring(tcbi_QE)) = tcbh_QE) && (hash(hk, tdi_t2bitstring(tdi_QE)) = tdih_QE) then
        let m_14: bitstring = rms_t2bitstring(rms_QE) in
        new r_14: enc_seed_1;
        let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
        out(c15[i_4], m1_QE);
        in(c18[i_4], m2_QE: bitstring);
        let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
        if resOfMac_QE then
        let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
        let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
        let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
        let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
        let m_15: bitstring = quote_t2bitstring(quote_QE) in
        new r3_3: enc_seed;
        let m3_QE: bitstring = enc_r(m_15, pk2, r3_3) in
        out(c19[i_4], m3_QE)
      ))


Applying equivalence rom(hash) [probability 2 * qQE / |hashoutput|]
  - Equivalence rom(hash) with variables: hk -> hk_1
yields

Game 17 is
      in(start, ());
      new r1: skeyseed;
      let spk1: spkey = spkgen(r1) in
      let ssk1: sskey = sskgen(r1) in
      new r2: keyseed;
      let pk2: pkey = pkgen(r2) in
      let sk2: skey = skgen(r2) in
      new r3_2: keyseed;
      new sym_key: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec(m1_Ch, sk2) in
        let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
        if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
        let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
        let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
        let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
        let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
        event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
        if x1_Ch = pkgen2_1(r3_2) then
        (
          new r2_1: enc_seed;
          let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
          new session_key: key;
          out(c23[i], m2)
        )
        else
          new r3_1: enc_seed;
          new session_key: key;
          let m_8: bitstring = key2bitstring(session_key) in
          let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_1) in
          out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        out(ch2[iH], (let x_O: bitstring = x1_1 in find [unique] u_15 = ri_15 <= qH suchthat defined(x_O[ri_15], r_16[ri_15]) && (x_O = x_O[ri_15]) then r_16[u_15] orfind u_14 = ri_14 <= qTDXM suchthat defined(x_O_1[ri_14], r_17[ri_14]) && (x_O = x_O_1[ri_14]) then r_17[u_14] orfind u_13 = ri_13 <= qCPU suchthat defined(x_O_2[ri_13], r_18[ri_13]) && (x_O = x_O_2[ri_13]) then r_18[u_13] else new r_16: hashoutput; r_16))
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pkgen2_1(r3_2), rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        let tdi_TDXM: tdi_t = get_tdi in
        let rtyp_TDXM: rtyp_t = get_rtyp in
        let tdih_TDXM: hashoutput = (let x_O_1: bitstring = tdi_t2bitstring(tdi_TDXM) in find [unique] u_12 = ri_12 <= qH suchthat defined(x_O[ri_12], r_16[ri_12]) && (x_O_1 = x_O[ri_12]) then r_16[u_12] orfind u_11 = ri_11 <= qTDXM suchthat defined(x_O_1[ri_11], r_17[ri_11]) && {244}(x_O_1 = x_O_1[ri_11]) then r_17[u_11] orfind u_10 = ri_10 <= qCPU suchthat defined(x_O_2[ri_10], r_18[ri_10]) && (x_O_1 = x_O_2[ri_10]) then r_18[u_10] else new r_17: hashoutput; r_17) in
        let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, tdih_TDXM, rdata_TDXM) in
        new r_10: enc_seed_1;
        let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
        out(c7[i_2], m2_TDXM);
        in(c10[i_2], m3_TDXM: bitstring);
        let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
        let res4_TDXM: res_t = get_res in
        let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
        let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
        new r_11: enc_seed_1;
        let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
        out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        let csvn_CPU: csvn_t = get_csvn in
        let res1_CPU: res_t = get_res in
        let res2_CPU: res_t = get_res in
        let tcbi_CPU: tcbi_t = get_tcbi in
        let tcbh_CPU: hashoutput = (let x_O_2: bitstring = tcbi_t2bitstring(tcbi_CPU) in find [unique] u_9 = ri_9 <= qH suchthat defined(x_O[ri_9], r_16[ri_9]) && (x_O_2 = x_O[ri_9]) then r_16[u_9] orfind u_8 = ri_8 <= qTDXM suchthat defined(x_O_1[ri_8], r_17[ri_8]) && (x_O_2 = x_O_1[ri_8]) then r_17[u_8] orfind u_7 = ri_7 <= qCPU suchthat defined(x_O_2[ri_7], r_18[ri_7]) && {374}(x_O_2 = x_O_2[ri_7]) then r_18[u_7] else new r_18: hashoutput; r_18) in
        let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU) in
        let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
        let ma2: macres_t = mac'(x_2, mkey) in
        let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
        let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
        event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
        let m_12: bitstring = smr_t2bitstring(smr_CPU) in
        new r_12: enc_seed_1;
        let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
        out(c9[i_3], m2_CPU);
        in(c16[i_3], m3_CPU: bitstring);
        let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
        let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
        find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
        let resOfMac: bool = true in
        let m_13: bitstring = bool2bitstring(resOfMac) in
        new r_13: enc_seed_1;
        let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
        out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        if (let x_Oeq_1: bitstring = tcbi_t2bitstring(tcbi_QE) in (let X_Oeq_1: hashoutput = tcbh_QE in find [unique] u_3 = ri_3 <= qH suchthat defined(x_O[ri_3], r_16[ri_3]) && (x_Oeq_1 = x_O[ri_3]) then (X_Oeq_1 = r_16[u_3]) orfind u_2 = ri_2 <= qTDXM suchthat defined(x_O_1[ri_2], r_17[ri_2]) && (x_Oeq_1 = x_O_1[ri_2]) then (X_Oeq_1 = r_17[u_2]) orfind u_1 = ri_1 <= qCPU suchthat defined(x_O_2[ri_1], r_18[ri_1]) && (x_Oeq_1 = x_O_2[ri_1]) then (X_Oeq_1 = r_18[u_1]) else false)) && (let x_Oeq: bitstring = tdi_t2bitstring(tdi_QE) in (let X_Oeq: hashoutput = tdih_QE in find [unique] u_6 = ri_6 <= qH suchthat defined(x_O[ri_6], r_16[ri_6]) && (x_Oeq = x_O[ri_6]) then (X_Oeq = r_16[u_6]) orfind u_5 = ri_5 <= qTDXM suchthat defined(x_O_1[ri_5], r_17[ri_5]) && (x_Oeq = x_O_1[ri_5]) then (X_Oeq = r_17[u_5]) orfind u_4 = ri_4 <= qCPU suchthat defined(x_O_2[ri_4], r_18[ri_4]) && (x_Oeq = x_O_2[ri_4]) then (X_Oeq = r_18[u_4]) else false)) then
        let m_14: bitstring = rms_t2bitstring(rms_QE) in
        new r_14: enc_seed_1;
        let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
        out(c15[i_4], m1_QE);
        in(c18[i_4], m2_QE: bitstring);
        let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
        if resOfMac_QE then
        let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
        let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
        let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
        let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
        let m_15: bitstring = quote_t2bitstring(quote_QE) in
        new r3_3: enc_seed;
        let m3_QE: bitstring = enc_r(m_15, pk2, r3_3) in
        out(c19[i_4], m3_QE)
      ))


Applying simplify (non-expanded game)
  - Simplification pass
    - Replaced (x_O_1 = x_O_1[ri_11]) with true at 244
    - Replaced (x_O_2 = x_O_2[ri_7]) with true at 374
yields

Game 18 is
      in(start, ());
      new r1: skeyseed;
      let spk1: spkey = spkgen(r1) in
      let ssk1: sskey = sskgen(r1) in
      new r2: keyseed;
      let pk2: pkey = pkgen(r2) in
      let sk2: skey = skgen(r2) in
      new r3_2: keyseed;
      new sym_key: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec(m1_Ch, sk2) in
        let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
        if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
        let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
        let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
        let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
        let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
        event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
        if x1_Ch = pkgen2_1(r3_2) then
        (
          new r2_1: enc_seed;
          let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
          new session_key: key;
          out(c23[i], m2)
        )
        else
          new r3_1: enc_seed;
          new session_key: key;
          let m_8: bitstring = key2bitstring(session_key) in
          let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_1) in
          out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        out(ch2[iH], (let x_O: bitstring = x1_1 in find [unique] u_15 = ri_15 <= qH suchthat defined(x_O[ri_15], r_16[ri_15]) && (x_O = x_O[ri_15]) then r_16[u_15] orfind u_14 = ri_14 <= qTDXM suchthat defined(x_O_1[ri_14], r_17[ri_14]) && (x_O = x_O_1[ri_14]) then r_17[u_14] orfind u_13 = ri_13 <= qCPU suchthat defined(x_O_2[ri_13], r_18[ri_13]) && (x_O = x_O_2[ri_13]) then r_18[u_13] else new r_16: hashoutput; r_16))
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pkgen2_1(r3_2), rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        let tdi_TDXM: tdi_t = get_tdi in
        let rtyp_TDXM: rtyp_t = get_rtyp in
        let tdih_TDXM: hashoutput = (let x_O_1: bitstring = tdi_t2bitstring(tdi_TDXM) in {231}find [unique] u_12 = ri_12 <= qH suchthat defined(x_O[ri_12], r_16[ri_12]) && (x_O_1 = x_O[ri_12]) then r_16[u_12] orfind u_11 = ri_11 <= qTDXM suchthat defined(x_O_1[ri_11], r_17[ri_11]) then r_17[u_11] orfind u_10 = ri_10 <= qCPU suchthat defined(x_O_2[ri_10], r_18[ri_10]) && (x_O_1 = x_O_2[ri_10]) then r_18[u_10] else new r_17: hashoutput; r_17) in
        let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, tdih_TDXM, rdata_TDXM) in
        new r_10: enc_seed_1;
        let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
        out(c7[i_2], m2_TDXM);
        in(c10[i_2], m3_TDXM: bitstring);
        let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
        let res4_TDXM: res_t = get_res in
        let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
        let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
        new r_11: enc_seed_1;
        let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
        out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        let csvn_CPU: csvn_t = get_csvn in
        let res1_CPU: res_t = get_res in
        let res2_CPU: res_t = get_res in
        let tcbi_CPU: tcbi_t = get_tcbi in
        let tcbh_CPU: hashoutput = (let x_O_2: bitstring = tcbi_t2bitstring(tcbi_CPU) in {347}find [unique] u_9 = ri_9 <= qH suchthat defined(x_O[ri_9], r_16[ri_9]) && (x_O_2 = x_O[ri_9]) then r_16[u_9] orfind u_8 = ri_8 <= qTDXM suchthat defined(x_O_1[ri_8], r_17[ri_8]) && (x_O_2 = x_O_1[ri_8]) then r_17[u_8] orfind u_7 = ri_7 <= qCPU suchthat defined(x_O_2[ri_7], r_18[ri_7]) then r_18[u_7] else new r_18: hashoutput; r_18) in
        let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU) in
        let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
        let ma2: macres_t = mac'(x_2, mkey) in
        let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
        let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
        event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
        let m_12: bitstring = smr_t2bitstring(smr_CPU) in
        new r_12: enc_seed_1;
        let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
        out(c9[i_3], m2_CPU);
        in(c16[i_3], m3_CPU: bitstring);
        let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
        let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
        find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
        let resOfMac: bool = true in
        let m_13: bitstring = bool2bitstring(resOfMac) in
        new r_13: enc_seed_1;
        let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
        out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
 {529}  if (let x_Oeq_1: bitstring = tcbi_t2bitstring(tcbi_QE) in (let X_Oeq_1: hashoutput = tcbh_QE in find [unique] u_3 = ri_3 <= qH suchthat defined(x_O[ri_3], r_16[ri_3]) && (x_Oeq_1 = x_O[ri_3]) then (X_Oeq_1 = r_16[u_3]) orfind u_2 = ri_2 <= qTDXM suchthat defined(x_O_1[ri_2], r_17[ri_2]) && (x_Oeq_1 = x_O_1[ri_2]) then (X_Oeq_1 = r_17[u_2]) orfind u_1 = ri_1 <= qCPU suchthat defined(x_O_2[ri_1], r_18[ri_1]) && (x_Oeq_1 = x_O_2[ri_1]) then (X_Oeq_1 = r_18[u_1]) else false)) && (let x_Oeq: bitstring = tdi_t2bitstring(tdi_QE) in (let X_Oeq: hashoutput = tdih_QE in {586}find [unique] u_6 = ri_6 <= qH suchthat defined(x_O[ri_6], r_16[ri_6]) && (x_Oeq = x_O[ri_6]) then (X_Oeq = r_16[u_6]) orfind u_5 = ri_5 <= qTDXM suchthat defined(x_O_1[ri_5], r_17[ri_5]) && (x_Oeq = x_O_1[ri_5]) then (X_Oeq = r_17[u_5]) orfind u_4 = ri_4 <= qCPU suchthat defined(x_O_2[ri_4], r_18[ri_4]) && (x_Oeq = x_O_2[ri_4]) then (X_Oeq = r_18[u_4]) else false)) then
        let m_14: bitstring = rms_t2bitstring(rms_QE) in
        new r_14: enc_seed_1;
        let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
        out(c15[i_4], m1_QE);
        in(c18[i_4], m2_QE: bitstring);
        let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
        if resOfMac_QE then
        let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
        let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
        let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
        let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
        let m_15: bitstring = quote_t2bitstring(quote_QE) in
        new r3_3: enc_seed;
        let m3_QE: bitstring = enc_r(m_15, pk2, r3_3) in
        out(c19[i_4], m3_QE)
      ))


Applying expand
  - Expand if/find/let
    - Test at 529 always false
    - Test at 529 always false
    - Replaced defined condition x_O_2[ri_4], r_18[ri_4] with r_18[ri_4], x_O_2[ri_4], r_18[u_1], X_Oeq_1 in find at 586
    - Replaced defined condition x_O_1[ri_5], r_17[ri_5] with r_17[ri_5], x_O_1[ri_5], r_18[u_1], X_Oeq_1 in find at 586
    - Replaced defined condition x_O[ri_6], r_16[ri_6] with r_16[ri_6], x_O[ri_6], r_18[u_1], X_Oeq_1 in find at 586
    - Test at 529 always false
    - Replaced defined condition x_O_2[ri_4], r_18[ri_4] with r_18[ri_4], x_O_2[ri_4], r_17[u_2], X_Oeq_1 in find at 586
    - Replaced defined condition x_O_1[ri_5], r_17[ri_5] with r_17[ri_5], x_O_1[ri_5], r_17[u_2], X_Oeq_1 in find at 586
    - Replaced defined condition x_O[ri_6], r_16[ri_6] with r_16[ri_6], x_O[ri_6], r_17[u_2], X_Oeq_1 in find at 586
    - Test at 529 always false
    - Replaced defined condition x_O_2[ri_4], r_18[ri_4] with r_18[ri_4], x_O_2[ri_4], r_16[u_3], X_Oeq_1 in find at 586
    - Replaced defined condition x_O_1[ri_5], r_17[ri_5] with r_17[ri_5], x_O_1[ri_5], r_16[u_3], X_Oeq_1 in find at 586
    - Replaced defined condition x_O[ri_6], r_16[ri_6] with r_16[ri_6], x_O[ri_6], r_16[u_3], X_Oeq_1 in find at 586
    - Replaced defined condition x_O_2[ri_7], r_18[ri_7] with r_18[ri_7] in find at 347
    - Replaced defined condition x_O_1[ri_11], r_17[ri_11] with r_17[ri_11] in find at 231
yields

Game 19 is
      in(start, ());
      new r1: skeyseed;
      let spk1: spkey = spkgen(r1) in
      let ssk1: sskey = sskgen(r1) in
      new r2: keyseed;
      let pk2: pkey = pkgen(r2) in
      let sk2: skey = skgen(r2) in
      new r3_2: keyseed;
      new sym_key: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec(m1_Ch, sk2) in
        let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
        if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
        let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
        let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
        let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
        let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
        event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
        if x1_Ch = pkgen2_1(r3_2) then
        (
          new r2_1: enc_seed;
          let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
          new session_key: key;
          out(c23[i], m2)
        )
        else
          new r3_1: enc_seed;
          new session_key: key;
          let m_8: bitstring = key2bitstring(session_key) in
          let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_1) in
          out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        let x_O: bitstring = x1_1 in
        find [unique] u_15 = ri_15 <= qH suchthat defined(x_O[ri_15], r_16[ri_15]) && (x_O = x_O[ri_15]) then
          out(ch2[iH], r_16[u_15])
        orfind u_14 = ri_14 <= qTDXM suchthat defined(x_O_1[ri_14], r_17[ri_14]) && (x_O = x_O_1[ri_14]) then
          out(ch2[iH], r_17[u_14])
        orfind u_13 = ri_13 <= qCPU suchthat defined(x_O_2[ri_13], r_18[ri_13]) && (x_O = x_O_2[ri_13]) then
          out(ch2[iH], r_18[u_13])
        else
          new r_16: hashoutput;
          out(ch2[iH], r_16)
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pkgen2_1(r3_2), rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        let tdi_TDXM: tdi_t = get_tdi in
        let rtyp_TDXM: rtyp_t = get_rtyp in
        let x_O_1: bitstring = tdi_t2bitstring(tdi_TDXM) in
        find [unique] u_12 = ri_12 <= qH suchthat defined(x_O[ri_12], r_16[ri_12]) && (x_O_1 = x_O[ri_12]) then
        (
          let tdih_TDXM: hashoutput = r_16[u_12] in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, tdih_TDXM, rdata_TDXM) in
          new r_10: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_11: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_11 = ri_11 <= qTDXM suchthat defined(r_17[ri_11]) then
        (
          let tdih_TDXM: hashoutput = r_17[u_11] in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, tdih_TDXM, rdata_TDXM) in
          new r_10: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_11: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_10 = ri_10 <= qCPU suchthat defined(x_O_2[ri_10], r_18[ri_10]) && (x_O_1 = x_O_2[ri_10]) then
        (
          let tdih_TDXM: hashoutput = r_18[u_10] in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, tdih_TDXM, rdata_TDXM) in
          new r_10: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_11: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
          out(c11[i_2], m4_TDXM)
        )
        else
          new r_17: hashoutput;
          let tdih_TDXM: hashoutput = r_17 in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, tdih_TDXM, rdata_TDXM) in
          new r_10: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_11: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
          out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        let csvn_CPU: csvn_t = get_csvn in
        let res1_CPU: res_t = get_res in
        let res2_CPU: res_t = get_res in
        let tcbi_CPU: tcbi_t = get_tcbi in
        let x_O_2: bitstring = tcbi_t2bitstring(tcbi_CPU) in
        find [unique] u_9 = ri_9 <= qH suchthat defined(x_O[ri_9], r_16[ri_9]) && (x_O_2 = x_O[ri_9]) then
        (
          let tcbh_CPU: hashoutput = r_16[u_9] in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_12: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_13: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_8 = ri_8 <= qTDXM suchthat defined(x_O_1[ri_8], r_17[ri_8]) && (x_O_2 = x_O_1[ri_8]) then
        (
          let tcbh_CPU: hashoutput = r_17[u_8] in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_12: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_13: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_7 = ri_7 <= qCPU suchthat defined(r_18[ri_7]) then
        (
          let tcbh_CPU: hashoutput = r_18[u_7] in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_12: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_13: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
          out(c17[i_3], m4_CPU)
        )
        else
          new r_18: hashoutput;
          let tcbh_CPU: hashoutput = r_18 in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_12: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_13: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
          out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        let x_Oeq_1: bitstring = tcbi_t2bitstring(tcbi_QE) in
        let X_Oeq_1: hashoutput = tcbh_QE in
        find [unique] u_3 = ri_3 <= qH suchthat defined(x_O[ri_3], r_16[ri_3]) && (x_Oeq_1 = x_O[ri_3]) then
        (
          let x_Oeq: bitstring = tdi_t2bitstring(tdi_QE) in
          let X_Oeq: hashoutput = tdih_QE in
          find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x_O[ri_6], r_16[u_3], X_Oeq_1) && (x_Oeq = x_O[ri_6]) then
          (
            if (X_Oeq_1 = r_16[u_3]) && (X_Oeq = r_16[u_6]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_14: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_3: enc_seed;
            let m3_QE: bitstring = enc_r(m_15, pk2, r3_3) in
            out(c19[i_4], m3_QE)
          )
          orfind u_5 = ri_5 <= qTDXM suchthat defined(r_17[ri_5], x_O_1[ri_5], r_16[u_3], X_Oeq_1) && (x_Oeq = x_O_1[ri_5]) then
          (
            if (X_Oeq_1 = r_16[u_3]) && (X_Oeq = r_17[u_5]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_14: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_3: enc_seed;
            let m3_QE: bitstring = enc_r(m_15, pk2, r3_3) in
            out(c19[i_4], m3_QE)
          )
          orfind u_4 = ri_4 <= qCPU suchthat defined(r_18[ri_4], x_O_2[ri_4], r_16[u_3], X_Oeq_1) && (x_Oeq = x_O_2[ri_4]) then
          (
            if (X_Oeq_1 = r_16[u_3]) && (X_Oeq = r_18[u_4]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_14: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_3: enc_seed;
            let m3_QE: bitstring = enc_r(m_15, pk2, r3_3) in
            out(c19[i_4], m3_QE)
          )
        )
        orfind u_2 = ri_2 <= qTDXM suchthat defined(x_O_1[ri_2], r_17[ri_2]) && (x_Oeq_1 = x_O_1[ri_2]) then
        (
          let x_Oeq: bitstring = tdi_t2bitstring(tdi_QE) in
          let X_Oeq: hashoutput = tdih_QE in
          find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x_O[ri_6], r_17[u_2], X_Oeq_1) && (x_Oeq = x_O[ri_6]) then
          (
            if (X_Oeq_1 = r_17[u_2]) && (X_Oeq = r_16[u_6]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_14: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_3: enc_seed;
            let m3_QE: bitstring = enc_r(m_15, pk2, r3_3) in
            out(c19[i_4], m3_QE)
          )
          orfind u_5 = ri_5 <= qTDXM suchthat defined(r_17[ri_5], x_O_1[ri_5], r_17[u_2], X_Oeq_1) && (x_Oeq = x_O_1[ri_5]) then
          (
            if (X_Oeq_1 = r_17[u_2]) && (X_Oeq = r_17[u_5]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_14: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_3: enc_seed;
            let m3_QE: bitstring = enc_r(m_15, pk2, r3_3) in
            out(c19[i_4], m3_QE)
          )
          orfind u_4 = ri_4 <= qCPU suchthat defined(r_18[ri_4], x_O_2[ri_4], r_17[u_2], X_Oeq_1) && (x_Oeq = x_O_2[ri_4]) then
          (
            if (X_Oeq_1 = r_17[u_2]) && (X_Oeq = r_18[u_4]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_14: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_3: enc_seed;
            let m3_QE: bitstring = enc_r(m_15, pk2, r3_3) in
            out(c19[i_4], m3_QE)
          )
        )
        orfind u_1 = ri_1 <= qCPU suchthat defined(x_O_2[ri_1], r_18[ri_1]) && (x_Oeq_1 = x_O_2[ri_1]) then
        (
          let x_Oeq: bitstring = tdi_t2bitstring(tdi_QE) in
          let X_Oeq: hashoutput = tdih_QE in
          find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x_O[ri_6], r_18[u_1], X_Oeq_1) && (x_Oeq = x_O[ri_6]) then
          (
            if (X_Oeq_1 = r_18[u_1]) && (X_Oeq = r_16[u_6]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_14: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_3: enc_seed;
            let m3_QE: bitstring = enc_r(m_15, pk2, r3_3) in
            out(c19[i_4], m3_QE)
          )
          orfind u_5 = ri_5 <= qTDXM suchthat defined(r_17[ri_5], x_O_1[ri_5], r_18[u_1], X_Oeq_1) && (x_Oeq = x_O_1[ri_5]) then
          (
            if (X_Oeq_1 = r_18[u_1]) && (X_Oeq = r_17[u_5]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_14: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_3: enc_seed;
            let m3_QE: bitstring = enc_r(m_15, pk2, r3_3) in
            out(c19[i_4], m3_QE)
          )
          orfind u_4 = ri_4 <= qCPU suchthat defined(r_18[ri_4], x_O_2[ri_4], r_18[u_1], X_Oeq_1) && (x_Oeq = x_O_2[ri_4]) then
          (
            if (X_Oeq_1 = r_18[u_1]) && (X_Oeq = r_18[u_4]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_14: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_3: enc_seed;
            let m3_QE: bitstring = enc_r(m_15, pk2, r3_3) in
            out(c19[i_4], m3_QE)
          )
        )
      ))


Applying remove assignments of findcond
  - Remove assignments on X_Oeq_1 (definition removed, all usages removed)
  - Remove assignments on X_Oeq (definition removed, all usages removed)
  - Remove assignments on X_Oeq (definition removed, all usages removed)
  - Remove assignments on X_Oeq (definition removed, all usages removed)
  - Remove assignments on tcbh_CPU (definition removed, all usages removed)
  - Remove assignments on tcbh_CPU (definition removed, all usages removed)
  - Remove assignments on tcbh_CPU (definition removed, all usages removed)
  - Remove assignments on tcbh_CPU (definition removed, all usages removed)
  - Remove assignments on tdih_TDXM (definition removed, all usages removed)
  - Remove assignments on tdih_TDXM (definition removed, all usages removed)
  - Remove assignments on tdih_TDXM (definition removed, all usages removed)
  - Remove assignments on tdih_TDXM (definition removed, all usages removed)
  - Remove assignments on x_O (definition point kept, all usages removed)
yields

Game 20 is
      in(start, ());
      new r1: skeyseed;
      let spk1: spkey = spkgen(r1) in
      let ssk1: sskey = sskgen(r1) in
      new r2: keyseed;
      let pk2: pkey = pkgen(r2) in
      let sk2: skey = skgen(r2) in
      new r3_2: keyseed;
      new sym_key: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec(m1_Ch, sk2) in
        let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
        if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
        let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
        let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
        let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
        let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
        event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
        if x1_Ch = pkgen2_1(r3_2) then
        (
          new r2_1: enc_seed;
          let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
          new session_key: key;
          out(c23[i], m2)
        )
        else
          new r3_1: enc_seed;
          new session_key: key;
          let m_8: bitstring = key2bitstring(session_key) in
          let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_1) in
          out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        let x_O: bitstring = cst_bitstring in
 {134}  find [unique] u_15 = ri_15 <= qH suchthat defined(x1_1[ri_15], x_O[ri_15], r_16[ri_15]) && (x1_1 = x1_1[ri_15]) then
          out(ch2[iH], r_16[u_15])
        orfind u_14 = ri_14 <= qTDXM suchthat defined(x_O_1[ri_14], r_17[ri_14]) && (x1_1 = x_O_1[ri_14]) then
          out(ch2[iH], r_17[u_14])
        orfind u_13 = ri_13 <= qCPU suchthat defined(x_O_2[ri_13], r_18[ri_13]) && (x1_1 = x_O_2[ri_13]) then
          out(ch2[iH], r_18[u_13])
        else
          new r_16: hashoutput;
          out(ch2[iH], r_16)
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pkgen2_1(r3_2), rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        let tdi_TDXM: tdi_t = get_tdi in
        let rtyp_TDXM: rtyp_t = get_rtyp in
        let x_O_1: bitstring = tdi_t2bitstring(tdi_TDXM) in
 {240}  find [unique] u_12 = ri_12 <= qH suchthat defined(x1_1[ri_12], x_O[ri_12], r_16[ri_12]) && (x_O_1 = x1_1[ri_12]) then
        (
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_16[u_12], rdata_TDXM) in
          new r_10: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_11: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_11 = ri_11 <= qTDXM suchthat defined(r_17[ri_11]) then
        (
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17[u_11], rdata_TDXM) in
          new r_10: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_11: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_10 = ri_10 <= qCPU suchthat defined(x_O_2[ri_10], r_18[ri_10]) && (x_O_1 = x_O_2[ri_10]) then
        (
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_18[u_10], rdata_TDXM) in
          new r_10: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_11: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
          out(c11[i_2], m4_TDXM)
        )
        else
          new r_17: hashoutput;
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17, rdata_TDXM) in
          new r_10: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_11: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
          out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        let csvn_CPU: csvn_t = get_csvn in
        let res1_CPU: res_t = get_res in
        let res2_CPU: res_t = get_res in
        let tcbi_CPU: tcbi_t = get_tcbi in
        let x_O_2: bitstring = tcbi_t2bitstring(tcbi_CPU) in
 {530}  find [unique] u_9 = ri_9 <= qH suchthat defined(x1_1[ri_9], x_O[ri_9], r_16[ri_9]) && (x_O_2 = x1_1[ri_9]) then
        (
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_16[u_9], tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_16[u_9], tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_12: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_13: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_8 = ri_8 <= qTDXM suchthat defined(x_O_1[ri_8], r_17[ri_8]) && (x_O_2 = x_O_1[ri_8]) then
        (
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_17[u_8], tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_17[u_8], tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_12: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_13: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_7 = ri_7 <= qCPU suchthat defined(r_18[ri_7]) then
        (
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_18[u_7], tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_18[u_7], tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_12: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_13: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
          out(c17[i_3], m4_CPU)
        )
        else
          new r_18: hashoutput;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_18, tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_18, tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_12: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_13: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
          out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        let x_Oeq_1: bitstring = tcbi_t2bitstring(tcbi_QE) in
{1104}  find [unique] u_3 = ri_3 <= qH suchthat defined(x1_1[ri_3], x_O[ri_3], r_16[ri_3]) && (x_Oeq_1 = x1_1[ri_3]) then
        (
          let x_Oeq: bitstring = tdi_t2bitstring(tdi_QE) in
{1117}    find [unique] u_6 = ri_6 <= qH suchthat defined(x1_1[ri_6], x_O[ri_6], r_16[ri_6], r_16[u_3]) && (x_Oeq = x1_1[ri_6]) then
          (
            if (tcbh_QE = r_16[u_3]) && (tdih_QE = r_16[u_6]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_14: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_3: enc_seed;
            let m3_QE: bitstring = enc_r(m_15, pk2, r3_3) in
            out(c19[i_4], m3_QE)
          )
          orfind u_5 = ri_5 <= qTDXM suchthat defined(r_17[ri_5], x_O_1[ri_5], r_16[u_3]) && {1226}(x_Oeq = x_O_1[ri_5]) then
          (
            if (tcbh_QE = r_16[u_3]) && (tdih_QE = r_17[u_5]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_14: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_3: enc_seed;
            let m3_QE: bitstring = enc_r(m_15, pk2, r3_3) in
            out(c19[i_4], m3_QE)
          )
          orfind u_4 = ri_4 <= qCPU suchthat defined(r_18[ri_4], x_O_2[ri_4], r_16[u_3]) && (x_Oeq = x_O_2[ri_4]) then
          (
            if (tcbh_QE = r_16[u_3]) && (tdih_QE = r_18[u_4]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_14: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_3: enc_seed;
            let m3_QE: bitstring = enc_r(m_15, pk2, r3_3) in
            out(c19[i_4], m3_QE)
          )
        )
        orfind u_2 = ri_2 <= qTDXM suchthat defined(x_O_1[ri_2], r_17[ri_2]) && (x_Oeq_1 = x_O_1[ri_2]) then
        (
          let x_Oeq: bitstring = tdi_t2bitstring(tdi_QE) in
{1441}    find [unique] u_6 = ri_6 <= qH suchthat defined(x1_1[ri_6], x_O[ri_6], r_16[ri_6], r_17[u_2]) && (x_Oeq = x1_1[ri_6]) then
          (
            if (tcbh_QE = r_17[u_2]) && (tdih_QE = r_16[u_6]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_14: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_3: enc_seed;
            let m3_QE: bitstring = enc_r(m_15, pk2, r3_3) in
            out(c19[i_4], m3_QE)
          )
          orfind u_5 = ri_5 <= qTDXM suchthat defined(r_17[ri_5], x_O_1[ri_5], r_17[u_2]) && (x_Oeq = x_O_1[ri_5]) then
          (
            if (tcbh_QE = r_17[u_2]) && (tdih_QE = r_17[u_5]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_14: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_3: enc_seed;
            let m3_QE: bitstring = enc_r(m_15, pk2, r3_3) in
            out(c19[i_4], m3_QE)
          )
          orfind u_4 = ri_4 <= qCPU suchthat defined(r_18[ri_4], x_O_2[ri_4], r_17[u_2]) && (x_Oeq = x_O_2[ri_4]) then
          (
            if (tcbh_QE = r_17[u_2]) && (tdih_QE = r_18[u_4]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_14: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_3: enc_seed;
            let m3_QE: bitstring = enc_r(m_15, pk2, r3_3) in
            out(c19[i_4], m3_QE)
          )
        )
        orfind u_1 = ri_1 <= qCPU suchthat defined(x_O_2[ri_1], r_18[ri_1]) && {1756}(x_Oeq_1 = x_O_2[ri_1]) then
        (
          let x_Oeq: bitstring = tdi_t2bitstring(tdi_QE) in
{1765}    find [unique] u_6 = ri_6 <= qH suchthat defined(x1_1[ri_6], x_O[ri_6], r_16[ri_6], r_18[u_1]) && (x_Oeq = x1_1[ri_6]) then
          (
            if (tcbh_QE = r_18[u_1]) && (tdih_QE = r_16[u_6]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_14: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_3: enc_seed;
            let m3_QE: bitstring = enc_r(m_15, pk2, r3_3) in
            out(c19[i_4], m3_QE)
          )
          orfind u_5 = ri_5 <= qTDXM suchthat defined(r_17[ri_5], x_O_1[ri_5], r_18[u_1]) && {1874}(x_Oeq = x_O_1[ri_5]) then
          (
            if (tcbh_QE = r_18[u_1]) && (tdih_QE = r_17[u_5]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_14: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_3: enc_seed;
            let m3_QE: bitstring = enc_r(m_15, pk2, r3_3) in
            out(c19[i_4], m3_QE)
          )
          orfind u_4 = ri_4 <= qCPU suchthat defined(r_18[ri_4], x_O_2[ri_4], r_18[u_1]) && (x_Oeq = x_O_2[ri_4]) then
          (
            if (tcbh_QE = r_18[u_1]) && (tdih_QE = r_18[u_4]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_14: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_3: enc_seed;
            let m3_QE: bitstring = enc_r(m_15, pk2, r3_3) in
            out(c19[i_4], m3_QE)
          )
        )
      ))


Applying simplify
  - Simplification pass
    - Replaced (x_Oeq_1 = x_O_2[ri_1]) with (tcbi_QE = tcbi_CPU[ri_1]) at 1756
    - In branch 3 of find at 1765, substituting u_4 with u_1
    - Replaced defined condition r_18[ri_4], x_O_2[ri_4], r_18[u_1] with an empty condition in find at 1765
    - Replaced (x_Oeq = x_O_1[ri_5]) with (tdi_QE = tdi_TDXM[ri_5]) at 1874
    - Replaced defined condition r_17[ri_5], x_O_1[ri_5], r_18[u_1] with r_17[ri_5], tdi_TDXM[ri_5] in find at 1765
    - Replaced defined condition x1_1[ri_6], x_O[ri_6], r_16[ri_6], r_18[u_1] with r_16[ri_6], x1_1[ri_6] in find at 1765
    - Replaced defined condition x_O_2[ri_1], r_18[ri_1] with x_O_2[ri_1], r_18[ri_1], tcbi_CPU[ri_1] in find at 1104
    - Replaced defined condition r_18[ri_4], x_O_2[ri_4], r_17[u_2] with r_18[ri_4], x_O_2[ri_4] in find at 1441
    - In branch 2 of find at 1441, substituting u_5 with u_2
    - Replaced defined condition r_17[ri_5], x_O_1[ri_5], r_17[u_2] with an empty condition in find at 1441
    - Replaced defined condition x1_1[ri_6], x_O[ri_6], r_16[ri_6], r_17[u_2] with r_16[ri_6], x1_1[ri_6] in find at 1441
    - Replaced defined condition r_18[ri_4], x_O_2[ri_4], r_16[u_3] with r_18[ri_4], x_O_2[ri_4] in find at 1117
    - Replaced (x_Oeq = x_O_1[ri_5]) with (tdi_QE = tdi_TDXM[ri_5]) at 1226
    - Replaced defined condition r_17[ri_5], x_O_1[ri_5], r_16[u_3] with r_17[ri_5], tdi_TDXM[ri_5] in find at 1117
    - Replaced defined condition x1_1[ri_6], x_O[ri_6], r_16[ri_6], r_16[u_3] with r_16[ri_6], x1_1[ri_6] in find at 1117
    - Replaced defined condition x1_1[ri_3], x_O[ri_3], r_16[ri_3] with r_16[ri_3], x1_1[ri_3] in find at 1104
    - Replaced defined condition x1_1[ri_9], x_O[ri_9], r_16[ri_9] with r_16[ri_9], x1_1[ri_9] in find at 530
    - Replaced defined condition x1_1[ri_12], x_O[ri_12], r_16[ri_12] with r_16[ri_12], x1_1[ri_12] in find at 240
    - Replaced defined condition x1_1[ri_15], x_O[ri_15], r_16[ri_15] with r_16[ri_15], x1_1[ri_15] in find at 134
yields

Game 21 is
      in(start, ());
      new r1: skeyseed;
      let spk1: spkey = spkgen(r1) in
      let ssk1: sskey = sskgen(r1) in
      new r2: keyseed;
      let pk2: pkey = pkgen(r2) in
      let sk2: skey = skgen(r2) in
      new r3_2: keyseed;
      new sym_key: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec(m1_Ch, sk2) in
        let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
        if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
        let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
        let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
        let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
        let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
        event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
        if x1_Ch = pkgen2_1(r3_2) then
        (
          new r2_1: enc_seed;
          let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
          new session_key: key;
          out(c23[i], m2)
        )
        else
          new r3_1: enc_seed;
          new session_key: key;
          let m_8: bitstring = key2bitstring(session_key) in
          let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_1) in
          out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        let x_O: bitstring = cst_bitstring in
        find [unique] u_15 = ri_15 <= qH suchthat defined(r_16[ri_15], x1_1[ri_15]) && (x1_1 = x1_1[ri_15]) then
          out(ch2[iH], r_16[u_15])
        orfind u_14 = ri_14 <= qTDXM suchthat defined(x_O_1[ri_14], r_17[ri_14]) && (x1_1 = x_O_1[ri_14]) then
          out(ch2[iH], r_17[u_14])
        orfind u_13 = ri_13 <= qCPU suchthat defined(x_O_2[ri_13], r_18[ri_13]) && (x1_1 = x_O_2[ri_13]) then
          out(ch2[iH], r_18[u_13])
        else
          new r_16: hashoutput;
          out(ch2[iH], r_16)
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pkgen2_1(r3_2), rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        let tdi_TDXM: tdi_t = get_tdi in
        let rtyp_TDXM: rtyp_t = get_rtyp in
        let x_O_1: bitstring = tdi_t2bitstring(tdi_TDXM) in
        find [unique] u_12 = ri_12 <= qH suchthat defined(r_16[ri_12], x1_1[ri_12]) && (x_O_1 = x1_1[ri_12]) then
        (
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_16[u_12], rdata_TDXM) in
          new r_10: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_11: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_11 = ri_11 <= qTDXM suchthat defined(r_17[ri_11]) then
        (
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17[u_11], rdata_TDXM) in
          new r_10: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_11: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_10 = ri_10 <= qCPU suchthat defined(x_O_2[ri_10], r_18[ri_10]) && (x_O_1 = x_O_2[ri_10]) then
        (
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_18[u_10], rdata_TDXM) in
          new r_10: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_11: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
          out(c11[i_2], m4_TDXM)
        )
        else
          new r_17: hashoutput;
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17, rdata_TDXM) in
          new r_10: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_11: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
          out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        let csvn_CPU: csvn_t = get_csvn in
        let res1_CPU: res_t = get_res in
        let res2_CPU: res_t = get_res in
        let tcbi_CPU: tcbi_t = get_tcbi in
        let x_O_2: bitstring = tcbi_t2bitstring(tcbi_CPU) in
        find [unique] u_9 = ri_9 <= qH suchthat defined(r_16[ri_9], x1_1[ri_9]) && (x_O_2 = x1_1[ri_9]) then
        (
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_16[u_9], tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_16[u_9], tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_12: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_13: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_8 = ri_8 <= qTDXM suchthat defined(x_O_1[ri_8], r_17[ri_8]) && (x_O_2 = x_O_1[ri_8]) then
        (
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_17[u_8], tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_17[u_8], tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_12: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_13: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_7 = ri_7 <= qCPU suchthat defined(r_18[ri_7]) then
        (
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_18[u_7], tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_18[u_7], tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_12: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_13: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
          out(c17[i_3], m4_CPU)
        )
        else
          new r_18: hashoutput;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_18, tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_18, tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_12: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_13: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
          out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        let x_Oeq_1: bitstring = tcbi_t2bitstring(tcbi_QE) in
        find [unique] u_3 = ri_3 <= qH suchthat defined(r_16[ri_3], x1_1[ri_3]) && (x_Oeq_1 = x1_1[ri_3]) then
        (
          let x_Oeq: bitstring = tdi_t2bitstring(tdi_QE) in
          find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_Oeq = x1_1[ri_6]) then
          (
            if (tcbh_QE = r_16[u_3]) && (tdih_QE = r_16[u_6]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_14: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_3: enc_seed;
            let m3_QE: bitstring = enc_r(m_15, pk2, r3_3) in
            out(c19[i_4], m3_QE)
          )
          orfind u_5 = ri_5 <= qTDXM suchthat defined(r_17[ri_5], tdi_TDXM[ri_5]) && (tdi_QE = tdi_TDXM[ri_5]) then
          (
            if (tcbh_QE = r_16[u_3]) && (tdih_QE = r_17[u_5]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_14: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_3: enc_seed;
            let m3_QE: bitstring = enc_r(m_15, pk2, r3_3) in
            out(c19[i_4], m3_QE)
          )
          orfind u_4 = ri_4 <= qCPU suchthat defined(r_18[ri_4], x_O_2[ri_4]) && (x_Oeq = x_O_2[ri_4]) then
          (
            if (tcbh_QE = r_16[u_3]) && (tdih_QE = r_18[u_4]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_14: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_3: enc_seed;
            let m3_QE: bitstring = enc_r(m_15, pk2, r3_3) in
            out(c19[i_4], m3_QE)
          )
        )
        orfind u_2 = ri_2 <= qTDXM suchthat defined(x_O_1[ri_2], r_17[ri_2]) && (x_Oeq_1 = x_O_1[ri_2]) then
        (
          let x_Oeq: bitstring = tdi_t2bitstring(tdi_QE) in
          find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_Oeq = x1_1[ri_6]) then
          (
            if (tcbh_QE = r_17[u_2]) && (tdih_QE = r_16[u_6]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_14: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_3: enc_seed;
            let m3_QE: bitstring = enc_r(m_15, pk2, r3_3) in
            out(c19[i_4], m3_QE)
          )
          orfind  suchthat x_Oeq = x_O_1[u_2] then
          (
            let u_5 <= qTDXM = u_2 in
            if (tcbh_QE = r_17[u_2]) && (tdih_QE = r_17[u_2]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_14: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_3: enc_seed;
            let m3_QE: bitstring = enc_r(m_15, pk2, r3_3) in
            out(c19[i_4], m3_QE)
          )
          orfind u_4 = ri_4 <= qCPU suchthat defined(r_18[ri_4], x_O_2[ri_4]) && (x_Oeq = x_O_2[ri_4]) then
          (
            if (tcbh_QE = r_17[u_2]) && (tdih_QE = r_18[u_4]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_14: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_3: enc_seed;
            let m3_QE: bitstring = enc_r(m_15, pk2, r3_3) in
            out(c19[i_4], m3_QE)
          )
        )
        orfind u_1 = ri_1 <= qCPU suchthat defined(x_O_2[ri_1], r_18[ri_1], tcbi_CPU[ri_1]) && (tcbi_QE = tcbi_CPU[ri_1]) then
        (
          let x_Oeq: bitstring = tdi_t2bitstring(tdi_QE) in
          find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_Oeq = x1_1[ri_6]) then
          (
            if (tcbh_QE = r_18[u_1]) && (tdih_QE = r_16[u_6]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_14: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_3: enc_seed;
            let m3_QE: bitstring = enc_r(m_15, pk2, r3_3) in
            out(c19[i_4], m3_QE)
          )
          orfind u_5 = ri_5 <= qTDXM suchthat defined(r_17[ri_5], tdi_TDXM[ri_5]) && (tdi_QE = tdi_TDXM[ri_5]) then
          (
            if (tcbh_QE = r_18[u_1]) && (tdih_QE = r_17[u_5]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_14: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_3: enc_seed;
            let m3_QE: bitstring = enc_r(m_15, pk2, r3_3) in
            out(c19[i_4], m3_QE)
          )
          orfind  suchthat x_Oeq = x_O_2[u_1] then
          (
            let u_4 <= qCPU = u_1 in
            if (tcbh_QE = r_18[u_1]) && (tdih_QE = r_18[u_1]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_14: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_3: enc_seed;
            let m3_QE: bitstring = enc_r(m_15, pk2, r3_3) in
            out(c19[i_4], m3_QE)
          )
        )
      ))


Applying move all binders
  - Move assignment to u_5
  - Move assignment to u_4
  - Move assignment to res2_CPU
  - Move assignment to res1_CPU
  - Move assignment to csvn_CPU
  - Move assignment to rtyp_TDXM
  - Move assignment to x_O
yields

Game 22 is
      in(start, ());
      new r1: skeyseed;
      let spk1: spkey = spkgen(r1) in
      let ssk1: sskey = sskgen(r1) in
      new r2: keyseed;
      let pk2: pkey = pkgen(r2) in
      let sk2: skey = skgen(r2) in
      new r3_2: keyseed;
      new sym_key: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec(m1_Ch, sk2) in
        let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
        if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
        let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
        let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
        let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
        let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
        event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
        if x1_Ch = pkgen2_1(r3_2) then
        (
          new r2_1: enc_seed;
          let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
          new session_key: key;
          out(c23[i], m2)
        )
        else
          new r3_1: enc_seed;
          new session_key: key;
          let m_8: bitstring = key2bitstring(session_key) in
          let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_1) in
          out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        find [unique] u_15 = ri_15 <= qH suchthat defined(r_16[ri_15], x1_1[ri_15]) && (x1_1 = x1_1[ri_15]) then
          out(ch2[iH], r_16[u_15])
        orfind u_14 = ri_14 <= qTDXM suchthat defined(x_O_1[ri_14], r_17[ri_14]) && (x1_1 = x_O_1[ri_14]) then
          out(ch2[iH], r_17[u_14])
        orfind u_13 = ri_13 <= qCPU suchthat defined(x_O_2[ri_13], r_18[ri_13]) && (x1_1 = x_O_2[ri_13]) then
          out(ch2[iH], r_18[u_13])
        else
          new r_16: hashoutput;
          out(ch2[iH], r_16)
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pkgen2_1(r3_2), rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        let tdi_TDXM: tdi_t = get_tdi in
        let x_O_1: bitstring = tdi_t2bitstring(tdi_TDXM) in
        find [unique] u_12 = ri_12 <= qH suchthat defined(r_16[ri_12], x1_1[ri_12]) && (x_O_1 = x1_1[ri_12]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_16[u_12], rdata_TDXM) in
          new r_10: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_11: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_11 = ri_11 <= qTDXM suchthat defined(r_17[ri_11]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17[u_11], rdata_TDXM) in
          new r_10: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_11: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_10 = ri_10 <= qCPU suchthat defined(x_O_2[ri_10], r_18[ri_10]) && (x_O_1 = x_O_2[ri_10]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_18[u_10], rdata_TDXM) in
          new r_10: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_11: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
          out(c11[i_2], m4_TDXM)
        )
        else
          new r_17: hashoutput;
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17, rdata_TDXM) in
          new r_10: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_11: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
          out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        let tcbi_CPU: tcbi_t = get_tcbi in
        let x_O_2: bitstring = tcbi_t2bitstring(tcbi_CPU) in
        find [unique] u_9 = ri_9 <= qH suchthat defined(r_16[ri_9], x1_1[ri_9]) && (x_O_2 = x1_1[ri_9]) then
        (
          let res2_CPU: res_t = get_res in
          let res1_CPU: res_t = get_res in
          let csvn_CPU: csvn_t = get_csvn in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_16[u_9], tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_16[u_9], tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_12: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_13: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_8 = ri_8 <= qTDXM suchthat defined(x_O_1[ri_8], r_17[ri_8]) && (x_O_2 = x_O_1[ri_8]) then
        (
          let res2_CPU: res_t = get_res in
          let res1_CPU: res_t = get_res in
          let csvn_CPU: csvn_t = get_csvn in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_17[u_8], tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_17[u_8], tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_12: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_13: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_7 = ri_7 <= qCPU suchthat defined(r_18[ri_7]) then
        (
          let res2_CPU: res_t = get_res in
          let res1_CPU: res_t = get_res in
          let csvn_CPU: csvn_t = get_csvn in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_18[u_7], tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_18[u_7], tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_12: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_13: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
          out(c17[i_3], m4_CPU)
        )
        else
          new r_18: hashoutput;
          let res2_CPU: res_t = get_res in
          let res1_CPU: res_t = get_res in
          let csvn_CPU: csvn_t = get_csvn in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_18, tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_18, tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_12: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_13: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
          out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        let x_Oeq_1: bitstring = tcbi_t2bitstring(tcbi_QE) in
        find [unique] u_3 = ri_3 <= qH suchthat defined(r_16[ri_3], x1_1[ri_3]) && (x_Oeq_1 = x1_1[ri_3]) then
        (
          let x_Oeq: bitstring = tdi_t2bitstring(tdi_QE) in
          find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_Oeq = x1_1[ri_6]) then
          (
            if (tcbh_QE = r_16[u_3]) && (tdih_QE = r_16[u_6]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_14: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_3: enc_seed;
            let m3_QE: bitstring = enc_r(m_15, pk2, r3_3) in
            out(c19[i_4], m3_QE)
          )
          orfind u_5 = ri_5 <= qTDXM suchthat defined(r_17[ri_5], tdi_TDXM[ri_5]) && (tdi_QE = tdi_TDXM[ri_5]) then
          (
            if (tcbh_QE = r_16[u_3]) && (tdih_QE = r_17[u_5]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_14: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_3: enc_seed;
            let m3_QE: bitstring = enc_r(m_15, pk2, r3_3) in
            out(c19[i_4], m3_QE)
          )
          orfind u_4 = ri_4 <= qCPU suchthat defined(r_18[ri_4], x_O_2[ri_4]) && (x_Oeq = x_O_2[ri_4]) then
          (
            if (tcbh_QE = r_16[u_3]) && (tdih_QE = r_18[u_4]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_14: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_3: enc_seed;
            let m3_QE: bitstring = enc_r(m_15, pk2, r3_3) in
            out(c19[i_4], m3_QE)
          )
        )
        orfind u_2 = ri_2 <= qTDXM suchthat defined(x_O_1[ri_2], r_17[ri_2]) && (x_Oeq_1 = x_O_1[ri_2]) then
        (
          let x_Oeq: bitstring = tdi_t2bitstring(tdi_QE) in
          find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_Oeq = x1_1[ri_6]) then
          (
            if (tcbh_QE = r_17[u_2]) && (tdih_QE = r_16[u_6]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_14: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_3: enc_seed;
            let m3_QE: bitstring = enc_r(m_15, pk2, r3_3) in
            out(c19[i_4], m3_QE)
          )
          orfind  suchthat x_Oeq = x_O_1[u_2] then
          (
            if (tcbh_QE = r_17[u_2]) && (tdih_QE = r_17[u_2]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_14: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_3: enc_seed;
            let m3_QE: bitstring = enc_r(m_15, pk2, r3_3) in
            out(c19[i_4], m3_QE)
          )
          orfind u_4 = ri_4 <= qCPU suchthat defined(r_18[ri_4], x_O_2[ri_4]) && (x_Oeq = x_O_2[ri_4]) then
          (
            if (tcbh_QE = r_17[u_2]) && (tdih_QE = r_18[u_4]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_14: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_3: enc_seed;
            let m3_QE: bitstring = enc_r(m_15, pk2, r3_3) in
            out(c19[i_4], m3_QE)
          )
        )
        orfind u_1 = ri_1 <= qCPU suchthat defined(x_O_2[ri_1], r_18[ri_1], tcbi_CPU[ri_1]) && (tcbi_QE = tcbi_CPU[ri_1]) then
        (
          let x_Oeq: bitstring = tdi_t2bitstring(tdi_QE) in
          find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_Oeq = x1_1[ri_6]) then
          (
            if (tcbh_QE = r_18[u_1]) && (tdih_QE = r_16[u_6]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_14: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_3: enc_seed;
            let m3_QE: bitstring = enc_r(m_15, pk2, r3_3) in
            out(c19[i_4], m3_QE)
          )
          orfind u_5 = ri_5 <= qTDXM suchthat defined(r_17[ri_5], tdi_TDXM[ri_5]) && (tdi_QE = tdi_TDXM[ri_5]) then
          (
            if (tcbh_QE = r_18[u_1]) && (tdih_QE = r_17[u_5]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_14: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_3: enc_seed;
            let m3_QE: bitstring = enc_r(m_15, pk2, r3_3) in
            out(c19[i_4], m3_QE)
          )
          orfind  suchthat x_Oeq = x_O_2[u_1] then
          (
            if (tcbh_QE = r_18[u_1]) && (tdih_QE = r_18[u_1]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_14: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_3: enc_seed;
            let m3_QE: bitstring = enc_r(m_15, pk2, r3_3) in
            out(c19[i_4], m3_QE)
          )
        )
      ))


Applying remove assignments of findcond
  - Rename variable r_14 into r_27, r_26, r_25, r_24, r_23, r_22, r_21, r_20, r_19
  - Rename variable r3_3 into r3_12, r3_11, r3_10, r3_9, r3_8, r3_7, r3_6, r3_5, r3_4
  - Rename variable r_12 into r_34, r_32, r_30, r_28
  - Rename variable r_13 into r_35, r_33, r_31, r_29
  - Rename variable r_10 into r_42, r_40, r_38, r_36
  - Rename variable r_11 into r_43, r_41, r_39, r_37
yields

Game 23 is
      in(start, ());
      new r1: skeyseed;
      let spk1: spkey = spkgen(r1) in
      let ssk1: sskey = sskgen(r1) in
      new r2: keyseed;
      let pk2: pkey = pkgen(r2) in
      let sk2: skey = skgen(r2) in
      new r3_2: keyseed;
      new sym_key: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec(m1_Ch, sk2) in
        let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
        if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
        let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
        let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
        let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
        let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
        event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
        if x1_Ch = pkgen2_1(r3_2) then
        (
          new r2_1: enc_seed;
          let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
          new session_key: key;
          out(c23[i], m2)
        )
        else
          new r3_1: enc_seed;
          new session_key: key;
          let m_8: bitstring = key2bitstring(session_key) in
          let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_1) in
          out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        find [unique] u_15 = ri_15 <= qH suchthat defined(r_16[ri_15], x1_1[ri_15]) && (x1_1 = x1_1[ri_15]) then
          out(ch2[iH], r_16[u_15])
        orfind u_14 = ri_14 <= qTDXM suchthat defined(x_O_1[ri_14], r_17[ri_14]) && (x1_1 = x_O_1[ri_14]) then
          out(ch2[iH], r_17[u_14])
        orfind u_13 = ri_13 <= qCPU suchthat defined(x_O_2[ri_13], r_18[ri_13]) && (x1_1 = x_O_2[ri_13]) then
          out(ch2[iH], r_18[u_13])
        else
          new r_16: hashoutput;
          out(ch2[iH], r_16)
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pkgen2_1(r3_2), rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        let tdi_TDXM: tdi_t = get_tdi in
        let x_O_1: bitstring = tdi_t2bitstring(tdi_TDXM) in
        find [unique] u_12 = ri_12 <= qH suchthat defined(r_16[ri_12], x1_1[ri_12]) && (x_O_1 = x1_1[ri_12]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_16[u_12], rdata_TDXM) in
          new r_38: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_38) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_39: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_39) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_11 = ri_11 <= qTDXM suchthat defined(r_17[ri_11]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17[u_11], rdata_TDXM) in
          new r_40: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_40) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_41: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_41) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_10 = ri_10 <= qCPU suchthat defined(x_O_2[ri_10], r_18[ri_10]) && (x_O_1 = x_O_2[ri_10]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_18[u_10], rdata_TDXM) in
          new r_42: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_42) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_43: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_43) in
          out(c11[i_2], m4_TDXM)
        )
        else
          new r_17: hashoutput;
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17, rdata_TDXM) in
          new r_36: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_36) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_37: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_37) in
          out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        let tcbi_CPU: tcbi_t = get_tcbi in
        let x_O_2: bitstring = tcbi_t2bitstring(tcbi_CPU) in
        find [unique] u_9 = ri_9 <= qH suchthat defined(r_16[ri_9], x1_1[ri_9]) && (x_O_2 = x1_1[ri_9]) then
        (
          let res2_CPU: res_t = get_res in
          let res1_CPU: res_t = get_res in
          let csvn_CPU: csvn_t = get_csvn in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_16[u_9], tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_16[u_9], tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_30: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_30) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_31: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_31) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_8 = ri_8 <= qTDXM suchthat defined(x_O_1[ri_8], r_17[ri_8]) && (x_O_2 = x_O_1[ri_8]) then
        (
          let res2_CPU: res_t = get_res in
          let res1_CPU: res_t = get_res in
          let csvn_CPU: csvn_t = get_csvn in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_17[u_8], tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_17[u_8], tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_32: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_32) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_33: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_33) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_7 = ri_7 <= qCPU suchthat defined(r_18[ri_7]) then
        (
          let res2_CPU: res_t = get_res in
          let res1_CPU: res_t = get_res in
          let csvn_CPU: csvn_t = get_csvn in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_18[u_7], tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_18[u_7], tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_34: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_34) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_35: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_35) in
          out(c17[i_3], m4_CPU)
        )
        else
          new r_18: hashoutput;
          let res2_CPU: res_t = get_res in
          let res1_CPU: res_t = get_res in
          let csvn_CPU: csvn_t = get_csvn in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_18, tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_18, tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_28: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_28) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_29: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_29) in
          out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        let x_Oeq_1: bitstring = tcbi_t2bitstring(tcbi_QE) in
        find [unique] u_3 = ri_3 <= qH suchthat defined(r_16[ri_3], x1_1[ri_3]) && (x_Oeq_1 = x1_1[ri_3]) then
        (
          let x_Oeq: bitstring = tdi_t2bitstring(tdi_QE) in
          find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_Oeq = x1_1[ri_6]) then
          (
            if (tcbh_QE = r_16[u_3]) && (tdih_QE = r_16[u_6]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_19: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_19) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_4: enc_seed;
            let m3_QE: bitstring = enc_r(m_15, pk2, r3_4) in
            out(c19[i_4], m3_QE)
          )
          orfind u_5 = ri_5 <= qTDXM suchthat defined(r_17[ri_5], tdi_TDXM[ri_5]) && (tdi_QE = tdi_TDXM[ri_5]) then
          (
            if (tcbh_QE = r_16[u_3]) && (tdih_QE = r_17[u_5]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_20: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_20) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_5: enc_seed;
            let m3_QE: bitstring = enc_r(m_15, pk2, r3_5) in
            out(c19[i_4], m3_QE)
          )
          orfind u_4 = ri_4 <= qCPU suchthat defined(r_18[ri_4], x_O_2[ri_4]) && (x_Oeq = x_O_2[ri_4]) then
          (
            if (tcbh_QE = r_16[u_3]) && (tdih_QE = r_18[u_4]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_21: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_21) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_6: enc_seed;
            let m3_QE: bitstring = enc_r(m_15, pk2, r3_6) in
            out(c19[i_4], m3_QE)
          )
        )
        orfind u_2 = ri_2 <= qTDXM suchthat defined(x_O_1[ri_2], r_17[ri_2]) && (x_Oeq_1 = x_O_1[ri_2]) then
        (
          let x_Oeq: bitstring = tdi_t2bitstring(tdi_QE) in
          find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_Oeq = x1_1[ri_6]) then
          (
            if (tcbh_QE = r_17[u_2]) && (tdih_QE = r_16[u_6]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_22: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_22) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_7: enc_seed;
            let m3_QE: bitstring = enc_r(m_15, pk2, r3_7) in
            out(c19[i_4], m3_QE)
          )
          orfind  suchthat x_Oeq = x_O_1[u_2] then
          (
            if (tcbh_QE = r_17[u_2]) && (tdih_QE = r_17[u_2]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_23: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_23) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_8: enc_seed;
            let m3_QE: bitstring = enc_r(m_15, pk2, r3_8) in
            out(c19[i_4], m3_QE)
          )
          orfind u_4 = ri_4 <= qCPU suchthat defined(r_18[ri_4], x_O_2[ri_4]) && (x_Oeq = x_O_2[ri_4]) then
          (
            if (tcbh_QE = r_17[u_2]) && (tdih_QE = r_18[u_4]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_24: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_24) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_9: enc_seed;
            let m3_QE: bitstring = enc_r(m_15, pk2, r3_9) in
            out(c19[i_4], m3_QE)
          )
        )
        orfind u_1 = ri_1 <= qCPU suchthat defined(x_O_2[ri_1], r_18[ri_1], tcbi_CPU[ri_1]) && (tcbi_QE = tcbi_CPU[ri_1]) then
        (
          let x_Oeq: bitstring = tdi_t2bitstring(tdi_QE) in
          find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_Oeq = x1_1[ri_6]) then
          (
            if (tcbh_QE = r_18[u_1]) && (tdih_QE = r_16[u_6]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_25: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_25) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_10: enc_seed;
            let m3_QE: bitstring = enc_r(m_15, pk2, r3_10) in
            out(c19[i_4], m3_QE)
          )
          orfind u_5 = ri_5 <= qTDXM suchthat defined(r_17[ri_5], tdi_TDXM[ri_5]) && (tdi_QE = tdi_TDXM[ri_5]) then
          (
            if (tcbh_QE = r_18[u_1]) && (tdih_QE = r_17[u_5]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_26: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_26) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_11: enc_seed;
            let m3_QE: bitstring = enc_r(m_15, pk2, r3_11) in
            out(c19[i_4], m3_QE)
          )
          orfind  suchthat x_Oeq = x_O_2[u_1] then
          (
            if (tcbh_QE = r_18[u_1]) && (tdih_QE = r_18[u_1]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_27: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_27) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_12: enc_seed;
            let m3_QE: bitstring = enc_r(m_15, pk2, r3_12) in
            out(c19[i_4], m3_QE)
          )
        )
      ))


Applying remove assignments of binder pk2
  - Remove assignments on pk2 (definition removed, all usages removed)
yields

Game 24 is
      in(start, ());
      new r1: skeyseed;
      let spk1: spkey = spkgen(r1) in
      let ssk1: sskey = sskgen(r1) in
      new r2: keyseed;
      let sk2: skey = skgen(r2) in
      new r3_2: keyseed;
      new sym_key: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec(m1_Ch, sk2) in
        let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
        if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
        let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
        let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
        let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
        let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
        event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
        if x1_Ch = pkgen2_1(r3_2) then
        (
          new r2_1: enc_seed;
          let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
          new session_key: key;
          out(c23[i], m2)
        )
        else
          new r3_1: enc_seed;
          new session_key: key;
          let m_8: bitstring = key2bitstring(session_key) in
          let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_1) in
          out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        find [unique] u_15 = ri_15 <= qH suchthat defined(r_16[ri_15], x1_1[ri_15]) && (x1_1 = x1_1[ri_15]) then
          out(ch2[iH], r_16[u_15])
        orfind u_14 = ri_14 <= qTDXM suchthat defined(x_O_1[ri_14], r_17[ri_14]) && (x1_1 = x_O_1[ri_14]) then
          out(ch2[iH], r_17[u_14])
        orfind u_13 = ri_13 <= qCPU suchthat defined(x_O_2[ri_13], r_18[ri_13]) && (x1_1 = x_O_2[ri_13]) then
          out(ch2[iH], r_18[u_13])
        else
          new r_16: hashoutput;
          out(ch2[iH], r_16)
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pkgen2_1(r3_2), rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        let tdi_TDXM: tdi_t = get_tdi in
        let x_O_1: bitstring = tdi_t2bitstring(tdi_TDXM) in
        find [unique] u_12 = ri_12 <= qH suchthat defined(r_16[ri_12], x1_1[ri_12]) && (x_O_1 = x1_1[ri_12]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_16[u_12], rdata_TDXM) in
          new r_38: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_38) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_39: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_39) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_11 = ri_11 <= qTDXM suchthat defined(r_17[ri_11]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17[u_11], rdata_TDXM) in
          new r_40: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_40) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_41: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_41) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_10 = ri_10 <= qCPU suchthat defined(x_O_2[ri_10], r_18[ri_10]) && (x_O_1 = x_O_2[ri_10]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_18[u_10], rdata_TDXM) in
          new r_42: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_42) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_43: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_43) in
          out(c11[i_2], m4_TDXM)
        )
        else
          new r_17: hashoutput;
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17, rdata_TDXM) in
          new r_36: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_36) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_37: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_37) in
          out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        let tcbi_CPU: tcbi_t = get_tcbi in
        let x_O_2: bitstring = tcbi_t2bitstring(tcbi_CPU) in
        find [unique] u_9 = ri_9 <= qH suchthat defined(r_16[ri_9], x1_1[ri_9]) && (x_O_2 = x1_1[ri_9]) then
        (
          let res2_CPU: res_t = get_res in
          let res1_CPU: res_t = get_res in
          let csvn_CPU: csvn_t = get_csvn in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_16[u_9], tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_16[u_9], tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_30: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_30) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_31: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_31) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_8 = ri_8 <= qTDXM suchthat defined(x_O_1[ri_8], r_17[ri_8]) && (x_O_2 = x_O_1[ri_8]) then
        (
          let res2_CPU: res_t = get_res in
          let res1_CPU: res_t = get_res in
          let csvn_CPU: csvn_t = get_csvn in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_17[u_8], tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_17[u_8], tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_32: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_32) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_33: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_33) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_7 = ri_7 <= qCPU suchthat defined(r_18[ri_7]) then
        (
          let res2_CPU: res_t = get_res in
          let res1_CPU: res_t = get_res in
          let csvn_CPU: csvn_t = get_csvn in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_18[u_7], tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_18[u_7], tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_34: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_34) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_35: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_35) in
          out(c17[i_3], m4_CPU)
        )
        else
          new r_18: hashoutput;
          let res2_CPU: res_t = get_res in
          let res1_CPU: res_t = get_res in
          let csvn_CPU: csvn_t = get_csvn in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_18, tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_18, tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_28: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_28) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_29: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_29) in
          out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        let x_Oeq_1: bitstring = tcbi_t2bitstring(tcbi_QE) in
        find [unique] u_3 = ri_3 <= qH suchthat defined(r_16[ri_3], x1_1[ri_3]) && (x_Oeq_1 = x1_1[ri_3]) then
        (
          let x_Oeq: bitstring = tdi_t2bitstring(tdi_QE) in
          find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_Oeq = x1_1[ri_6]) then
          (
            if (tcbh_QE = r_16[u_3]) && (tdih_QE = r_16[u_6]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_19: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_19) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_4: enc_seed;
            let m3_QE: bitstring = enc_r(m_15, pkgen(r2), r3_4) in
            out(c19[i_4], m3_QE)
          )
          orfind u_5 = ri_5 <= qTDXM suchthat defined(r_17[ri_5], tdi_TDXM[ri_5]) && (tdi_QE = tdi_TDXM[ri_5]) then
          (
            if (tcbh_QE = r_16[u_3]) && (tdih_QE = r_17[u_5]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_20: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_20) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_5: enc_seed;
            let m3_QE: bitstring = enc_r(m_15, pkgen(r2), r3_5) in
            out(c19[i_4], m3_QE)
          )
          orfind u_4 = ri_4 <= qCPU suchthat defined(r_18[ri_4], x_O_2[ri_4]) && (x_Oeq = x_O_2[ri_4]) then
          (
            if (tcbh_QE = r_16[u_3]) && (tdih_QE = r_18[u_4]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_21: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_21) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_6: enc_seed;
            let m3_QE: bitstring = enc_r(m_15, pkgen(r2), r3_6) in
            out(c19[i_4], m3_QE)
          )
        )
        orfind u_2 = ri_2 <= qTDXM suchthat defined(x_O_1[ri_2], r_17[ri_2]) && (x_Oeq_1 = x_O_1[ri_2]) then
        (
          let x_Oeq: bitstring = tdi_t2bitstring(tdi_QE) in
          find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_Oeq = x1_1[ri_6]) then
          (
            if (tcbh_QE = r_17[u_2]) && (tdih_QE = r_16[u_6]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_22: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_22) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_7: enc_seed;
            let m3_QE: bitstring = enc_r(m_15, pkgen(r2), r3_7) in
            out(c19[i_4], m3_QE)
          )
          orfind  suchthat x_Oeq = x_O_1[u_2] then
          (
            if (tcbh_QE = r_17[u_2]) && (tdih_QE = r_17[u_2]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_23: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_23) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_8: enc_seed;
            let m3_QE: bitstring = enc_r(m_15, pkgen(r2), r3_8) in
            out(c19[i_4], m3_QE)
          )
          orfind u_4 = ri_4 <= qCPU suchthat defined(r_18[ri_4], x_O_2[ri_4]) && (x_Oeq = x_O_2[ri_4]) then
          (
            if (tcbh_QE = r_17[u_2]) && (tdih_QE = r_18[u_4]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_24: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_24) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_9: enc_seed;
            let m3_QE: bitstring = enc_r(m_15, pkgen(r2), r3_9) in
            out(c19[i_4], m3_QE)
          )
        )
        orfind u_1 = ri_1 <= qCPU suchthat defined(x_O_2[ri_1], r_18[ri_1], tcbi_CPU[ri_1]) && (tcbi_QE = tcbi_CPU[ri_1]) then
        (
          let x_Oeq: bitstring = tdi_t2bitstring(tdi_QE) in
          find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_Oeq = x1_1[ri_6]) then
          (
            if (tcbh_QE = r_18[u_1]) && (tdih_QE = r_16[u_6]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_25: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_25) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_10: enc_seed;
            let m3_QE: bitstring = enc_r(m_15, pkgen(r2), r3_10) in
            out(c19[i_4], m3_QE)
          )
          orfind u_5 = ri_5 <= qTDXM suchthat defined(r_17[ri_5], tdi_TDXM[ri_5]) && (tdi_QE = tdi_TDXM[ri_5]) then
          (
            if (tcbh_QE = r_18[u_1]) && (tdih_QE = r_17[u_5]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_26: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_26) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_11: enc_seed;
            let m3_QE: bitstring = enc_r(m_15, pkgen(r2), r3_11) in
            out(c19[i_4], m3_QE)
          )
          orfind  suchthat x_Oeq = x_O_2[u_1] then
          (
            if (tcbh_QE = r_18[u_1]) && (tdih_QE = r_18[u_1]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_27: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_27) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_12: enc_seed;
            let m3_QE: bitstring = enc_r(m_15, pkgen(r2), r3_12) in
            out(c19[i_4], m3_QE)
          )
        )
      ))


Applying remove assignments of binder sk2
  - Remove assignments on sk2 (definition removed, all usages removed)
yields

Game 25 is
      in(start, ());
      new r1: skeyseed;
      let spk1: spkey = spkgen(r1) in
      let ssk1: sskey = sskgen(r1) in
      new r2: keyseed;
      new r3_2: keyseed;
      new sym_key: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec(m1_Ch, skgen(r2)) in
        let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
        if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
        let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
        let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
        let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
        let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
        event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
        if x1_Ch = pkgen2_1(r3_2) then
        (
          new r2_1: enc_seed;
          let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
          new session_key: key;
          out(c23[i], m2)
        )
        else
          new r3_1: enc_seed;
          new session_key: key;
          let m_8: bitstring = key2bitstring(session_key) in
          let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_1) in
          out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        find [unique] u_15 = ri_15 <= qH suchthat defined(r_16[ri_15], x1_1[ri_15]) && (x1_1 = x1_1[ri_15]) then
          out(ch2[iH], r_16[u_15])
        orfind u_14 = ri_14 <= qTDXM suchthat defined(x_O_1[ri_14], r_17[ri_14]) && (x1_1 = x_O_1[ri_14]) then
          out(ch2[iH], r_17[u_14])
        orfind u_13 = ri_13 <= qCPU suchthat defined(x_O_2[ri_13], r_18[ri_13]) && (x1_1 = x_O_2[ri_13]) then
          out(ch2[iH], r_18[u_13])
        else
          new r_16: hashoutput;
          out(ch2[iH], r_16)
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pkgen2_1(r3_2), rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        let tdi_TDXM: tdi_t = get_tdi in
        let x_O_1: bitstring = tdi_t2bitstring(tdi_TDXM) in
        find [unique] u_12 = ri_12 <= qH suchthat defined(r_16[ri_12], x1_1[ri_12]) && (x_O_1 = x1_1[ri_12]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_16[u_12], rdata_TDXM) in
          new r_38: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_38) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_39: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_39) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_11 = ri_11 <= qTDXM suchthat defined(r_17[ri_11]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17[u_11], rdata_TDXM) in
          new r_40: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_40) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_41: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_41) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_10 = ri_10 <= qCPU suchthat defined(x_O_2[ri_10], r_18[ri_10]) && (x_O_1 = x_O_2[ri_10]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_18[u_10], rdata_TDXM) in
          new r_42: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_42) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_43: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_43) in
          out(c11[i_2], m4_TDXM)
        )
        else
          new r_17: hashoutput;
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17, rdata_TDXM) in
          new r_36: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_36) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_37: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_37) in
          out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        let tcbi_CPU: tcbi_t = get_tcbi in
        let x_O_2: bitstring = tcbi_t2bitstring(tcbi_CPU) in
        find [unique] u_9 = ri_9 <= qH suchthat defined(r_16[ri_9], x1_1[ri_9]) && (x_O_2 = x1_1[ri_9]) then
        (
          let res2_CPU: res_t = get_res in
          let res1_CPU: res_t = get_res in
          let csvn_CPU: csvn_t = get_csvn in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_16[u_9], tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_16[u_9], tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_30: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_30) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_31: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_31) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_8 = ri_8 <= qTDXM suchthat defined(x_O_1[ri_8], r_17[ri_8]) && (x_O_2 = x_O_1[ri_8]) then
        (
          let res2_CPU: res_t = get_res in
          let res1_CPU: res_t = get_res in
          let csvn_CPU: csvn_t = get_csvn in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_17[u_8], tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_17[u_8], tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_32: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_32) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_33: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_33) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_7 = ri_7 <= qCPU suchthat defined(r_18[ri_7]) then
        (
          let res2_CPU: res_t = get_res in
          let res1_CPU: res_t = get_res in
          let csvn_CPU: csvn_t = get_csvn in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_18[u_7], tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_18[u_7], tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_34: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_34) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_35: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_35) in
          out(c17[i_3], m4_CPU)
        )
        else
          new r_18: hashoutput;
          let res2_CPU: res_t = get_res in
          let res1_CPU: res_t = get_res in
          let csvn_CPU: csvn_t = get_csvn in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_18, tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_18, tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_28: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_28) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_29: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_29) in
          out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        let x_Oeq_1: bitstring = tcbi_t2bitstring(tcbi_QE) in
        find [unique] u_3 = ri_3 <= qH suchthat defined(r_16[ri_3], x1_1[ri_3]) && (x_Oeq_1 = x1_1[ri_3]) then
        (
          let x_Oeq: bitstring = tdi_t2bitstring(tdi_QE) in
          find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_Oeq = x1_1[ri_6]) then
          (
            if (tcbh_QE = r_16[u_3]) && (tdih_QE = r_16[u_6]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_19: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_19) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_4: enc_seed;
            let m3_QE: bitstring = enc_r(m_15, pkgen(r2), r3_4) in
            out(c19[i_4], m3_QE)
          )
          orfind u_5 = ri_5 <= qTDXM suchthat defined(r_17[ri_5], tdi_TDXM[ri_5]) && (tdi_QE = tdi_TDXM[ri_5]) then
          (
            if (tcbh_QE = r_16[u_3]) && (tdih_QE = r_17[u_5]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_20: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_20) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_5: enc_seed;
            let m3_QE: bitstring = enc_r(m_15, pkgen(r2), r3_5) in
            out(c19[i_4], m3_QE)
          )
          orfind u_4 = ri_4 <= qCPU suchthat defined(r_18[ri_4], x_O_2[ri_4]) && (x_Oeq = x_O_2[ri_4]) then
          (
            if (tcbh_QE = r_16[u_3]) && (tdih_QE = r_18[u_4]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_21: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_21) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_6: enc_seed;
            let m3_QE: bitstring = enc_r(m_15, pkgen(r2), r3_6) in
            out(c19[i_4], m3_QE)
          )
        )
        orfind u_2 = ri_2 <= qTDXM suchthat defined(x_O_1[ri_2], r_17[ri_2]) && (x_Oeq_1 = x_O_1[ri_2]) then
        (
          let x_Oeq: bitstring = tdi_t2bitstring(tdi_QE) in
          find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_Oeq = x1_1[ri_6]) then
          (
            if (tcbh_QE = r_17[u_2]) && (tdih_QE = r_16[u_6]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_22: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_22) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_7: enc_seed;
            let m3_QE: bitstring = enc_r(m_15, pkgen(r2), r3_7) in
            out(c19[i_4], m3_QE)
          )
          orfind  suchthat x_Oeq = x_O_1[u_2] then
          (
            if (tcbh_QE = r_17[u_2]) && (tdih_QE = r_17[u_2]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_23: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_23) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_8: enc_seed;
            let m3_QE: bitstring = enc_r(m_15, pkgen(r2), r3_8) in
            out(c19[i_4], m3_QE)
          )
          orfind u_4 = ri_4 <= qCPU suchthat defined(r_18[ri_4], x_O_2[ri_4]) && (x_Oeq = x_O_2[ri_4]) then
          (
            if (tcbh_QE = r_17[u_2]) && (tdih_QE = r_18[u_4]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_24: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_24) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_9: enc_seed;
            let m3_QE: bitstring = enc_r(m_15, pkgen(r2), r3_9) in
            out(c19[i_4], m3_QE)
          )
        )
        orfind u_1 = ri_1 <= qCPU suchthat defined(x_O_2[ri_1], r_18[ri_1], tcbi_CPU[ri_1]) && (tcbi_QE = tcbi_CPU[ri_1]) then
        (
          let x_Oeq: bitstring = tdi_t2bitstring(tdi_QE) in
          find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_Oeq = x1_1[ri_6]) then
          (
            if (tcbh_QE = r_18[u_1]) && (tdih_QE = r_16[u_6]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_25: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_25) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_10: enc_seed;
            let m3_QE: bitstring = enc_r(m_15, pkgen(r2), r3_10) in
            out(c19[i_4], m3_QE)
          )
          orfind u_5 = ri_5 <= qTDXM suchthat defined(r_17[ri_5], tdi_TDXM[ri_5]) && (tdi_QE = tdi_TDXM[ri_5]) then
          (
            if (tcbh_QE = r_18[u_1]) && (tdih_QE = r_17[u_5]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_26: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_26) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_11: enc_seed;
            let m3_QE: bitstring = enc_r(m_15, pkgen(r2), r3_11) in
            out(c19[i_4], m3_QE)
          )
          orfind  suchthat x_Oeq = x_O_2[u_1] then
          (
            if (tcbh_QE = r_18[u_1]) && (tdih_QE = r_18[u_1]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_27: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_27) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_12: enc_seed;
            let m3_QE: bitstring = enc_r(m_15, pkgen(r2), r3_12) in
            out(c19[i_4], m3_QE)
          )
        )
      ))


Applying equivalence ind_cca2(enc) with r3_4, r3_1, r2, r3_5, r3_6, r3_7, r3_8, r3_9, r3_10, r3_11, r3_12 [probability (qQE + qChallenger) * Penc(time(context for game 25) + time + (-1 + qChallenger + qQE) * time(enc_r, max(maxlength(game 25: m_8), maxlength(game 25: m_15))), qChallenger)]
  - Equivalence ind_cca2(enc) with variables: r3_12 -> r1_1, r3_11 -> r1_1, r3_10 -> r1_1, r3_9 -> r1_1, r3_8 -> r1_1, r3_7 -> r1_1, r3_6 -> r1_1, r3_5 -> r1_1, r3_4 -> r1_1, r3_1 -> r2_1, r2 -> r
yields

Game 26 is
      in(start, ());
      new r1: skeyseed;
      let spk1: spkey = spkgen(r1) in
      let ssk1: sskey = sskgen(r1) in
      new r2_3: keyseed;
      new r3_2: keyseed;
      new sym_key: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
  {28}  let injbot(quote_t2bitstring(quote_Ch: quote_t)) = (let m_17: bitstring = m1_Ch in {32}find u_25 = ri_25 <= qChallenger suchthat defined(m2_2[ri_25], y_2[ri_25], x_3[ri_25]) && (y_2[ri_25] = pkgen2_1(r2_3)) && (m_17 = m2_2[ri_25]) then injbot(x_3[u_25]) orfind u_24 = ri_24 <= qQE suchthat defined(m1[ri_24], x1[ri_24]) && (m_17 = m1[ri_24]) then injbot(x1[u_24]) orfind u_23 = ri_23 <= qQE suchthat defined(m1_1[ri_23], x1_2[ri_23]) && (m_17 = m1_1[ri_23]) then injbot(x1_2[u_23]) orfind u_22 = ri_22 <= qQE suchthat defined(m1_2[ri_22], x1_3[ri_22]) && (m_17 = m1_2[ri_22]) then injbot(x1_3[u_22]) orfind u_21 = ri_21 <= qQE suchthat defined(m1_3[ri_21], x1_4[ri_21]) && (m_17 = m1_3[ri_21]) then injbot(x1_4[u_21]) orfind u_20 = ri_20 <= qQE suchthat defined(m1_4[ri_20], x1_5[ri_20]) && (m_17 = m1_4[ri_20]) then injbot(x1_5[u_20]) orfind u_19 = ri_19 <= qQE suchthat defined(m1_5[ri_19], x1_6[ri_19]) && (m_17 = m1_5[ri_19]) then injbot(x1_6[u_19]) orfind u_18 = ri_18 <= qQE suchthat defined(m1_6[ri_18], x1_7[ri_18]) && (m_17 = m1_6[ri_18]) then injbot(x1_7[u_18]) orfind u_17 = ri_17 <= qQE suchthat defined(m1_7[ri_17], x1_8[ri_17]) && (m_17 = m1_7[ri_17]) then injbot(x1_8[u_17]) orfind u_16 = ri_16 <= qQE suchthat defined(m1_8[ri_16], x1_9[ri_16]) && (m_17 = m1_8[ri_16]) then injbot(x1_9[u_16]) else dec2(m_17, skgen2_1(r2_3))) in
 {155}  let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
 {158}  if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
 {166}  let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
 {169}  let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
 {172}  let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
        let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
        event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
        if x1_Ch = pkgen2_1(r3_2) then
        (
          new r2_1: enc_seed;
          let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
          new session_key: key;
          out(c23[i], m2)
        )
        else
          new r3_13: enc_seed;
          new r2_4: enc_seed;
          new session_key: key;
          let m_8: bitstring = key2bitstring(session_key) in
          let m2_Ch: bitstring = (let x_3: bitstring = m_8 in (let y_2: pkey = x1_Ch in {231}if defined(r2_3) && (y_2 = pkgen2_1(r2_3)) then (let m2_2: bitstring = enc_r2(Z(x_3), y_2, r2_4) in m2_2) else enc_r(x_3, y_2, r3_13))) in
          out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        find [unique] u_15 = ri_15 <= qH suchthat defined(r_16[ri_15], x1_1[ri_15]) && (x1_1 = x1_1[ri_15]) then
          out(ch2[iH], r_16[u_15])
        orfind u_14 = ri_14 <= qTDXM suchthat defined(x_O_1[ri_14], r_17[ri_14]) && (x1_1 = x_O_1[ri_14]) then
          out(ch2[iH], r_17[u_14])
        orfind u_13 = ri_13 <= qCPU suchthat defined(x_O_2[ri_13], r_18[ri_13]) && (x1_1 = x_O_2[ri_13]) then
          out(ch2[iH], r_18[u_13])
        else
          new r_16: hashoutput;
          out(ch2[iH], r_16)
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pkgen2_1(r3_2), rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        let tdi_TDXM: tdi_t = get_tdi in
        let x_O_1: bitstring = tdi_t2bitstring(tdi_TDXM) in
        find [unique] u_12 = ri_12 <= qH suchthat defined(r_16[ri_12], x1_1[ri_12]) && (x_O_1 = x1_1[ri_12]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_16[u_12], rdata_TDXM) in
          new r_38: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_38) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_39: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_39) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_11 = ri_11 <= qTDXM suchthat defined(r_17[ri_11]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17[u_11], rdata_TDXM) in
          new r_40: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_40) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_41: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_41) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_10 = ri_10 <= qCPU suchthat defined(x_O_2[ri_10], r_18[ri_10]) && (x_O_1 = x_O_2[ri_10]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_18[u_10], rdata_TDXM) in
          new r_42: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_42) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_43: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_43) in
          out(c11[i_2], m4_TDXM)
        )
        else
          new r_17: hashoutput;
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17, rdata_TDXM) in
          new r_36: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_36) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_37: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_37) in
          out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        let tcbi_CPU: tcbi_t = get_tcbi in
        let x_O_2: bitstring = tcbi_t2bitstring(tcbi_CPU) in
        find [unique] u_9 = ri_9 <= qH suchthat defined(r_16[ri_9], x1_1[ri_9]) && (x_O_2 = x1_1[ri_9]) then
        (
          let res2_CPU: res_t = get_res in
          let res1_CPU: res_t = get_res in
          let csvn_CPU: csvn_t = get_csvn in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_16[u_9], tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_16[u_9], tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_30: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_30) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_31: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_31) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_8 = ri_8 <= qTDXM suchthat defined(x_O_1[ri_8], r_17[ri_8]) && (x_O_2 = x_O_1[ri_8]) then
        (
          let res2_CPU: res_t = get_res in
          let res1_CPU: res_t = get_res in
          let csvn_CPU: csvn_t = get_csvn in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_17[u_8], tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_17[u_8], tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_32: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_32) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_33: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_33) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_7 = ri_7 <= qCPU suchthat defined(r_18[ri_7]) then
        (
          let res2_CPU: res_t = get_res in
          let res1_CPU: res_t = get_res in
          let csvn_CPU: csvn_t = get_csvn in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_18[u_7], tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_18[u_7], tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_34: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_34) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_35: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_35) in
          out(c17[i_3], m4_CPU)
        )
        else
          new r_18: hashoutput;
          let res2_CPU: res_t = get_res in
          let res1_CPU: res_t = get_res in
          let csvn_CPU: csvn_t = get_csvn in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_18, tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_18, tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_28: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_28) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_29: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_29) in
          out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        let x_Oeq_1: bitstring = tcbi_t2bitstring(tcbi_QE) in
        find [unique] u_3 = ri_3 <= qH suchthat defined(r_16[ri_3], x1_1[ri_3]) && (x_Oeq_1 = x1_1[ri_3]) then
        (
          let x_Oeq: bitstring = tdi_t2bitstring(tdi_QE) in
          find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_Oeq = x1_1[ri_6]) then
          (
            if (tcbh_QE = r_16[u_3]) && (tdih_QE = r_16[u_6]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_19: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_19) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_14: enc_seed;
            let m3_QE: bitstring = (let x1: bitstring = m_15 in (let m1: bitstring = enc_r2(Z(x1), pkgen2_1(r2_3), r3_14) in m1)) in
            out(c19[i_4], m3_QE)
          )
          orfind u_5 = ri_5 <= qTDXM suchthat defined(r_17[ri_5], tdi_TDXM[ri_5]) && (tdi_QE = tdi_TDXM[ri_5]) then
          (
            if (tcbh_QE = r_16[u_3]) && (tdih_QE = r_17[u_5]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_20: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_20) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_15: enc_seed;
            let m3_QE: bitstring = (let x1_2: bitstring = m_15 in (let m1_1: bitstring = enc_r2(Z(x1_2), pkgen2_1(r2_3), r3_15) in m1_1)) in
            out(c19[i_4], m3_QE)
          )
          orfind u_4 = ri_4 <= qCPU suchthat defined(r_18[ri_4], x_O_2[ri_4]) && (x_Oeq = x_O_2[ri_4]) then
          (
            if (tcbh_QE = r_16[u_3]) && (tdih_QE = r_18[u_4]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_21: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_21) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_16: enc_seed;
            let m3_QE: bitstring = (let x1_3: bitstring = m_15 in (let m1_2: bitstring = enc_r2(Z(x1_3), pkgen2_1(r2_3), r3_16) in m1_2)) in
            out(c19[i_4], m3_QE)
          )
        )
        orfind u_2 = ri_2 <= qTDXM suchthat defined(x_O_1[ri_2], r_17[ri_2]) && (x_Oeq_1 = x_O_1[ri_2]) then
        (
          let x_Oeq: bitstring = tdi_t2bitstring(tdi_QE) in
          find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_Oeq = x1_1[ri_6]) then
          (
            if (tcbh_QE = r_17[u_2]) && (tdih_QE = r_16[u_6]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_22: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_22) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_17: enc_seed;
            let m3_QE: bitstring = (let x1_4: bitstring = m_15 in (let m1_3: bitstring = enc_r2(Z(x1_4), pkgen2_1(r2_3), r3_17) in m1_3)) in
            out(c19[i_4], m3_QE)
          )
          orfind  suchthat x_Oeq = x_O_1[u_2] then
          (
            if (tcbh_QE = r_17[u_2]) && (tdih_QE = r_17[u_2]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_23: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_23) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_18: enc_seed;
            let m3_QE: bitstring = (let x1_5: bitstring = m_15 in (let m1_4: bitstring = enc_r2(Z(x1_5), pkgen2_1(r2_3), r3_18) in m1_4)) in
            out(c19[i_4], m3_QE)
          )
          orfind u_4 = ri_4 <= qCPU suchthat defined(r_18[ri_4], x_O_2[ri_4]) && (x_Oeq = x_O_2[ri_4]) then
          (
            if (tcbh_QE = r_17[u_2]) && (tdih_QE = r_18[u_4]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_24: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_24) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_19: enc_seed;
            let m3_QE: bitstring = (let x1_6: bitstring = m_15 in (let m1_5: bitstring = enc_r2(Z(x1_6), pkgen2_1(r2_3), r3_19) in m1_5)) in
            out(c19[i_4], m3_QE)
          )
        )
        orfind u_1 = ri_1 <= qCPU suchthat defined(x_O_2[ri_1], r_18[ri_1], tcbi_CPU[ri_1]) && (tcbi_QE = tcbi_CPU[ri_1]) then
        (
          let x_Oeq: bitstring = tdi_t2bitstring(tdi_QE) in
          find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_Oeq = x1_1[ri_6]) then
          (
            if (tcbh_QE = r_18[u_1]) && (tdih_QE = r_16[u_6]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_25: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_25) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_20: enc_seed;
            let m3_QE: bitstring = (let x1_7: bitstring = m_15 in (let m1_6: bitstring = enc_r2(Z(x1_7), pkgen2_1(r2_3), r3_20) in m1_6)) in
            out(c19[i_4], m3_QE)
          )
          orfind u_5 = ri_5 <= qTDXM suchthat defined(r_17[ri_5], tdi_TDXM[ri_5]) && (tdi_QE = tdi_TDXM[ri_5]) then
          (
            if (tcbh_QE = r_18[u_1]) && (tdih_QE = r_17[u_5]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_26: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_26) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_21: enc_seed;
            let m3_QE: bitstring = (let x1_8: bitstring = m_15 in (let m1_7: bitstring = enc_r2(Z(x1_8), pkgen2_1(r2_3), r3_21) in m1_7)) in
            out(c19[i_4], m3_QE)
          )
          orfind  suchthat x_Oeq = x_O_2[u_1] then
          (
            if (tcbh_QE = r_18[u_1]) && (tdih_QE = r_18[u_1]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_27: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_27) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_22: enc_seed;
            let m3_QE: bitstring = (let x1_9: bitstring = m_15 in (let m1_8: bitstring = enc_r2(Z(x1_9), pkgen2_1(r2_3), r3_22) in m1_8)) in
            out(c19[i_4], m3_QE)
          )
        )
      ))


Applying expand
  - Expand if/find/let
    - Transformed find at 231 into a test
    - Simplify pattern quote_t2bitstring(quote_Ch: quote_t) (tuple expanded), pattern injbot(quote_t2bitstring(quote_Ch: quote_t)) (tuple expanded) at 28
    - Simplify pattern quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) (tuple expanded) at 155
    - Test at 158 always true
    - Simplify pattern tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) (tuple expanded) at 166
    - Simplify pattern smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) (tuple expanded) at 169
    - Simplify pattern rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) (tuple expanded) at 172
    - Transformed find at 231 into a test
    - Replaced defined condition m1_8[ri_16], x1_9[ri_16] with rtyp_QE[ri_16], res1_QE[ri_16], csvn_QE[ri_16], tcbh_QE[ri_16], tdih_QE[ri_16], rdata_QE[ri_16], res2_QE[ri_16], rms_without_mac_QE[ri_16], tcbi_QE[ri_16], smr_without_mac_QE[ri_16], res4_QE[ri_16], tdi_QE[ri_16], tdr_without_mac_QE[ri_16], sig_QE[ri_16], quote_QE[ri_16], m1_8[ri_16] in find at 32
    - Simplify pattern quote_t2bitstring(quote_Ch: quote_t) (tuple expanded), pattern injbot(quote_t2bitstring(quote_Ch: quote_t)) (tuple expanded) at 28
    - Simplify pattern quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) (tuple expanded) at 155
    - Test at 158 always true
    - Simplify pattern tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) (tuple expanded) at 166
    - Simplify pattern smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) (tuple expanded) at 169
    - Simplify pattern rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) (tuple expanded) at 172
    - Transformed find at 231 into a test
    - Replaced defined condition m1_7[ri_17], x1_8[ri_17] with rtyp_QE[ri_17], res1_QE[ri_17], csvn_QE[ri_17], tcbh_QE[ri_17], tdih_QE[ri_17], rdata_QE[ri_17], res2_QE[ri_17], rms_without_mac_QE[ri_17], tcbi_QE[ri_17], smr_without_mac_QE[ri_17], res4_QE[ri_17], tdi_QE[ri_17], tdr_without_mac_QE[ri_17], sig_QE[ri_17], quote_QE[ri_17], m1_7[ri_17] in find at 32
    - Simplify pattern quote_t2bitstring(quote_Ch: quote_t) (tuple expanded), pattern injbot(quote_t2bitstring(quote_Ch: quote_t)) (tuple expanded) at 28
    - Simplify pattern quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) (tuple expanded) at 155
    - Test at 158 always true
    - Simplify pattern tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) (tuple expanded) at 166
    - Simplify pattern smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) (tuple expanded) at 169
    - Simplify pattern rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) (tuple expanded) at 172
    - Transformed find at 231 into a test
    - Replaced defined condition m1_6[ri_18], x1_7[ri_18] with rtyp_QE[ri_18], res1_QE[ri_18], csvn_QE[ri_18], tcbh_QE[ri_18], tdih_QE[ri_18], rdata_QE[ri_18], res2_QE[ri_18], rms_without_mac_QE[ri_18], tcbi_QE[ri_18], smr_without_mac_QE[ri_18], res4_QE[ri_18], tdi_QE[ri_18], tdr_without_mac_QE[ri_18], sig_QE[ri_18], quote_QE[ri_18], m1_6[ri_18] in find at 32
    - Simplify pattern quote_t2bitstring(quote_Ch: quote_t) (tuple expanded), pattern injbot(quote_t2bitstring(quote_Ch: quote_t)) (tuple expanded) at 28
    - Simplify pattern quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) (tuple expanded) at 155
    - Test at 158 always true
    - Simplify pattern tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) (tuple expanded) at 166
    - Simplify pattern smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) (tuple expanded) at 169
    - Simplify pattern rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) (tuple expanded) at 172
    - Transformed find at 231 into a test
    - Replaced defined condition m1_5[ri_19], x1_6[ri_19] with rtyp_QE[ri_19], res1_QE[ri_19], csvn_QE[ri_19], tcbh_QE[ri_19], tdih_QE[ri_19], rdata_QE[ri_19], res2_QE[ri_19], rms_without_mac_QE[ri_19], tcbi_QE[ri_19], smr_without_mac_QE[ri_19], res4_QE[ri_19], tdi_QE[ri_19], tdr_without_mac_QE[ri_19], sig_QE[ri_19], quote_QE[ri_19], m1_5[ri_19] in find at 32
    - Simplify pattern quote_t2bitstring(quote_Ch: quote_t) (tuple expanded), pattern injbot(quote_t2bitstring(quote_Ch: quote_t)) (tuple expanded) at 28
    - Simplify pattern quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) (tuple expanded) at 155
    - Test at 158 always true
    - Simplify pattern tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) (tuple expanded) at 166
    - Simplify pattern smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) (tuple expanded) at 169
    - Simplify pattern rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) (tuple expanded) at 172
    - Transformed find at 231 into a test
    - Replaced defined condition m1_4[ri_20], x1_5[ri_20] with rtyp_QE[ri_20], res1_QE[ri_20], csvn_QE[ri_20], tcbh_QE[ri_20], tdih_QE[ri_20], rdata_QE[ri_20], res2_QE[ri_20], rms_without_mac_QE[ri_20], tcbi_QE[ri_20], smr_without_mac_QE[ri_20], res4_QE[ri_20], tdi_QE[ri_20], tdr_without_mac_QE[ri_20], sig_QE[ri_20], quote_QE[ri_20], m1_4[ri_20] in find at 32
    - Simplify pattern quote_t2bitstring(quote_Ch: quote_t) (tuple expanded), pattern injbot(quote_t2bitstring(quote_Ch: quote_t)) (tuple expanded) at 28
    - Simplify pattern quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) (tuple expanded) at 155
    - Test at 158 always true
    - Simplify pattern tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) (tuple expanded) at 166
    - Simplify pattern smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) (tuple expanded) at 169
    - Simplify pattern rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) (tuple expanded) at 172
    - Transformed find at 231 into a test
    - Replaced defined condition m1_3[ri_21], x1_4[ri_21] with rtyp_QE[ri_21], res1_QE[ri_21], csvn_QE[ri_21], tcbh_QE[ri_21], tdih_QE[ri_21], rdata_QE[ri_21], res2_QE[ri_21], rms_without_mac_QE[ri_21], tcbi_QE[ri_21], smr_without_mac_QE[ri_21], res4_QE[ri_21], tdi_QE[ri_21], tdr_without_mac_QE[ri_21], sig_QE[ri_21], quote_QE[ri_21], m1_3[ri_21] in find at 32
    - Simplify pattern quote_t2bitstring(quote_Ch: quote_t) (tuple expanded), pattern injbot(quote_t2bitstring(quote_Ch: quote_t)) (tuple expanded) at 28
    - Simplify pattern quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) (tuple expanded) at 155
    - Test at 158 always true
    - Simplify pattern tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) (tuple expanded) at 166
    - Simplify pattern smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) (tuple expanded) at 169
    - Simplify pattern rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) (tuple expanded) at 172
    - Transformed find at 231 into a test
    - Replaced defined condition m1_2[ri_22], x1_3[ri_22] with rtyp_QE[ri_22], res1_QE[ri_22], csvn_QE[ri_22], tcbh_QE[ri_22], tdih_QE[ri_22], rdata_QE[ri_22], res2_QE[ri_22], rms_without_mac_QE[ri_22], tcbi_QE[ri_22], smr_without_mac_QE[ri_22], res4_QE[ri_22], tdi_QE[ri_22], tdr_without_mac_QE[ri_22], sig_QE[ri_22], quote_QE[ri_22], m1_2[ri_22] in find at 32
    - Simplify pattern quote_t2bitstring(quote_Ch: quote_t) (tuple expanded), pattern injbot(quote_t2bitstring(quote_Ch: quote_t)) (tuple expanded) at 28
    - Simplify pattern quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) (tuple expanded) at 155
    - Test at 158 always true
    - Simplify pattern tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) (tuple expanded) at 166
    - Simplify pattern smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) (tuple expanded) at 169
    - Simplify pattern rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) (tuple expanded) at 172
    - Transformed find at 231 into a test
    - Replaced defined condition m1_1[ri_23], x1_2[ri_23] with rtyp_QE[ri_23], res1_QE[ri_23], csvn_QE[ri_23], tcbh_QE[ri_23], tdih_QE[ri_23], rdata_QE[ri_23], res2_QE[ri_23], rms_without_mac_QE[ri_23], tcbi_QE[ri_23], smr_without_mac_QE[ri_23], res4_QE[ri_23], tdi_QE[ri_23], tdr_without_mac_QE[ri_23], sig_QE[ri_23], quote_QE[ri_23], m1_1[ri_23] in find at 32
    - Simplify pattern quote_t2bitstring(quote_Ch: quote_t) (tuple expanded), pattern injbot(quote_t2bitstring(quote_Ch: quote_t)) (tuple expanded) at 28
    - Simplify pattern quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) (tuple expanded) at 155
    - Test at 158 always true
    - Simplify pattern tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) (tuple expanded) at 166
    - Simplify pattern smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) (tuple expanded) at 169
    - Simplify pattern rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) (tuple expanded) at 172
    - Transformed find at 231 into a test
    - Replaced defined condition m1[ri_24], x1[ri_24] with rtyp_QE[ri_24], res1_QE[ri_24], csvn_QE[ri_24], tcbh_QE[ri_24], tdih_QE[ri_24], rdata_QE[ri_24], res2_QE[ri_24], rms_without_mac_QE[ri_24], tcbi_QE[ri_24], smr_without_mac_QE[ri_24], res4_QE[ri_24], tdi_QE[ri_24], tdr_without_mac_QE[ri_24], sig_QE[ri_24], quote_QE[ri_24], m1[ri_24] in find at 32
    - Simplify pattern injbot(quote_t2bitstring(quote_Ch: quote_t)) (tuple expanded) at 28
    - Transformed find at 231 into a test
yields

Game 27 is
      in(start, ());
      new r1: skeyseed;
      let spk1: spkey = spkgen(r1) in
      let ssk1: sskey = sskgen(r1) in
      new r2_3: keyseed;
      new r3_2: keyseed;
      new sym_key: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        let m_17: bitstring = m1_Ch in
        find u_25 = ri_25 <= qChallenger suchthat defined(m2_2[ri_25], y_2[ri_25], x_3[ri_25]) && (y_2[ri_25] = pkgen2_1(r2_3)) && (m_17 = m2_2[ri_25]) then
        (
          let quote_t2bitstring(quote_Ch: quote_t) = x_3[u_25] in
          let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
          if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
          let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
          let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
          let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
          event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_1: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            new r3_13: enc_seed;
            new r2_4: enc_seed;
            new session_key: key;
            let m_8: bitstring = key2bitstring(session_key) in
            let x_3: bitstring = m_8 in
            let y_2: pkey = x1_Ch in
            if y_2 = pkgen2_1(r2_3) then
            (
              let m2_2: bitstring = enc_r2(Z(x_3), y_2, r2_4) in
              let m2_Ch: bitstring = m2_2 in
              out(c23[i], m2_Ch)
            )
            else
              let m2_Ch: bitstring = enc_r(x_3, y_2, r3_13) in
              out(c23[i], m2_Ch)
        )
        orfind u_24 = ri_24 <= qQE suchthat defined(rtyp_QE[ri_24], res1_QE[ri_24], csvn_QE[ri_24], tcbh_QE[ri_24], tdih_QE[ri_24], rdata_QE[ri_24], res2_QE[ri_24], rms_without_mac_QE[ri_24], tcbi_QE[ri_24], smr_without_mac_QE[ri_24], res4_QE[ri_24], tdi_QE[ri_24], tdr_without_mac_QE[ri_24], sig_QE[ri_24], quote_QE[ri_24], m1[ri_24]) && (m_17 = m1[ri_24]) then
        (
          let quote_Ch: quote_t = quote_QE[u_24] in
          let sig_Ch: signature = sig_QE[u_24] in
          let tdr_without_mac_Ch: tdr_without_mac_t = tdr_without_mac_QE[u_24] in
          let tdi_Ch: tdi_t = tdi_QE[u_24] in
          let res4_Ch: res_t = res4_QE[u_24] in
          let smr_without_mac_Ch: smr_without_mac_t = smr_without_mac_QE[u_24] in
          let tcbi_Ch: tcbi_t = tcbi_QE[u_24] in
          let rms_without_mac_Ch: rms_without_mac_t = rms_without_mac_QE[u_24] in
          let res2_Ch: res_t = res2_QE[u_24] in
          let rdata_Ch: rdata_t = rdata_QE[u_24] in
          let tdih_Ch: hashoutput = tdih_QE[u_24] in
          let tcbh_Ch: hashoutput = tcbh_QE[u_24] in
          let csvn_Ch: csvn_t = csvn_QE[u_24] in
          let res1_Ch: res_t = res1_QE[u_24] in
          let rtyp_Ch: rtyp_t = rtyp_QE[u_24] in
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
          event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_1: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            new r3_13: enc_seed;
            new r2_4: enc_seed;
            new session_key: key;
            let m_8: bitstring = key2bitstring(session_key) in
            let x_3: bitstring = m_8 in
            let y_2: pkey = x1_Ch in
            if y_2 = pkgen2_1(r2_3) then
            (
              let m2_2: bitstring = enc_r2(Z(x_3), y_2, r2_4) in
              let m2_Ch: bitstring = m2_2 in
              out(c23[i], m2_Ch)
            )
            else
              let m2_Ch: bitstring = enc_r(x_3, y_2, r3_13) in
              out(c23[i], m2_Ch)
        )
        orfind u_23 = ri_23 <= qQE suchthat defined(rtyp_QE[ri_23], res1_QE[ri_23], csvn_QE[ri_23], tcbh_QE[ri_23], tdih_QE[ri_23], rdata_QE[ri_23], res2_QE[ri_23], rms_without_mac_QE[ri_23], tcbi_QE[ri_23], smr_without_mac_QE[ri_23], res4_QE[ri_23], tdi_QE[ri_23], tdr_without_mac_QE[ri_23], sig_QE[ri_23], quote_QE[ri_23], m1_1[ri_23]) && (m_17 = m1_1[ri_23]) then
        (
          let quote_Ch: quote_t = quote_QE[u_23] in
          let sig_Ch: signature = sig_QE[u_23] in
          let tdr_without_mac_Ch: tdr_without_mac_t = tdr_without_mac_QE[u_23] in
          let tdi_Ch: tdi_t = tdi_QE[u_23] in
          let res4_Ch: res_t = res4_QE[u_23] in
          let smr_without_mac_Ch: smr_without_mac_t = smr_without_mac_QE[u_23] in
          let tcbi_Ch: tcbi_t = tcbi_QE[u_23] in
          let rms_without_mac_Ch: rms_without_mac_t = rms_without_mac_QE[u_23] in
          let res2_Ch: res_t = res2_QE[u_23] in
          let rdata_Ch: rdata_t = rdata_QE[u_23] in
          let tdih_Ch: hashoutput = tdih_QE[u_23] in
          let tcbh_Ch: hashoutput = tcbh_QE[u_23] in
          let csvn_Ch: csvn_t = csvn_QE[u_23] in
          let res1_Ch: res_t = res1_QE[u_23] in
          let rtyp_Ch: rtyp_t = rtyp_QE[u_23] in
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
          event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_1: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            new r3_13: enc_seed;
            new r2_4: enc_seed;
            new session_key: key;
            let m_8: bitstring = key2bitstring(session_key) in
            let x_3: bitstring = m_8 in
            let y_2: pkey = x1_Ch in
            if y_2 = pkgen2_1(r2_3) then
            (
              let m2_2: bitstring = enc_r2(Z(x_3), y_2, r2_4) in
              let m2_Ch: bitstring = m2_2 in
              out(c23[i], m2_Ch)
            )
            else
              let m2_Ch: bitstring = enc_r(x_3, y_2, r3_13) in
              out(c23[i], m2_Ch)
        )
        orfind u_22 = ri_22 <= qQE suchthat defined(rtyp_QE[ri_22], res1_QE[ri_22], csvn_QE[ri_22], tcbh_QE[ri_22], tdih_QE[ri_22], rdata_QE[ri_22], res2_QE[ri_22], rms_without_mac_QE[ri_22], tcbi_QE[ri_22], smr_without_mac_QE[ri_22], res4_QE[ri_22], tdi_QE[ri_22], tdr_without_mac_QE[ri_22], sig_QE[ri_22], quote_QE[ri_22], m1_2[ri_22]) && (m_17 = m1_2[ri_22]) then
        (
          let quote_Ch: quote_t = quote_QE[u_22] in
          let sig_Ch: signature = sig_QE[u_22] in
          let tdr_without_mac_Ch: tdr_without_mac_t = tdr_without_mac_QE[u_22] in
          let tdi_Ch: tdi_t = tdi_QE[u_22] in
          let res4_Ch: res_t = res4_QE[u_22] in
          let smr_without_mac_Ch: smr_without_mac_t = smr_without_mac_QE[u_22] in
          let tcbi_Ch: tcbi_t = tcbi_QE[u_22] in
          let rms_without_mac_Ch: rms_without_mac_t = rms_without_mac_QE[u_22] in
          let res2_Ch: res_t = res2_QE[u_22] in
          let rdata_Ch: rdata_t = rdata_QE[u_22] in
          let tdih_Ch: hashoutput = tdih_QE[u_22] in
          let tcbh_Ch: hashoutput = tcbh_QE[u_22] in
          let csvn_Ch: csvn_t = csvn_QE[u_22] in
          let res1_Ch: res_t = res1_QE[u_22] in
          let rtyp_Ch: rtyp_t = rtyp_QE[u_22] in
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
          event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_1: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            new r3_13: enc_seed;
            new r2_4: enc_seed;
            new session_key: key;
            let m_8: bitstring = key2bitstring(session_key) in
            let x_3: bitstring = m_8 in
            let y_2: pkey = x1_Ch in
            if y_2 = pkgen2_1(r2_3) then
            (
              let m2_2: bitstring = enc_r2(Z(x_3), y_2, r2_4) in
              let m2_Ch: bitstring = m2_2 in
              out(c23[i], m2_Ch)
            )
            else
              let m2_Ch: bitstring = enc_r(x_3, y_2, r3_13) in
              out(c23[i], m2_Ch)
        )
        orfind u_21 = ri_21 <= qQE suchthat defined(rtyp_QE[ri_21], res1_QE[ri_21], csvn_QE[ri_21], tcbh_QE[ri_21], tdih_QE[ri_21], rdata_QE[ri_21], res2_QE[ri_21], rms_without_mac_QE[ri_21], tcbi_QE[ri_21], smr_without_mac_QE[ri_21], res4_QE[ri_21], tdi_QE[ri_21], tdr_without_mac_QE[ri_21], sig_QE[ri_21], quote_QE[ri_21], m1_3[ri_21]) && (m_17 = m1_3[ri_21]) then
        (
          let quote_Ch: quote_t = quote_QE[u_21] in
          let sig_Ch: signature = sig_QE[u_21] in
          let tdr_without_mac_Ch: tdr_without_mac_t = tdr_without_mac_QE[u_21] in
          let tdi_Ch: tdi_t = tdi_QE[u_21] in
          let res4_Ch: res_t = res4_QE[u_21] in
          let smr_without_mac_Ch: smr_without_mac_t = smr_without_mac_QE[u_21] in
          let tcbi_Ch: tcbi_t = tcbi_QE[u_21] in
          let rms_without_mac_Ch: rms_without_mac_t = rms_without_mac_QE[u_21] in
          let res2_Ch: res_t = res2_QE[u_21] in
          let rdata_Ch: rdata_t = rdata_QE[u_21] in
          let tdih_Ch: hashoutput = tdih_QE[u_21] in
          let tcbh_Ch: hashoutput = tcbh_QE[u_21] in
          let csvn_Ch: csvn_t = csvn_QE[u_21] in
          let res1_Ch: res_t = res1_QE[u_21] in
          let rtyp_Ch: rtyp_t = rtyp_QE[u_21] in
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
          event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_1: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            new r3_13: enc_seed;
            new r2_4: enc_seed;
            new session_key: key;
            let m_8: bitstring = key2bitstring(session_key) in
            let x_3: bitstring = m_8 in
            let y_2: pkey = x1_Ch in
            if y_2 = pkgen2_1(r2_3) then
            (
              let m2_2: bitstring = enc_r2(Z(x_3), y_2, r2_4) in
              let m2_Ch: bitstring = m2_2 in
              out(c23[i], m2_Ch)
            )
            else
              let m2_Ch: bitstring = enc_r(x_3, y_2, r3_13) in
              out(c23[i], m2_Ch)
        )
        orfind u_20 = ri_20 <= qQE suchthat defined(rtyp_QE[ri_20], res1_QE[ri_20], csvn_QE[ri_20], tcbh_QE[ri_20], tdih_QE[ri_20], rdata_QE[ri_20], res2_QE[ri_20], rms_without_mac_QE[ri_20], tcbi_QE[ri_20], smr_without_mac_QE[ri_20], res4_QE[ri_20], tdi_QE[ri_20], tdr_without_mac_QE[ri_20], sig_QE[ri_20], quote_QE[ri_20], m1_4[ri_20]) && (m_17 = m1_4[ri_20]) then
        (
          let quote_Ch: quote_t = quote_QE[u_20] in
          let sig_Ch: signature = sig_QE[u_20] in
          let tdr_without_mac_Ch: tdr_without_mac_t = tdr_without_mac_QE[u_20] in
          let tdi_Ch: tdi_t = tdi_QE[u_20] in
          let res4_Ch: res_t = res4_QE[u_20] in
          let smr_without_mac_Ch: smr_without_mac_t = smr_without_mac_QE[u_20] in
          let tcbi_Ch: tcbi_t = tcbi_QE[u_20] in
          let rms_without_mac_Ch: rms_without_mac_t = rms_without_mac_QE[u_20] in
          let res2_Ch: res_t = res2_QE[u_20] in
          let rdata_Ch: rdata_t = rdata_QE[u_20] in
          let tdih_Ch: hashoutput = tdih_QE[u_20] in
          let tcbh_Ch: hashoutput = tcbh_QE[u_20] in
          let csvn_Ch: csvn_t = csvn_QE[u_20] in
          let res1_Ch: res_t = res1_QE[u_20] in
          let rtyp_Ch: rtyp_t = rtyp_QE[u_20] in
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
          event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_1: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            new r3_13: enc_seed;
            new r2_4: enc_seed;
            new session_key: key;
            let m_8: bitstring = key2bitstring(session_key) in
            let x_3: bitstring = m_8 in
            let y_2: pkey = x1_Ch in
            if y_2 = pkgen2_1(r2_3) then
            (
              let m2_2: bitstring = enc_r2(Z(x_3), y_2, r2_4) in
              let m2_Ch: bitstring = m2_2 in
              out(c23[i], m2_Ch)
            )
            else
              let m2_Ch: bitstring = enc_r(x_3, y_2, r3_13) in
              out(c23[i], m2_Ch)
        )
        orfind u_19 = ri_19 <= qQE suchthat defined(rtyp_QE[ri_19], res1_QE[ri_19], csvn_QE[ri_19], tcbh_QE[ri_19], tdih_QE[ri_19], rdata_QE[ri_19], res2_QE[ri_19], rms_without_mac_QE[ri_19], tcbi_QE[ri_19], smr_without_mac_QE[ri_19], res4_QE[ri_19], tdi_QE[ri_19], tdr_without_mac_QE[ri_19], sig_QE[ri_19], quote_QE[ri_19], m1_5[ri_19]) && (m_17 = m1_5[ri_19]) then
        (
          let quote_Ch: quote_t = quote_QE[u_19] in
          let sig_Ch: signature = sig_QE[u_19] in
          let tdr_without_mac_Ch: tdr_without_mac_t = tdr_without_mac_QE[u_19] in
          let tdi_Ch: tdi_t = tdi_QE[u_19] in
          let res4_Ch: res_t = res4_QE[u_19] in
          let smr_without_mac_Ch: smr_without_mac_t = smr_without_mac_QE[u_19] in
          let tcbi_Ch: tcbi_t = tcbi_QE[u_19] in
          let rms_without_mac_Ch: rms_without_mac_t = rms_without_mac_QE[u_19] in
          let res2_Ch: res_t = res2_QE[u_19] in
          let rdata_Ch: rdata_t = rdata_QE[u_19] in
          let tdih_Ch: hashoutput = tdih_QE[u_19] in
          let tcbh_Ch: hashoutput = tcbh_QE[u_19] in
          let csvn_Ch: csvn_t = csvn_QE[u_19] in
          let res1_Ch: res_t = res1_QE[u_19] in
          let rtyp_Ch: rtyp_t = rtyp_QE[u_19] in
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
          event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_1: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            new r3_13: enc_seed;
            new r2_4: enc_seed;
            new session_key: key;
            let m_8: bitstring = key2bitstring(session_key) in
            let x_3: bitstring = m_8 in
            let y_2: pkey = x1_Ch in
            if y_2 = pkgen2_1(r2_3) then
            (
              let m2_2: bitstring = enc_r2(Z(x_3), y_2, r2_4) in
              let m2_Ch: bitstring = m2_2 in
              out(c23[i], m2_Ch)
            )
            else
              let m2_Ch: bitstring = enc_r(x_3, y_2, r3_13) in
              out(c23[i], m2_Ch)
        )
        orfind u_18 = ri_18 <= qQE suchthat defined(rtyp_QE[ri_18], res1_QE[ri_18], csvn_QE[ri_18], tcbh_QE[ri_18], tdih_QE[ri_18], rdata_QE[ri_18], res2_QE[ri_18], rms_without_mac_QE[ri_18], tcbi_QE[ri_18], smr_without_mac_QE[ri_18], res4_QE[ri_18], tdi_QE[ri_18], tdr_without_mac_QE[ri_18], sig_QE[ri_18], quote_QE[ri_18], m1_6[ri_18]) && (m_17 = m1_6[ri_18]) then
        (
          let quote_Ch: quote_t = quote_QE[u_18] in
          let sig_Ch: signature = sig_QE[u_18] in
          let tdr_without_mac_Ch: tdr_without_mac_t = tdr_without_mac_QE[u_18] in
          let tdi_Ch: tdi_t = tdi_QE[u_18] in
          let res4_Ch: res_t = res4_QE[u_18] in
          let smr_without_mac_Ch: smr_without_mac_t = smr_without_mac_QE[u_18] in
          let tcbi_Ch: tcbi_t = tcbi_QE[u_18] in
          let rms_without_mac_Ch: rms_without_mac_t = rms_without_mac_QE[u_18] in
          let res2_Ch: res_t = res2_QE[u_18] in
          let rdata_Ch: rdata_t = rdata_QE[u_18] in
          let tdih_Ch: hashoutput = tdih_QE[u_18] in
          let tcbh_Ch: hashoutput = tcbh_QE[u_18] in
          let csvn_Ch: csvn_t = csvn_QE[u_18] in
          let res1_Ch: res_t = res1_QE[u_18] in
          let rtyp_Ch: rtyp_t = rtyp_QE[u_18] in
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
          event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_1: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            new r3_13: enc_seed;
            new r2_4: enc_seed;
            new session_key: key;
            let m_8: bitstring = key2bitstring(session_key) in
            let x_3: bitstring = m_8 in
            let y_2: pkey = x1_Ch in
            if y_2 = pkgen2_1(r2_3) then
            (
              let m2_2: bitstring = enc_r2(Z(x_3), y_2, r2_4) in
              let m2_Ch: bitstring = m2_2 in
              out(c23[i], m2_Ch)
            )
            else
              let m2_Ch: bitstring = enc_r(x_3, y_2, r3_13) in
              out(c23[i], m2_Ch)
        )
        orfind u_17 = ri_17 <= qQE suchthat defined(rtyp_QE[ri_17], res1_QE[ri_17], csvn_QE[ri_17], tcbh_QE[ri_17], tdih_QE[ri_17], rdata_QE[ri_17], res2_QE[ri_17], rms_without_mac_QE[ri_17], tcbi_QE[ri_17], smr_without_mac_QE[ri_17], res4_QE[ri_17], tdi_QE[ri_17], tdr_without_mac_QE[ri_17], sig_QE[ri_17], quote_QE[ri_17], m1_7[ri_17]) && (m_17 = m1_7[ri_17]) then
        (
          let quote_Ch: quote_t = quote_QE[u_17] in
          let sig_Ch: signature = sig_QE[u_17] in
          let tdr_without_mac_Ch: tdr_without_mac_t = tdr_without_mac_QE[u_17] in
          let tdi_Ch: tdi_t = tdi_QE[u_17] in
          let res4_Ch: res_t = res4_QE[u_17] in
          let smr_without_mac_Ch: smr_without_mac_t = smr_without_mac_QE[u_17] in
          let tcbi_Ch: tcbi_t = tcbi_QE[u_17] in
          let rms_without_mac_Ch: rms_without_mac_t = rms_without_mac_QE[u_17] in
          let res2_Ch: res_t = res2_QE[u_17] in
          let rdata_Ch: rdata_t = rdata_QE[u_17] in
          let tdih_Ch: hashoutput = tdih_QE[u_17] in
          let tcbh_Ch: hashoutput = tcbh_QE[u_17] in
          let csvn_Ch: csvn_t = csvn_QE[u_17] in
          let res1_Ch: res_t = res1_QE[u_17] in
          let rtyp_Ch: rtyp_t = rtyp_QE[u_17] in
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
          event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_1: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            new r3_13: enc_seed;
            new r2_4: enc_seed;
            new session_key: key;
            let m_8: bitstring = key2bitstring(session_key) in
            let x_3: bitstring = m_8 in
            let y_2: pkey = x1_Ch in
            if y_2 = pkgen2_1(r2_3) then
            (
              let m2_2: bitstring = enc_r2(Z(x_3), y_2, r2_4) in
              let m2_Ch: bitstring = m2_2 in
              out(c23[i], m2_Ch)
            )
            else
              let m2_Ch: bitstring = enc_r(x_3, y_2, r3_13) in
              out(c23[i], m2_Ch)
        )
        orfind u_16 = ri_16 <= qQE suchthat defined(rtyp_QE[ri_16], res1_QE[ri_16], csvn_QE[ri_16], tcbh_QE[ri_16], tdih_QE[ri_16], rdata_QE[ri_16], res2_QE[ri_16], rms_without_mac_QE[ri_16], tcbi_QE[ri_16], smr_without_mac_QE[ri_16], res4_QE[ri_16], tdi_QE[ri_16], tdr_without_mac_QE[ri_16], sig_QE[ri_16], quote_QE[ri_16], m1_8[ri_16]) && (m_17 = m1_8[ri_16]) then
        (
          let quote_Ch: quote_t = quote_QE[u_16] in
          let sig_Ch: signature = sig_QE[u_16] in
          let tdr_without_mac_Ch: tdr_without_mac_t = tdr_without_mac_QE[u_16] in
          let tdi_Ch: tdi_t = tdi_QE[u_16] in
          let res4_Ch: res_t = res4_QE[u_16] in
          let smr_without_mac_Ch: smr_without_mac_t = smr_without_mac_QE[u_16] in
          let tcbi_Ch: tcbi_t = tcbi_QE[u_16] in
          let rms_without_mac_Ch: rms_without_mac_t = rms_without_mac_QE[u_16] in
          let res2_Ch: res_t = res2_QE[u_16] in
          let rdata_Ch: rdata_t = rdata_QE[u_16] in
          let tdih_Ch: hashoutput = tdih_QE[u_16] in
          let tcbh_Ch: hashoutput = tcbh_QE[u_16] in
          let csvn_Ch: csvn_t = csvn_QE[u_16] in
          let res1_Ch: res_t = res1_QE[u_16] in
          let rtyp_Ch: rtyp_t = rtyp_QE[u_16] in
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
          event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_1: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            new r3_13: enc_seed;
            new r2_4: enc_seed;
            new session_key: key;
            let m_8: bitstring = key2bitstring(session_key) in
            let x_3: bitstring = m_8 in
            let y_2: pkey = x1_Ch in
            if y_2 = pkgen2_1(r2_3) then
            (
              let m2_2: bitstring = enc_r2(Z(x_3), y_2, r2_4) in
              let m2_Ch: bitstring = m2_2 in
              out(c23[i], m2_Ch)
            )
            else
              let m2_Ch: bitstring = enc_r(x_3, y_2, r3_13) in
              out(c23[i], m2_Ch)
        )
        else
          let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec2(m_17, skgen2_1(r2_3)) in
          let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
          if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
          let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
          let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
          let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
          event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_1: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            new r3_13: enc_seed;
            new r2_4: enc_seed;
            new session_key: key;
            let m_8: bitstring = key2bitstring(session_key) in
            let x_3: bitstring = m_8 in
            let y_2: pkey = x1_Ch in
            if y_2 = pkgen2_1(r2_3) then
            (
              let m2_2: bitstring = enc_r2(Z(x_3), y_2, r2_4) in
              let m2_Ch: bitstring = m2_2 in
              out(c23[i], m2_Ch)
            )
            else
              let m2_Ch: bitstring = enc_r(x_3, y_2, r3_13) in
              out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        find [unique] u_15 = ri_15 <= qH suchthat defined(r_16[ri_15], x1_1[ri_15]) && (x1_1 = x1_1[ri_15]) then
          out(ch2[iH], r_16[u_15])
        orfind u_14 = ri_14 <= qTDXM suchthat defined(x_O_1[ri_14], r_17[ri_14]) && (x1_1 = x_O_1[ri_14]) then
          out(ch2[iH], r_17[u_14])
        orfind u_13 = ri_13 <= qCPU suchthat defined(x_O_2[ri_13], r_18[ri_13]) && (x1_1 = x_O_2[ri_13]) then
          out(ch2[iH], r_18[u_13])
        else
          new r_16: hashoutput;
          out(ch2[iH], r_16)
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pkgen2_1(r3_2), rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        let tdi_TDXM: tdi_t = get_tdi in
        let x_O_1: bitstring = tdi_t2bitstring(tdi_TDXM) in
        find [unique] u_12 = ri_12 <= qH suchthat defined(r_16[ri_12], x1_1[ri_12]) && (x_O_1 = x1_1[ri_12]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_16[u_12], rdata_TDXM) in
          new r_38: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_38) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_39: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_39) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_11 = ri_11 <= qTDXM suchthat defined(r_17[ri_11]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17[u_11], rdata_TDXM) in
          new r_40: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_40) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_41: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_41) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_10 = ri_10 <= qCPU suchthat defined(x_O_2[ri_10], r_18[ri_10]) && (x_O_1 = x_O_2[ri_10]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_18[u_10], rdata_TDXM) in
          new r_42: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_42) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_43: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_43) in
          out(c11[i_2], m4_TDXM)
        )
        else
          new r_17: hashoutput;
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17, rdata_TDXM) in
          new r_36: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_36) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_37: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_37) in
          out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        let tcbi_CPU: tcbi_t = get_tcbi in
        let x_O_2: bitstring = tcbi_t2bitstring(tcbi_CPU) in
        find [unique] u_9 = ri_9 <= qH suchthat defined(r_16[ri_9], x1_1[ri_9]) && (x_O_2 = x1_1[ri_9]) then
        (
          let res2_CPU: res_t = get_res in
          let res1_CPU: res_t = get_res in
          let csvn_CPU: csvn_t = get_csvn in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_16[u_9], tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_16[u_9], tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_30: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_30) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_31: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_31) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_8 = ri_8 <= qTDXM suchthat defined(x_O_1[ri_8], r_17[ri_8]) && (x_O_2 = x_O_1[ri_8]) then
        (
          let res2_CPU: res_t = get_res in
          let res1_CPU: res_t = get_res in
          let csvn_CPU: csvn_t = get_csvn in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_17[u_8], tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_17[u_8], tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_32: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_32) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_33: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_33) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_7 = ri_7 <= qCPU suchthat defined(r_18[ri_7]) then
        (
          let res2_CPU: res_t = get_res in
          let res1_CPU: res_t = get_res in
          let csvn_CPU: csvn_t = get_csvn in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_18[u_7], tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_18[u_7], tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_34: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_34) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_35: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_35) in
          out(c17[i_3], m4_CPU)
        )
        else
          new r_18: hashoutput;
          let res2_CPU: res_t = get_res in
          let res1_CPU: res_t = get_res in
          let csvn_CPU: csvn_t = get_csvn in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_18, tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_18, tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_28: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_28) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_29: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_29) in
          out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        let x_Oeq_1: bitstring = tcbi_t2bitstring(tcbi_QE) in
        find [unique] u_3 = ri_3 <= qH suchthat defined(r_16[ri_3], x1_1[ri_3]) && (x_Oeq_1 = x1_1[ri_3]) then
        (
          let x_Oeq: bitstring = tdi_t2bitstring(tdi_QE) in
          find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_Oeq = x1_1[ri_6]) then
          (
            if (tcbh_QE = r_16[u_3]) && (tdih_QE = r_16[u_6]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_19: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_19) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_14: enc_seed;
            let x1: bitstring = m_15 in
            let m1: bitstring = enc_r2(Z(x1), pkgen2_1(r2_3), r3_14) in
            let m3_QE: bitstring = m1 in
            out(c19[i_4], m3_QE)
          )
          orfind u_5 = ri_5 <= qTDXM suchthat defined(r_17[ri_5], tdi_TDXM[ri_5]) && (tdi_QE = tdi_TDXM[ri_5]) then
          (
            if (tcbh_QE = r_16[u_3]) && (tdih_QE = r_17[u_5]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_20: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_20) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_15: enc_seed;
            let x1_2: bitstring = m_15 in
            let m1_1: bitstring = enc_r2(Z(x1_2), pkgen2_1(r2_3), r3_15) in
            let m3_QE: bitstring = m1_1 in
            out(c19[i_4], m3_QE)
          )
          orfind u_4 = ri_4 <= qCPU suchthat defined(r_18[ri_4], x_O_2[ri_4]) && (x_Oeq = x_O_2[ri_4]) then
          (
            if (tcbh_QE = r_16[u_3]) && (tdih_QE = r_18[u_4]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_21: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_21) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_16: enc_seed;
            let x1_3: bitstring = m_15 in
            let m1_2: bitstring = enc_r2(Z(x1_3), pkgen2_1(r2_3), r3_16) in
            let m3_QE: bitstring = m1_2 in
            out(c19[i_4], m3_QE)
          )
        )
        orfind u_2 = ri_2 <= qTDXM suchthat defined(x_O_1[ri_2], r_17[ri_2]) && (x_Oeq_1 = x_O_1[ri_2]) then
        (
          let x_Oeq: bitstring = tdi_t2bitstring(tdi_QE) in
          find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_Oeq = x1_1[ri_6]) then
          (
            if (tcbh_QE = r_17[u_2]) && (tdih_QE = r_16[u_6]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_22: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_22) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_17: enc_seed;
            let x1_4: bitstring = m_15 in
            let m1_3: bitstring = enc_r2(Z(x1_4), pkgen2_1(r2_3), r3_17) in
            let m3_QE: bitstring = m1_3 in
            out(c19[i_4], m3_QE)
          )
          orfind  suchthat x_Oeq = x_O_1[u_2] then
          (
            if (tcbh_QE = r_17[u_2]) && (tdih_QE = r_17[u_2]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_23: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_23) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_18: enc_seed;
            let x1_5: bitstring = m_15 in
            let m1_4: bitstring = enc_r2(Z(x1_5), pkgen2_1(r2_3), r3_18) in
            let m3_QE: bitstring = m1_4 in
            out(c19[i_4], m3_QE)
          )
          orfind u_4 = ri_4 <= qCPU suchthat defined(r_18[ri_4], x_O_2[ri_4]) && (x_Oeq = x_O_2[ri_4]) then
          (
            if (tcbh_QE = r_17[u_2]) && (tdih_QE = r_18[u_4]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_24: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_24) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_19: enc_seed;
            let x1_6: bitstring = m_15 in
            let m1_5: bitstring = enc_r2(Z(x1_6), pkgen2_1(r2_3), r3_19) in
            let m3_QE: bitstring = m1_5 in
            out(c19[i_4], m3_QE)
          )
        )
        orfind u_1 = ri_1 <= qCPU suchthat defined(x_O_2[ri_1], r_18[ri_1], tcbi_CPU[ri_1]) && (tcbi_QE = tcbi_CPU[ri_1]) then
        (
          let x_Oeq: bitstring = tdi_t2bitstring(tdi_QE) in
          find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_Oeq = x1_1[ri_6]) then
          (
            if (tcbh_QE = r_18[u_1]) && (tdih_QE = r_16[u_6]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_25: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_25) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_20: enc_seed;
            let x1_7: bitstring = m_15 in
            let m1_6: bitstring = enc_r2(Z(x1_7), pkgen2_1(r2_3), r3_20) in
            let m3_QE: bitstring = m1_6 in
            out(c19[i_4], m3_QE)
          )
          orfind u_5 = ri_5 <= qTDXM suchthat defined(r_17[ri_5], tdi_TDXM[ri_5]) && (tdi_QE = tdi_TDXM[ri_5]) then
          (
            if (tcbh_QE = r_18[u_1]) && (tdih_QE = r_17[u_5]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_26: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_26) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_21: enc_seed;
            let x1_8: bitstring = m_15 in
            let m1_7: bitstring = enc_r2(Z(x1_8), pkgen2_1(r2_3), r3_21) in
            let m3_QE: bitstring = m1_7 in
            out(c19[i_4], m3_QE)
          )
          orfind  suchthat x_Oeq = x_O_2[u_1] then
          (
            if (tcbh_QE = r_18[u_1]) && (tdih_QE = r_18[u_1]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_27: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_27) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_22: enc_seed;
            let x1_9: bitstring = m_15 in
            let m1_8: bitstring = enc_r2(Z(x1_9), pkgen2_1(r2_3), r3_22) in
            let m3_QE: bitstring = m1_8 in
            out(c19[i_4], m3_QE)
          )
        )
      ))


Applying remove assignments of findcond
  - Remove assignments on x1 (definition removed, all usages removed)
  - Remove assignments on m3_QE (definition removed, all usages removed)
  - Remove assignments on x1_2 (definition removed, all usages removed)
  - Remove assignments on m3_QE (definition removed, all usages removed)
  - Remove assignments on x1_3 (definition removed, all usages removed)
  - Remove assignments on m3_QE (definition removed, all usages removed)
  - Remove assignments on x1_4 (definition removed, all usages removed)
  - Remove assignments on m3_QE (definition removed, all usages removed)
  - Remove assignments on x1_5 (definition removed, all usages removed)
  - Remove assignments on m3_QE (definition removed, all usages removed)
  - Remove assignments on x1_6 (definition removed, all usages removed)
  - Remove assignments on m3_QE (definition removed, all usages removed)
  - Remove assignments on x1_7 (definition removed, all usages removed)
  - Remove assignments on m3_QE (definition removed, all usages removed)
  - Remove assignments on x1_8 (definition removed, all usages removed)
  - Remove assignments on m3_QE (definition removed, all usages removed)
  - Remove assignments on x1_9 (definition removed, all usages removed)
  - Remove assignments on m3_QE (definition removed, all usages removed)
  - Remove assignments on m_17 (definition removed, all usages removed)
  - Remove assignments on m2_Ch (definition removed, all usages removed)
  - Remove assignments on y_2 (definition kept, array references kept)
  - Remove assignments on x_3 (definition kept, array references kept)
  - Remove assignments on m2_Ch (definition removed, all usages removed)
  - Remove assignments on y_2 (definition kept, array references kept)
  - Remove assignments on x_3 (definition kept, array references kept)
  - Remove assignments on quote_Ch (definition removed, all usages removed)
  - Remove assignments on sig_Ch (definition removed, all usages removed)
  - Remove assignments on tdr_without_mac_Ch (definition removed, all usages removed)
  - Remove assignments on tdi_Ch (definition removed, all usages removed)
  - Remove assignments on res4_Ch (definition removed, all usages removed)
  - Remove assignments on smr_without_mac_Ch (definition removed, all usages removed)
  - Remove assignments on tcbi_Ch (definition removed, all usages removed)
  - Remove assignments on rms_without_mac_Ch (definition removed, all usages removed)
  - Remove assignments on res2_Ch (definition removed, all usages removed)
  - Remove assignments on rdata_Ch (definition removed, all usages removed)
  - Remove assignments on tdih_Ch (definition removed, all usages removed)
  - Remove assignments on tcbh_Ch (definition removed, all usages removed)
  - Remove assignments on csvn_Ch (definition removed, all usages removed)
  - Remove assignments on res1_Ch (definition removed, all usages removed)
  - Remove assignments on rtyp_Ch (definition removed, all usages removed)
  - Remove assignments on m2_Ch (definition removed, all usages removed)
  - Remove assignments on y_2 (definition kept, array references kept)
  - Remove assignments on x_3 (definition kept, array references kept)
  - Remove assignments on quote_Ch (definition removed, all usages removed)
  - Remove assignments on sig_Ch (definition removed, all usages removed)
  - Remove assignments on tdr_without_mac_Ch (definition removed, all usages removed)
  - Remove assignments on tdi_Ch (definition removed, all usages removed)
  - Remove assignments on res4_Ch (definition removed, all usages removed)
  - Remove assignments on smr_without_mac_Ch (definition removed, all usages removed)
  - Remove assignments on tcbi_Ch (definition removed, all usages removed)
  - Remove assignments on rms_without_mac_Ch (definition removed, all usages removed)
  - Remove assignments on res2_Ch (definition removed, all usages removed)
  - Remove assignments on rdata_Ch (definition removed, all usages removed)
  - Remove assignments on tdih_Ch (definition removed, all usages removed)
  - Remove assignments on tcbh_Ch (definition removed, all usages removed)
  - Remove assignments on csvn_Ch (definition removed, all usages removed)
  - Remove assignments on res1_Ch (definition removed, all usages removed)
  - Remove assignments on rtyp_Ch (definition removed, all usages removed)
  - Remove assignments on m2_Ch (definition removed, all usages removed)
  - Remove assignments on y_2 (definition kept, array references kept)
  - Remove assignments on x_3 (definition kept, array references kept)
  - Remove assignments on quote_Ch (definition removed, all usages removed)
  - Remove assignments on sig_Ch (definition removed, all usages removed)
  - Remove assignments on tdr_without_mac_Ch (definition removed, all usages removed)
  - Remove assignments on tdi_Ch (definition removed, all usages removed)
  - Remove assignments on res4_Ch (definition removed, all usages removed)
  - Remove assignments on smr_without_mac_Ch (definition removed, all usages removed)
  - Remove assignments on tcbi_Ch (definition removed, all usages removed)
  - Remove assignments on rms_without_mac_Ch (definition removed, all usages removed)
  - Remove assignments on res2_Ch (definition removed, all usages removed)
  - Remove assignments on rdata_Ch (definition removed, all usages removed)
  - Remove assignments on tdih_Ch (definition removed, all usages removed)
  - Remove assignments on tcbh_Ch (definition removed, all usages removed)
  - Remove assignments on csvn_Ch (definition removed, all usages removed)
  - Remove assignments on res1_Ch (definition removed, all usages removed)
  - Remove assignments on rtyp_Ch (definition removed, all usages removed)
  - Remove assignments on m2_Ch (definition removed, all usages removed)
  - Remove assignments on y_2 (definition kept, array references kept)
  - Remove assignments on x_3 (definition kept, array references kept)
  - Remove assignments on quote_Ch (definition removed, all usages removed)
  - Remove assignments on sig_Ch (definition removed, all usages removed)
  - Remove assignments on tdr_without_mac_Ch (definition removed, all usages removed)
  - Remove assignments on tdi_Ch (definition removed, all usages removed)
  - Remove assignments on res4_Ch (definition removed, all usages removed)
  - Remove assignments on smr_without_mac_Ch (definition removed, all usages removed)
  - Remove assignments on tcbi_Ch (definition removed, all usages removed)
  - Remove assignments on rms_without_mac_Ch (definition removed, all usages removed)
  - Remove assignments on res2_Ch (definition removed, all usages removed)
  - Remove assignments on rdata_Ch (definition removed, all usages removed)
  - Remove assignments on tdih_Ch (definition removed, all usages removed)
  - Remove assignments on tcbh_Ch (definition removed, all usages removed)
  - Remove assignments on csvn_Ch (definition removed, all usages removed)
  - Remove assignments on res1_Ch (definition removed, all usages removed)
  - Remove assignments on rtyp_Ch (definition removed, all usages removed)
  - Remove assignments on m2_Ch (definition removed, all usages removed)
  - Remove assignments on y_2 (definition kept, array references kept)
  - Remove assignments on x_3 (definition kept, array references kept)
  - Remove assignments on quote_Ch (definition removed, all usages removed)
  - Remove assignments on sig_Ch (definition removed, all usages removed)
  - Remove assignments on tdr_without_mac_Ch (definition removed, all usages removed)
  - Remove assignments on tdi_Ch (definition removed, all usages removed)
  - Remove assignments on res4_Ch (definition removed, all usages removed)
  - Remove assignments on smr_without_mac_Ch (definition removed, all usages removed)
  - Remove assignments on tcbi_Ch (definition removed, all usages removed)
  - Remove assignments on rms_without_mac_Ch (definition removed, all usages removed)
  - Remove assignments on res2_Ch (definition removed, all usages removed)
  - Remove assignments on rdata_Ch (definition removed, all usages removed)
  - Remove assignments on tdih_Ch (definition removed, all usages removed)
  - Remove assignments on tcbh_Ch (definition removed, all usages removed)
  - Remove assignments on csvn_Ch (definition removed, all usages removed)
  - Remove assignments on res1_Ch (definition removed, all usages removed)
  - Remove assignments on rtyp_Ch (definition removed, all usages removed)
  - Remove assignments on m2_Ch (definition removed, all usages removed)
  - Remove assignments on y_2 (definition kept, array references kept)
  - Remove assignments on x_3 (definition kept, array references kept)
  - Remove assignments on quote_Ch (definition removed, all usages removed)
  - Remove assignments on sig_Ch (definition removed, all usages removed)
  - Remove assignments on tdr_without_mac_Ch (definition removed, all usages removed)
  - Remove assignments on tdi_Ch (definition removed, all usages removed)
  - Remove assignments on res4_Ch (definition removed, all usages removed)
  - Remove assignments on smr_without_mac_Ch (definition removed, all usages removed)
  - Remove assignments on tcbi_Ch (definition removed, all usages removed)
  - Remove assignments on rms_without_mac_Ch (definition removed, all usages removed)
  - Remove assignments on res2_Ch (definition removed, all usages removed)
  - Remove assignments on rdata_Ch (definition removed, all usages removed)
  - Remove assignments on tdih_Ch (definition removed, all usages removed)
  - Remove assignments on tcbh_Ch (definition removed, all usages removed)
  - Remove assignments on csvn_Ch (definition removed, all usages removed)
  - Remove assignments on res1_Ch (definition removed, all usages removed)
  - Remove assignments on rtyp_Ch (definition removed, all usages removed)
  - Remove assignments on m2_Ch (definition removed, all usages removed)
  - Remove assignments on y_2 (definition kept, array references kept)
  - Remove assignments on x_3 (definition kept, array references kept)
  - Remove assignments on quote_Ch (definition removed, all usages removed)
  - Remove assignments on sig_Ch (definition removed, all usages removed)
  - Remove assignments on tdr_without_mac_Ch (definition removed, all usages removed)
  - Remove assignments on tdi_Ch (definition removed, all usages removed)
  - Remove assignments on res4_Ch (definition removed, all usages removed)
  - Remove assignments on smr_without_mac_Ch (definition removed, all usages removed)
  - Remove assignments on tcbi_Ch (definition removed, all usages removed)
  - Remove assignments on rms_without_mac_Ch (definition removed, all usages removed)
  - Remove assignments on res2_Ch (definition removed, all usages removed)
  - Remove assignments on rdata_Ch (definition removed, all usages removed)
  - Remove assignments on tdih_Ch (definition removed, all usages removed)
  - Remove assignments on tcbh_Ch (definition removed, all usages removed)
  - Remove assignments on csvn_Ch (definition removed, all usages removed)
  - Remove assignments on res1_Ch (definition removed, all usages removed)
  - Remove assignments on rtyp_Ch (definition removed, all usages removed)
  - Remove assignments on m2_Ch (definition removed, all usages removed)
  - Remove assignments on y_2 (definition kept, array references kept)
  - Remove assignments on x_3 (definition kept, array references kept)
  - Remove assignments on quote_Ch (definition removed, all usages removed)
  - Remove assignments on sig_Ch (definition removed, all usages removed)
  - Remove assignments on tdr_without_mac_Ch (definition removed, all usages removed)
  - Remove assignments on tdi_Ch (definition removed, all usages removed)
  - Remove assignments on res4_Ch (definition removed, all usages removed)
  - Remove assignments on smr_without_mac_Ch (definition removed, all usages removed)
  - Remove assignments on tcbi_Ch (definition removed, all usages removed)
  - Remove assignments on rms_without_mac_Ch (definition removed, all usages removed)
  - Remove assignments on res2_Ch (definition removed, all usages removed)
  - Remove assignments on rdata_Ch (definition removed, all usages removed)
  - Remove assignments on tdih_Ch (definition removed, all usages removed)
  - Remove assignments on tcbh_Ch (definition removed, all usages removed)
  - Remove assignments on csvn_Ch (definition removed, all usages removed)
  - Remove assignments on res1_Ch (definition removed, all usages removed)
  - Remove assignments on rtyp_Ch (definition removed, all usages removed)
  - Remove assignments on m2_Ch (definition removed, all usages removed)
  - Remove assignments on y_2 (definition kept, array references kept)
  - Remove assignments on x_3 (definition kept, array references kept)
  - Remove assignments on quote_Ch (definition removed, all usages removed)
  - Remove assignments on sig_Ch (definition removed, all usages removed)
  - Remove assignments on tdr_without_mac_Ch (definition removed, all usages removed)
  - Remove assignments on tdi_Ch (definition removed, all usages removed)
  - Remove assignments on res4_Ch (definition removed, all usages removed)
  - Remove assignments on smr_without_mac_Ch (definition removed, all usages removed)
  - Remove assignments on tcbi_Ch (definition removed, all usages removed)
  - Remove assignments on rms_without_mac_Ch (definition removed, all usages removed)
  - Remove assignments on res2_Ch (definition removed, all usages removed)
  - Remove assignments on rdata_Ch (definition removed, all usages removed)
  - Remove assignments on tdih_Ch (definition removed, all usages removed)
  - Remove assignments on tcbh_Ch (definition removed, all usages removed)
  - Remove assignments on csvn_Ch (definition removed, all usages removed)
  - Remove assignments on res1_Ch (definition removed, all usages removed)
  - Remove assignments on rtyp_Ch (definition removed, all usages removed)
  - Remove assignments on m2_Ch (definition removed, all usages removed)
  - Remove assignments on y_2 (definition kept, array references kept)
  - Remove assignments on x_3 (definition kept, array references kept)
yields

Game 28 is
      in(start, ());
      new r1: skeyseed;
      let spk1: spkey = spkgen(r1) in
      let ssk1: sskey = sskgen(r1) in
      new r2_3: keyseed;
      new r3_2: keyseed;
      new sym_key: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
  {28}  find u_25 = ri_25 <= qChallenger suchthat defined(m2_2[ri_25], y_2[ri_25], x_3[ri_25]) && {32}((y_2[ri_25] = pkgen2_1(r2_3)) && (m1_Ch = m2_2[ri_25])) then
        (
          let quote_t2bitstring(quote_Ch: quote_t) = {44}x_3[u_25] in
          let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
          if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
          let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
          let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
          let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
          event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_1: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            new r3_13: enc_seed;
            new r2_4: enc_seed;
            new session_key: key;
            let m_8: bitstring = key2bitstring(session_key) in
            let x_3: bitstring = m_8 in
            let y_2: pkey = x1_Ch in
            if x1_Ch = pkgen2_1(r2_3) then
            (
              let m2_2: bitstring = {129}enc_r2(Z(m_8), x1_Ch, r2_4) in
              out(c23[i], m2_2)
            )
            else
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_13) in
              out(c23[i], m2_Ch)
        )
        orfind u_24 = ri_24 <= qQE suchthat defined(rtyp_QE[ri_24], res1_QE[ri_24], csvn_QE[ri_24], tcbh_QE[ri_24], tdih_QE[ri_24], rdata_QE[ri_24], res2_QE[ri_24], rms_without_mac_QE[ri_24], tcbi_QE[ri_24], smr_without_mac_QE[ri_24], res4_QE[ri_24], tdi_QE[ri_24], tdr_without_mac_QE[ri_24], sig_QE[ri_24], quote_QE[ri_24], m1[ri_24]) && (m1_Ch = m1[ri_24]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_24] in
          event QuoteVerified(rtyp_QE[u_24], res1_QE[u_24], csvn_QE[u_24], tcbh_QE[u_24], tdih_QE[u_24], rdata_QE[u_24], res2_QE[u_24]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_1: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            new r3_13: enc_seed;
            new r2_4: enc_seed;
            new session_key: key;
            let m_8: bitstring = key2bitstring(session_key) in
            let x_3: bitstring = m_8 in
            let y_2: pkey = x1_Ch in
            if x1_Ch = pkgen2_1(r2_3) then
            (
              let m2_2: bitstring = {258}enc_r2(Z(m_8), x1_Ch, r2_4) in
              out(c23[i], m2_2)
            )
            else
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_13) in
              out(c23[i], m2_Ch)
        )
        orfind u_23 = ri_23 <= qQE suchthat defined(rtyp_QE[ri_23], res1_QE[ri_23], csvn_QE[ri_23], tcbh_QE[ri_23], tdih_QE[ri_23], rdata_QE[ri_23], res2_QE[ri_23], rms_without_mac_QE[ri_23], tcbi_QE[ri_23], smr_without_mac_QE[ri_23], res4_QE[ri_23], tdi_QE[ri_23], tdr_without_mac_QE[ri_23], sig_QE[ri_23], quote_QE[ri_23], m1_1[ri_23]) && (m1_Ch = m1_1[ri_23]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_23] in
          event QuoteVerified(rtyp_QE[u_23], res1_QE[u_23], csvn_QE[u_23], tcbh_QE[u_23], tdih_QE[u_23], rdata_QE[u_23], res2_QE[u_23]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_1: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            new r3_13: enc_seed;
            new r2_4: enc_seed;
            new session_key: key;
            let m_8: bitstring = key2bitstring(session_key) in
            let x_3: bitstring = m_8 in
            let y_2: pkey = x1_Ch in
            if x1_Ch = pkgen2_1(r2_3) then
            (
              let m2_2: bitstring = {381}enc_r2(Z(m_8), x1_Ch, r2_4) in
              out(c23[i], m2_2)
            )
            else
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_13) in
              out(c23[i], m2_Ch)
        )
        orfind u_22 = ri_22 <= qQE suchthat defined(rtyp_QE[ri_22], res1_QE[ri_22], csvn_QE[ri_22], tcbh_QE[ri_22], tdih_QE[ri_22], rdata_QE[ri_22], res2_QE[ri_22], rms_without_mac_QE[ri_22], tcbi_QE[ri_22], smr_without_mac_QE[ri_22], res4_QE[ri_22], tdi_QE[ri_22], tdr_without_mac_QE[ri_22], sig_QE[ri_22], quote_QE[ri_22], m1_2[ri_22]) && (m1_Ch = m1_2[ri_22]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_22] in
          event QuoteVerified(rtyp_QE[u_22], res1_QE[u_22], csvn_QE[u_22], tcbh_QE[u_22], tdih_QE[u_22], rdata_QE[u_22], res2_QE[u_22]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_1: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            new r3_13: enc_seed;
            new r2_4: enc_seed;
            new session_key: key;
            let m_8: bitstring = key2bitstring(session_key) in
            let x_3: bitstring = m_8 in
            let y_2: pkey = x1_Ch in
            if x1_Ch = pkgen2_1(r2_3) then
            (
              let m2_2: bitstring = {504}enc_r2(Z(m_8), x1_Ch, r2_4) in
              out(c23[i], m2_2)
            )
            else
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_13) in
              out(c23[i], m2_Ch)
        )
        orfind u_21 = ri_21 <= qQE suchthat defined(rtyp_QE[ri_21], res1_QE[ri_21], csvn_QE[ri_21], tcbh_QE[ri_21], tdih_QE[ri_21], rdata_QE[ri_21], res2_QE[ri_21], rms_without_mac_QE[ri_21], tcbi_QE[ri_21], smr_without_mac_QE[ri_21], res4_QE[ri_21], tdi_QE[ri_21], tdr_without_mac_QE[ri_21], sig_QE[ri_21], quote_QE[ri_21], m1_3[ri_21]) && (m1_Ch = m1_3[ri_21]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_21] in
          event QuoteVerified(rtyp_QE[u_21], res1_QE[u_21], csvn_QE[u_21], tcbh_QE[u_21], tdih_QE[u_21], rdata_QE[u_21], res2_QE[u_21]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_1: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            new r3_13: enc_seed;
            new r2_4: enc_seed;
            new session_key: key;
            let m_8: bitstring = key2bitstring(session_key) in
            let x_3: bitstring = m_8 in
            let y_2: pkey = x1_Ch in
            if x1_Ch = pkgen2_1(r2_3) then
            (
              let m2_2: bitstring = {627}enc_r2(Z(m_8), x1_Ch, r2_4) in
              out(c23[i], m2_2)
            )
            else
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_13) in
              out(c23[i], m2_Ch)
        )
        orfind u_20 = ri_20 <= qQE suchthat defined(rtyp_QE[ri_20], res1_QE[ri_20], csvn_QE[ri_20], tcbh_QE[ri_20], tdih_QE[ri_20], rdata_QE[ri_20], res2_QE[ri_20], rms_without_mac_QE[ri_20], tcbi_QE[ri_20], smr_without_mac_QE[ri_20], res4_QE[ri_20], tdi_QE[ri_20], tdr_without_mac_QE[ri_20], sig_QE[ri_20], quote_QE[ri_20], m1_4[ri_20]) && (m1_Ch = m1_4[ri_20]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_20] in
          event QuoteVerified(rtyp_QE[u_20], res1_QE[u_20], csvn_QE[u_20], tcbh_QE[u_20], tdih_QE[u_20], rdata_QE[u_20], res2_QE[u_20]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_1: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            new r3_13: enc_seed;
            new r2_4: enc_seed;
            new session_key: key;
            let m_8: bitstring = key2bitstring(session_key) in
            let x_3: bitstring = m_8 in
            let y_2: pkey = x1_Ch in
            if x1_Ch = pkgen2_1(r2_3) then
            (
              let m2_2: bitstring = {750}enc_r2(Z(m_8), x1_Ch, r2_4) in
              out(c23[i], m2_2)
            )
            else
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_13) in
              out(c23[i], m2_Ch)
        )
        orfind u_19 = ri_19 <= qQE suchthat defined(rtyp_QE[ri_19], res1_QE[ri_19], csvn_QE[ri_19], tcbh_QE[ri_19], tdih_QE[ri_19], rdata_QE[ri_19], res2_QE[ri_19], rms_without_mac_QE[ri_19], tcbi_QE[ri_19], smr_without_mac_QE[ri_19], res4_QE[ri_19], tdi_QE[ri_19], tdr_without_mac_QE[ri_19], sig_QE[ri_19], quote_QE[ri_19], m1_5[ri_19]) && (m1_Ch = m1_5[ri_19]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_19] in
          event QuoteVerified(rtyp_QE[u_19], res1_QE[u_19], csvn_QE[u_19], tcbh_QE[u_19], tdih_QE[u_19], rdata_QE[u_19], res2_QE[u_19]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_1: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            new r3_13: enc_seed;
            new r2_4: enc_seed;
            new session_key: key;
            let m_8: bitstring = key2bitstring(session_key) in
            let x_3: bitstring = m_8 in
            let y_2: pkey = x1_Ch in
            if x1_Ch = pkgen2_1(r2_3) then
            (
              let m2_2: bitstring = {873}enc_r2(Z(m_8), x1_Ch, r2_4) in
              out(c23[i], m2_2)
            )
            else
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_13) in
              out(c23[i], m2_Ch)
        )
        orfind u_18 = ri_18 <= qQE suchthat defined(rtyp_QE[ri_18], res1_QE[ri_18], csvn_QE[ri_18], tcbh_QE[ri_18], tdih_QE[ri_18], rdata_QE[ri_18], res2_QE[ri_18], rms_without_mac_QE[ri_18], tcbi_QE[ri_18], smr_without_mac_QE[ri_18], res4_QE[ri_18], tdi_QE[ri_18], tdr_without_mac_QE[ri_18], sig_QE[ri_18], quote_QE[ri_18], m1_6[ri_18]) && (m1_Ch = m1_6[ri_18]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_18] in
          event QuoteVerified(rtyp_QE[u_18], res1_QE[u_18], csvn_QE[u_18], tcbh_QE[u_18], tdih_QE[u_18], rdata_QE[u_18], res2_QE[u_18]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_1: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            new r3_13: enc_seed;
            new r2_4: enc_seed;
            new session_key: key;
            let m_8: bitstring = key2bitstring(session_key) in
            let x_3: bitstring = m_8 in
            let y_2: pkey = x1_Ch in
            if x1_Ch = pkgen2_1(r2_3) then
            (
              let m2_2: bitstring = {996}enc_r2(Z(m_8), x1_Ch, r2_4) in
              out(c23[i], m2_2)
            )
            else
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_13) in
              out(c23[i], m2_Ch)
        )
        orfind u_17 = ri_17 <= qQE suchthat defined(rtyp_QE[ri_17], res1_QE[ri_17], csvn_QE[ri_17], tcbh_QE[ri_17], tdih_QE[ri_17], rdata_QE[ri_17], res2_QE[ri_17], rms_without_mac_QE[ri_17], tcbi_QE[ri_17], smr_without_mac_QE[ri_17], res4_QE[ri_17], tdi_QE[ri_17], tdr_without_mac_QE[ri_17], sig_QE[ri_17], quote_QE[ri_17], m1_7[ri_17]) && (m1_Ch = m1_7[ri_17]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_17] in
          event QuoteVerified(rtyp_QE[u_17], res1_QE[u_17], csvn_QE[u_17], tcbh_QE[u_17], tdih_QE[u_17], rdata_QE[u_17], res2_QE[u_17]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_1: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            new r3_13: enc_seed;
            new r2_4: enc_seed;
            new session_key: key;
            let m_8: bitstring = key2bitstring(session_key) in
            let x_3: bitstring = m_8 in
            let y_2: pkey = x1_Ch in
            if x1_Ch = pkgen2_1(r2_3) then
            (
              let m2_2: bitstring = {1119}enc_r2(Z(m_8), x1_Ch, r2_4) in
              out(c23[i], m2_2)
            )
            else
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_13) in
              out(c23[i], m2_Ch)
        )
        orfind u_16 = ri_16 <= qQE suchthat defined(rtyp_QE[ri_16], res1_QE[ri_16], csvn_QE[ri_16], tcbh_QE[ri_16], tdih_QE[ri_16], rdata_QE[ri_16], res2_QE[ri_16], rms_without_mac_QE[ri_16], tcbi_QE[ri_16], smr_without_mac_QE[ri_16], res4_QE[ri_16], tdi_QE[ri_16], tdr_without_mac_QE[ri_16], sig_QE[ri_16], quote_QE[ri_16], m1_8[ri_16]) && (m1_Ch = m1_8[ri_16]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_16] in
          event QuoteVerified(rtyp_QE[u_16], res1_QE[u_16], csvn_QE[u_16], tcbh_QE[u_16], tdih_QE[u_16], rdata_QE[u_16], res2_QE[u_16]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_1: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            new r3_13: enc_seed;
            new r2_4: enc_seed;
            new session_key: key;
            let m_8: bitstring = key2bitstring(session_key) in
            let x_3: bitstring = m_8 in
            let y_2: pkey = x1_Ch in
            if x1_Ch = pkgen2_1(r2_3) then
            (
              let m2_2: bitstring = {1242}enc_r2(Z(m_8), x1_Ch, r2_4) in
              out(c23[i], m2_2)
            )
            else
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_13) in
              out(c23[i], m2_Ch)
        )
        else
          let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec2(m1_Ch, skgen2_1(r2_3)) in
          let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
          if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
          let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
          let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
          let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
          event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_1: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            new r3_13: enc_seed;
            new r2_4: enc_seed;
            new session_key: key;
            let m_8: bitstring = key2bitstring(session_key) in
            let x_3: bitstring = m_8 in
            let y_2: pkey = x1_Ch in
            if x1_Ch = pkgen2_1(r2_3) then
            (
              let m2_2: bitstring = {1362}enc_r2(Z(m_8), x1_Ch, r2_4) in
              out(c23[i], m2_2)
            )
            else
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_13) in
              out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        find [unique] u_15 = ri_15 <= qH suchthat defined(r_16[ri_15], x1_1[ri_15]) && (x1_1 = x1_1[ri_15]) then
          out(ch2[iH], r_16[u_15])
        orfind u_14 = ri_14 <= qTDXM suchthat defined(x_O_1[ri_14], r_17[ri_14]) && (x1_1 = x_O_1[ri_14]) then
          out(ch2[iH], r_17[u_14])
        orfind u_13 = ri_13 <= qCPU suchthat defined(x_O_2[ri_13], r_18[ri_13]) && (x1_1 = x_O_2[ri_13]) then
          out(ch2[iH], r_18[u_13])
        else
          new r_16: hashoutput;
          out(ch2[iH], r_16)
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pkgen2_1(r3_2), rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        let tdi_TDXM: tdi_t = get_tdi in
        let x_O_1: bitstring = tdi_t2bitstring(tdi_TDXM) in
        find [unique] u_12 = ri_12 <= qH suchthat defined(r_16[ri_12], x1_1[ri_12]) && (x_O_1 = x1_1[ri_12]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_16[u_12], rdata_TDXM) in
          new r_38: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_38) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_39: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_39) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_11 = ri_11 <= qTDXM suchthat defined(r_17[ri_11]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17[u_11], rdata_TDXM) in
          new r_40: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_40) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_41: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_41) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_10 = ri_10 <= qCPU suchthat defined(x_O_2[ri_10], r_18[ri_10]) && (x_O_1 = x_O_2[ri_10]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_18[u_10], rdata_TDXM) in
          new r_42: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_42) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_43: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_43) in
          out(c11[i_2], m4_TDXM)
        )
        else
          new r_17: hashoutput;
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17, rdata_TDXM) in
          new r_36: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_36) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_37: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_37) in
          out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        let tcbi_CPU: tcbi_t = get_tcbi in
        let x_O_2: bitstring = tcbi_t2bitstring(tcbi_CPU) in
        find [unique] u_9 = ri_9 <= qH suchthat defined(r_16[ri_9], x1_1[ri_9]) && (x_O_2 = x1_1[ri_9]) then
        (
          let res2_CPU: res_t = get_res in
          let res1_CPU: res_t = get_res in
          let csvn_CPU: csvn_t = get_csvn in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_16[u_9], tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_16[u_9], tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_30: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_30) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_31: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_31) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_8 = ri_8 <= qTDXM suchthat defined(x_O_1[ri_8], r_17[ri_8]) && (x_O_2 = x_O_1[ri_8]) then
        (
          let res2_CPU: res_t = get_res in
          let res1_CPU: res_t = get_res in
          let csvn_CPU: csvn_t = get_csvn in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_17[u_8], tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_17[u_8], tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_32: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_32) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_33: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_33) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_7 = ri_7 <= qCPU suchthat defined(r_18[ri_7]) then
        (
          let res2_CPU: res_t = get_res in
          let res1_CPU: res_t = get_res in
          let csvn_CPU: csvn_t = get_csvn in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_18[u_7], tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_18[u_7], tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_34: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_34) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_35: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_35) in
          out(c17[i_3], m4_CPU)
        )
        else
          new r_18: hashoutput;
          let res2_CPU: res_t = get_res in
          let res1_CPU: res_t = get_res in
          let csvn_CPU: csvn_t = get_csvn in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_18, tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_18, tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_28: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_28) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_29: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_29) in
          out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        let x_Oeq_1: bitstring = tcbi_t2bitstring(tcbi_QE) in
        find [unique] u_3 = ri_3 <= qH suchthat defined(r_16[ri_3], x1_1[ri_3]) && (x_Oeq_1 = x1_1[ri_3]) then
        (
          let x_Oeq: bitstring = tdi_t2bitstring(tdi_QE) in
          find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_Oeq = x1_1[ri_6]) then
          (
            if (tcbh_QE = r_16[u_3]) && (tdih_QE = r_16[u_6]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_19: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_19) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_14: enc_seed;
            let m1: bitstring = {2497}enc_r2(Z(m_15), pkgen2_1(r2_3), r3_14) in
            out(c19[i_4], m1)
          )
          orfind u_5 = ri_5 <= qTDXM suchthat defined(r_17[ri_5], tdi_TDXM[ri_5]) && (tdi_QE = tdi_TDXM[ri_5]) then
          (
            if (tcbh_QE = r_16[u_3]) && (tdih_QE = r_17[u_5]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_20: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_20) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_15: enc_seed;
            let m1_1: bitstring = {2600}enc_r2(Z(m_15), pkgen2_1(r2_3), r3_15) in
            out(c19[i_4], m1_1)
          )
          orfind u_4 = ri_4 <= qCPU suchthat defined(r_18[ri_4], x_O_2[ri_4]) && (x_Oeq = x_O_2[ri_4]) then
          (
            if (tcbh_QE = r_16[u_3]) && (tdih_QE = r_18[u_4]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_21: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_21) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_16: enc_seed;
            let m1_2: bitstring = {2703}enc_r2(Z(m_15), pkgen2_1(r2_3), r3_16) in
            out(c19[i_4], m1_2)
          )
        )
        orfind u_2 = ri_2 <= qTDXM suchthat defined(x_O_1[ri_2], r_17[ri_2]) && (x_Oeq_1 = x_O_1[ri_2]) then
        (
          let x_Oeq: bitstring = tdi_t2bitstring(tdi_QE) in
          find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_Oeq = x1_1[ri_6]) then
          (
            if (tcbh_QE = r_17[u_2]) && (tdih_QE = r_16[u_6]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_22: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_22) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_17: enc_seed;
            let m1_3: bitstring = {2820}enc_r2(Z(m_15), pkgen2_1(r2_3), r3_17) in
            out(c19[i_4], m1_3)
          )
          orfind  suchthat x_Oeq = x_O_1[u_2] then
          (
            if (tcbh_QE = r_17[u_2]) && (tdih_QE = r_17[u_2]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_23: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_23) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_18: enc_seed;
            let m1_4: bitstring = {2922}enc_r2(Z(m_15), pkgen2_1(r2_3), r3_18) in
            out(c19[i_4], m1_4)
          )
          orfind u_4 = ri_4 <= qCPU suchthat defined(r_18[ri_4], x_O_2[ri_4]) && (x_Oeq = x_O_2[ri_4]) then
          (
            if (tcbh_QE = r_17[u_2]) && (tdih_QE = r_18[u_4]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_24: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_24) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_19: enc_seed;
            let m1_5: bitstring = {3025}enc_r2(Z(m_15), pkgen2_1(r2_3), r3_19) in
            out(c19[i_4], m1_5)
          )
        )
        orfind u_1 = ri_1 <= qCPU suchthat defined(x_O_2[ri_1], r_18[ri_1], tcbi_CPU[ri_1]) && (tcbi_QE = tcbi_CPU[ri_1]) then
        (
          let x_Oeq: bitstring = tdi_t2bitstring(tdi_QE) in
          find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_Oeq = x1_1[ri_6]) then
          (
            if (tcbh_QE = r_18[u_1]) && (tdih_QE = r_16[u_6]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_25: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_25) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_20: enc_seed;
            let m1_6: bitstring = {3143}enc_r2(Z(m_15), pkgen2_1(r2_3), r3_20) in
            out(c19[i_4], m1_6)
          )
          orfind u_5 = ri_5 <= qTDXM suchthat defined(r_17[ri_5], tdi_TDXM[ri_5]) && (tdi_QE = tdi_TDXM[ri_5]) then
          (
            if (tcbh_QE = r_18[u_1]) && (tdih_QE = r_17[u_5]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_26: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_26) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_21: enc_seed;
            let m1_7: bitstring = {3246}enc_r2(Z(m_15), pkgen2_1(r2_3), r3_21) in
            out(c19[i_4], m1_7)
          )
          orfind  suchthat x_Oeq = x_O_2[u_1] then
          (
            if (tcbh_QE = r_18[u_1]) && (tdih_QE = r_18[u_1]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_27: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_27) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_22: enc_seed;
            let m1_8: bitstring = {3348}enc_r2(Z(m_15), pkgen2_1(r2_3), r3_22) in
            out(c19[i_4], m1_8)
          )
        )
      ))


Applying simplify
  - Simplification pass
    - Replaced enc_r2(Z(m_15), pkgen2_1(r2_3), r3_22) with enc_r2(Zkey1, pkgen2_1(r2_3), r3_22) at 3348
    - Replaced enc_r2(Z(m_15), pkgen2_1(r2_3), r3_21) with enc_r2(Zkey1, pkgen2_1(r2_3), r3_21) at 3246
    - Replaced enc_r2(Z(m_15), pkgen2_1(r2_3), r3_20) with enc_r2(Zkey1, pkgen2_1(r2_3), r3_20) at 3143
    - Replaced enc_r2(Z(m_15), pkgen2_1(r2_3), r3_19) with enc_r2(Zkey1, pkgen2_1(r2_3), r3_19) at 3025
    - Replaced enc_r2(Z(m_15), pkgen2_1(r2_3), r3_18) with enc_r2(Zkey1, pkgen2_1(r2_3), r3_18) at 2922
    - Replaced enc_r2(Z(m_15), pkgen2_1(r2_3), r3_17) with enc_r2(Zkey1, pkgen2_1(r2_3), r3_17) at 2820
    - Replaced enc_r2(Z(m_15), pkgen2_1(r2_3), r3_16) with enc_r2(Zkey1, pkgen2_1(r2_3), r3_16) at 2703
    - Replaced enc_r2(Z(m_15), pkgen2_1(r2_3), r3_15) with enc_r2(Zkey1, pkgen2_1(r2_3), r3_15) at 2600
    - Replaced enc_r2(Z(m_15), pkgen2_1(r2_3), r3_14) with enc_r2(Zkey1, pkgen2_1(r2_3), r3_14) at 2497
    - Replaced enc_r2(Z(m_8), x1_Ch, r2_4) with enc_r2(Zkey1, x1_Ch, r2_4) at 1362
    - Replaced enc_r2(Z(m_8), x1_Ch, r2_4) with enc_r2(Zkey1, x1_Ch, r2_4) at 1242
    - Replaced defined condition rtyp_QE[ri_16], res1_QE[ri_16], csvn_QE[ri_16], tcbh_QE[ri_16], tdih_QE[ri_16], rdata_QE[ri_16], res2_QE[ri_16], rms_without_mac_QE[ri_16], tcbi_QE[ri_16], smr_without_mac_QE[ri_16], res4_QE[ri_16], tdi_QE[ri_16], tdr_without_mac_QE[ri_16], sig_QE[ri_16], quote_QE[ri_16], m1_8[ri_16] with res2_QE[ri_16], tdih_QE[ri_16], tcbh_QE[ri_16], csvn_QE[ri_16], res1_QE[ri_16], rtyp_QE[ri_16], rdata_QE[ri_16], m1_8[ri_16] in find at 28
    - Replaced enc_r2(Z(m_8), x1_Ch, r2_4) with enc_r2(Zkey1, x1_Ch, r2_4) at 1119
    - Replaced defined condition rtyp_QE[ri_17], res1_QE[ri_17], csvn_QE[ri_17], tcbh_QE[ri_17], tdih_QE[ri_17], rdata_QE[ri_17], res2_QE[ri_17], rms_without_mac_QE[ri_17], tcbi_QE[ri_17], smr_without_mac_QE[ri_17], res4_QE[ri_17], tdi_QE[ri_17], tdr_without_mac_QE[ri_17], sig_QE[ri_17], quote_QE[ri_17], m1_7[ri_17] with res2_QE[ri_17], tdih_QE[ri_17], tcbh_QE[ri_17], csvn_QE[ri_17], res1_QE[ri_17], rtyp_QE[ri_17], rdata_QE[ri_17], m1_7[ri_17] in find at 28
    - Replaced enc_r2(Z(m_8), x1_Ch, r2_4) with enc_r2(Zkey1, x1_Ch, r2_4) at 996
    - Replaced defined condition rtyp_QE[ri_18], res1_QE[ri_18], csvn_QE[ri_18], tcbh_QE[ri_18], tdih_QE[ri_18], rdata_QE[ri_18], res2_QE[ri_18], rms_without_mac_QE[ri_18], tcbi_QE[ri_18], smr_without_mac_QE[ri_18], res4_QE[ri_18], tdi_QE[ri_18], tdr_without_mac_QE[ri_18], sig_QE[ri_18], quote_QE[ri_18], m1_6[ri_18] with res2_QE[ri_18], tdih_QE[ri_18], tcbh_QE[ri_18], csvn_QE[ri_18], res1_QE[ri_18], rtyp_QE[ri_18], rdata_QE[ri_18], m1_6[ri_18] in find at 28
    - Replaced enc_r2(Z(m_8), x1_Ch, r2_4) with enc_r2(Zkey1, x1_Ch, r2_4) at 873
    - Replaced defined condition rtyp_QE[ri_19], res1_QE[ri_19], csvn_QE[ri_19], tcbh_QE[ri_19], tdih_QE[ri_19], rdata_QE[ri_19], res2_QE[ri_19], rms_without_mac_QE[ri_19], tcbi_QE[ri_19], smr_without_mac_QE[ri_19], res4_QE[ri_19], tdi_QE[ri_19], tdr_without_mac_QE[ri_19], sig_QE[ri_19], quote_QE[ri_19], m1_5[ri_19] with res2_QE[ri_19], tdih_QE[ri_19], tcbh_QE[ri_19], csvn_QE[ri_19], res1_QE[ri_19], rtyp_QE[ri_19], rdata_QE[ri_19], m1_5[ri_19] in find at 28
    - Replaced enc_r2(Z(m_8), x1_Ch, r2_4) with enc_r2(Zkey1, x1_Ch, r2_4) at 750
    - Replaced defined condition rtyp_QE[ri_20], res1_QE[ri_20], csvn_QE[ri_20], tcbh_QE[ri_20], tdih_QE[ri_20], rdata_QE[ri_20], res2_QE[ri_20], rms_without_mac_QE[ri_20], tcbi_QE[ri_20], smr_without_mac_QE[ri_20], res4_QE[ri_20], tdi_QE[ri_20], tdr_without_mac_QE[ri_20], sig_QE[ri_20], quote_QE[ri_20], m1_4[ri_20] with res2_QE[ri_20], tdih_QE[ri_20], tcbh_QE[ri_20], csvn_QE[ri_20], res1_QE[ri_20], rtyp_QE[ri_20], rdata_QE[ri_20], m1_4[ri_20] in find at 28
    - Replaced enc_r2(Z(m_8), x1_Ch, r2_4) with enc_r2(Zkey1, x1_Ch, r2_4) at 627
    - Replaced defined condition rtyp_QE[ri_21], res1_QE[ri_21], csvn_QE[ri_21], tcbh_QE[ri_21], tdih_QE[ri_21], rdata_QE[ri_21], res2_QE[ri_21], rms_without_mac_QE[ri_21], tcbi_QE[ri_21], smr_without_mac_QE[ri_21], res4_QE[ri_21], tdi_QE[ri_21], tdr_without_mac_QE[ri_21], sig_QE[ri_21], quote_QE[ri_21], m1_3[ri_21] with res2_QE[ri_21], tdih_QE[ri_21], tcbh_QE[ri_21], csvn_QE[ri_21], res1_QE[ri_21], rtyp_QE[ri_21], rdata_QE[ri_21], m1_3[ri_21] in find at 28
    - Replaced enc_r2(Z(m_8), x1_Ch, r2_4) with enc_r2(Zkey1, x1_Ch, r2_4) at 504
    - Replaced defined condition rtyp_QE[ri_22], res1_QE[ri_22], csvn_QE[ri_22], tcbh_QE[ri_22], tdih_QE[ri_22], rdata_QE[ri_22], res2_QE[ri_22], rms_without_mac_QE[ri_22], tcbi_QE[ri_22], smr_without_mac_QE[ri_22], res4_QE[ri_22], tdi_QE[ri_22], tdr_without_mac_QE[ri_22], sig_QE[ri_22], quote_QE[ri_22], m1_2[ri_22] with res2_QE[ri_22], tdih_QE[ri_22], tcbh_QE[ri_22], csvn_QE[ri_22], res1_QE[ri_22], rtyp_QE[ri_22], rdata_QE[ri_22], m1_2[ri_22] in find at 28
    - Replaced enc_r2(Z(m_8), x1_Ch, r2_4) with enc_r2(Zkey1, x1_Ch, r2_4) at 381
    - Replaced defined condition rtyp_QE[ri_23], res1_QE[ri_23], csvn_QE[ri_23], tcbh_QE[ri_23], tdih_QE[ri_23], rdata_QE[ri_23], res2_QE[ri_23], rms_without_mac_QE[ri_23], tcbi_QE[ri_23], smr_without_mac_QE[ri_23], res4_QE[ri_23], tdi_QE[ri_23], tdr_without_mac_QE[ri_23], sig_QE[ri_23], quote_QE[ri_23], m1_1[ri_23] with res2_QE[ri_23], tdih_QE[ri_23], tcbh_QE[ri_23], csvn_QE[ri_23], res1_QE[ri_23], rtyp_QE[ri_23], rdata_QE[ri_23], m1_1[ri_23] in find at 28
    - Replaced enc_r2(Z(m_8), x1_Ch, r2_4) with enc_r2(Zkey1, x1_Ch, r2_4) at 258
    - Replaced defined condition rtyp_QE[ri_24], res1_QE[ri_24], csvn_QE[ri_24], tcbh_QE[ri_24], tdih_QE[ri_24], rdata_QE[ri_24], res2_QE[ri_24], rms_without_mac_QE[ri_24], tcbi_QE[ri_24], smr_without_mac_QE[ri_24], res4_QE[ri_24], tdi_QE[ri_24], tdr_without_mac_QE[ri_24], sig_QE[ri_24], quote_QE[ri_24], m1[ri_24] with res2_QE[ri_24], tdih_QE[ri_24], tcbh_QE[ri_24], csvn_QE[ri_24], res1_QE[ri_24], rtyp_QE[ri_24], rdata_QE[ri_24], m1[ri_24] in find at 28
    - Replaced ((y_2[ri_25] = pkgen2_1(r2_3)) && (m1_Ch = m2_2[ri_25])) with (m1_Ch = m2_2[ri_25]) at 32
    - Replaced x_3[u_25] with key2bitstring(session_key[u_25]) at 44
    - Replaced enc_r2(Z(m_8), x1_Ch, r2_4) with enc_r2(Zkey1, x1_Ch, r2_4) at 129
    - Replaced defined condition m2_2[ri_25], y_2[ri_25], x_3[ri_25] with session_key[ri_25], m2_2[ri_25] in find at 28
yields

Game 29 is
      in(start, ());
      new r1: skeyseed;
      let spk1: spkey = spkgen(r1) in
      let ssk1: sskey = sskgen(r1) in
      new r2_3: keyseed;
      new r3_2: keyseed;
      new sym_key: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        find u_25 = ri_25 <= qChallenger suchthat defined(session_key[ri_25], m2_2[ri_25]) && (m1_Ch = m2_2[ri_25]) then
        (
          let quote_t2bitstring(quote_Ch: quote_t) = key2bitstring(session_key[u_25]) in
          let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
          if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
          let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
          let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
          let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
          event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_1: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            new r3_13: enc_seed;
            new r2_4: enc_seed;
            new session_key: key;
            let m_8: bitstring = key2bitstring(session_key) in
            let x_3: bitstring = m_8 in
            let y_2: pkey = x1_Ch in
            if x1_Ch = pkgen2_1(r2_3) then
            (
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_4) in
              out(c23[i], m2_2)
            )
            else
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_13) in
              out(c23[i], m2_Ch)
        )
        orfind u_24 = ri_24 <= qQE suchthat defined(res2_QE[ri_24], tdih_QE[ri_24], tcbh_QE[ri_24], csvn_QE[ri_24], res1_QE[ri_24], rtyp_QE[ri_24], rdata_QE[ri_24], m1[ri_24]) && (m1_Ch = m1[ri_24]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_24] in
          event QuoteVerified(rtyp_QE[u_24], res1_QE[u_24], csvn_QE[u_24], tcbh_QE[u_24], tdih_QE[u_24], rdata_QE[u_24], res2_QE[u_24]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_1: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            new r3_13: enc_seed;
            new r2_4: enc_seed;
            new session_key: key;
            let m_8: bitstring = key2bitstring(session_key) in
            let x_3: bitstring = m_8 in
            let y_2: pkey = x1_Ch in
            if x1_Ch = pkgen2_1(r2_3) then
            (
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_4) in
              out(c23[i], m2_2)
            )
            else
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_13) in
              out(c23[i], m2_Ch)
        )
        orfind u_23 = ri_23 <= qQE suchthat defined(res2_QE[ri_23], tdih_QE[ri_23], tcbh_QE[ri_23], csvn_QE[ri_23], res1_QE[ri_23], rtyp_QE[ri_23], rdata_QE[ri_23], m1_1[ri_23]) && (m1_Ch = m1_1[ri_23]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_23] in
          event QuoteVerified(rtyp_QE[u_23], res1_QE[u_23], csvn_QE[u_23], tcbh_QE[u_23], tdih_QE[u_23], rdata_QE[u_23], res2_QE[u_23]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_1: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            new r3_13: enc_seed;
            new r2_4: enc_seed;
            new session_key: key;
            let m_8: bitstring = key2bitstring(session_key) in
            let x_3: bitstring = m_8 in
            let y_2: pkey = x1_Ch in
            if x1_Ch = pkgen2_1(r2_3) then
            (
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_4) in
              out(c23[i], m2_2)
            )
            else
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_13) in
              out(c23[i], m2_Ch)
        )
        orfind u_22 = ri_22 <= qQE suchthat defined(res2_QE[ri_22], tdih_QE[ri_22], tcbh_QE[ri_22], csvn_QE[ri_22], res1_QE[ri_22], rtyp_QE[ri_22], rdata_QE[ri_22], m1_2[ri_22]) && (m1_Ch = m1_2[ri_22]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_22] in
          event QuoteVerified(rtyp_QE[u_22], res1_QE[u_22], csvn_QE[u_22], tcbh_QE[u_22], tdih_QE[u_22], rdata_QE[u_22], res2_QE[u_22]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_1: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            new r3_13: enc_seed;
            new r2_4: enc_seed;
            new session_key: key;
            let m_8: bitstring = key2bitstring(session_key) in
            let x_3: bitstring = m_8 in
            let y_2: pkey = x1_Ch in
            if x1_Ch = pkgen2_1(r2_3) then
            (
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_4) in
              out(c23[i], m2_2)
            )
            else
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_13) in
              out(c23[i], m2_Ch)
        )
        orfind u_21 = ri_21 <= qQE suchthat defined(res2_QE[ri_21], tdih_QE[ri_21], tcbh_QE[ri_21], csvn_QE[ri_21], res1_QE[ri_21], rtyp_QE[ri_21], rdata_QE[ri_21], m1_3[ri_21]) && (m1_Ch = m1_3[ri_21]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_21] in
          event QuoteVerified(rtyp_QE[u_21], res1_QE[u_21], csvn_QE[u_21], tcbh_QE[u_21], tdih_QE[u_21], rdata_QE[u_21], res2_QE[u_21]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_1: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            new r3_13: enc_seed;
            new r2_4: enc_seed;
            new session_key: key;
            let m_8: bitstring = key2bitstring(session_key) in
            let x_3: bitstring = m_8 in
            let y_2: pkey = x1_Ch in
            if x1_Ch = pkgen2_1(r2_3) then
            (
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_4) in
              out(c23[i], m2_2)
            )
            else
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_13) in
              out(c23[i], m2_Ch)
        )
        orfind u_20 = ri_20 <= qQE suchthat defined(res2_QE[ri_20], tdih_QE[ri_20], tcbh_QE[ri_20], csvn_QE[ri_20], res1_QE[ri_20], rtyp_QE[ri_20], rdata_QE[ri_20], m1_4[ri_20]) && (m1_Ch = m1_4[ri_20]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_20] in
          event QuoteVerified(rtyp_QE[u_20], res1_QE[u_20], csvn_QE[u_20], tcbh_QE[u_20], tdih_QE[u_20], rdata_QE[u_20], res2_QE[u_20]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_1: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            new r3_13: enc_seed;
            new r2_4: enc_seed;
            new session_key: key;
            let m_8: bitstring = key2bitstring(session_key) in
            let x_3: bitstring = m_8 in
            let y_2: pkey = x1_Ch in
            if x1_Ch = pkgen2_1(r2_3) then
            (
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_4) in
              out(c23[i], m2_2)
            )
            else
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_13) in
              out(c23[i], m2_Ch)
        )
        orfind u_19 = ri_19 <= qQE suchthat defined(res2_QE[ri_19], tdih_QE[ri_19], tcbh_QE[ri_19], csvn_QE[ri_19], res1_QE[ri_19], rtyp_QE[ri_19], rdata_QE[ri_19], m1_5[ri_19]) && (m1_Ch = m1_5[ri_19]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_19] in
          event QuoteVerified(rtyp_QE[u_19], res1_QE[u_19], csvn_QE[u_19], tcbh_QE[u_19], tdih_QE[u_19], rdata_QE[u_19], res2_QE[u_19]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_1: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            new r3_13: enc_seed;
            new r2_4: enc_seed;
            new session_key: key;
            let m_8: bitstring = key2bitstring(session_key) in
            let x_3: bitstring = m_8 in
            let y_2: pkey = x1_Ch in
            if x1_Ch = pkgen2_1(r2_3) then
            (
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_4) in
              out(c23[i], m2_2)
            )
            else
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_13) in
              out(c23[i], m2_Ch)
        )
        orfind u_18 = ri_18 <= qQE suchthat defined(res2_QE[ri_18], tdih_QE[ri_18], tcbh_QE[ri_18], csvn_QE[ri_18], res1_QE[ri_18], rtyp_QE[ri_18], rdata_QE[ri_18], m1_6[ri_18]) && (m1_Ch = m1_6[ri_18]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_18] in
          event QuoteVerified(rtyp_QE[u_18], res1_QE[u_18], csvn_QE[u_18], tcbh_QE[u_18], tdih_QE[u_18], rdata_QE[u_18], res2_QE[u_18]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_1: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            new r3_13: enc_seed;
            new r2_4: enc_seed;
            new session_key: key;
            let m_8: bitstring = key2bitstring(session_key) in
            let x_3: bitstring = m_8 in
            let y_2: pkey = x1_Ch in
            if x1_Ch = pkgen2_1(r2_3) then
            (
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_4) in
              out(c23[i], m2_2)
            )
            else
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_13) in
              out(c23[i], m2_Ch)
        )
        orfind u_17 = ri_17 <= qQE suchthat defined(res2_QE[ri_17], tdih_QE[ri_17], tcbh_QE[ri_17], csvn_QE[ri_17], res1_QE[ri_17], rtyp_QE[ri_17], rdata_QE[ri_17], m1_7[ri_17]) && (m1_Ch = m1_7[ri_17]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_17] in
          event QuoteVerified(rtyp_QE[u_17], res1_QE[u_17], csvn_QE[u_17], tcbh_QE[u_17], tdih_QE[u_17], rdata_QE[u_17], res2_QE[u_17]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_1: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            new r3_13: enc_seed;
            new r2_4: enc_seed;
            new session_key: key;
            let m_8: bitstring = key2bitstring(session_key) in
            let x_3: bitstring = m_8 in
            let y_2: pkey = x1_Ch in
            if x1_Ch = pkgen2_1(r2_3) then
            (
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_4) in
              out(c23[i], m2_2)
            )
            else
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_13) in
              out(c23[i], m2_Ch)
        )
        orfind u_16 = ri_16 <= qQE suchthat defined(res2_QE[ri_16], tdih_QE[ri_16], tcbh_QE[ri_16], csvn_QE[ri_16], res1_QE[ri_16], rtyp_QE[ri_16], rdata_QE[ri_16], m1_8[ri_16]) && (m1_Ch = m1_8[ri_16]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_16] in
          event QuoteVerified(rtyp_QE[u_16], res1_QE[u_16], csvn_QE[u_16], tcbh_QE[u_16], tdih_QE[u_16], rdata_QE[u_16], res2_QE[u_16]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_1: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            new r3_13: enc_seed;
            new r2_4: enc_seed;
            new session_key: key;
            let m_8: bitstring = key2bitstring(session_key) in
            let x_3: bitstring = m_8 in
            let y_2: pkey = x1_Ch in
            if x1_Ch = pkgen2_1(r2_3) then
            (
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_4) in
              out(c23[i], m2_2)
            )
            else
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_13) in
              out(c23[i], m2_Ch)
        )
        else
          let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec2(m1_Ch, skgen2_1(r2_3)) in
          let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
          if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
          let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
          let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
          let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
          event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_1: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            new r3_13: enc_seed;
            new r2_4: enc_seed;
            new session_key: key;
            let m_8: bitstring = key2bitstring(session_key) in
            let x_3: bitstring = m_8 in
            let y_2: pkey = x1_Ch in
            if x1_Ch = pkgen2_1(r2_3) then
            (
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_4) in
              out(c23[i], m2_2)
            )
            else
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_13) in
              out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        find [unique] u_15 = ri_15 <= qH suchthat defined(r_16[ri_15], x1_1[ri_15]) && (x1_1 = x1_1[ri_15]) then
          out(ch2[iH], r_16[u_15])
        orfind u_14 = ri_14 <= qTDXM suchthat defined(x_O_1[ri_14], r_17[ri_14]) && (x1_1 = x_O_1[ri_14]) then
          out(ch2[iH], r_17[u_14])
        orfind u_13 = ri_13 <= qCPU suchthat defined(x_O_2[ri_13], r_18[ri_13]) && (x1_1 = x_O_2[ri_13]) then
          out(ch2[iH], r_18[u_13])
        else
          new r_16: hashoutput;
          out(ch2[iH], r_16)
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pkgen2_1(r3_2), rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        let tdi_TDXM: tdi_t = get_tdi in
        let x_O_1: bitstring = tdi_t2bitstring(tdi_TDXM) in
        find [unique] u_12 = ri_12 <= qH suchthat defined(r_16[ri_12], x1_1[ri_12]) && (x_O_1 = x1_1[ri_12]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_16[u_12], rdata_TDXM) in
          new r_38: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_38) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_39: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_39) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_11 = ri_11 <= qTDXM suchthat defined(r_17[ri_11]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17[u_11], rdata_TDXM) in
          new r_40: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_40) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_41: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_41) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_10 = ri_10 <= qCPU suchthat defined(x_O_2[ri_10], r_18[ri_10]) && (x_O_1 = x_O_2[ri_10]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_18[u_10], rdata_TDXM) in
          new r_42: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_42) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_43: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_43) in
          out(c11[i_2], m4_TDXM)
        )
        else
          new r_17: hashoutput;
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17, rdata_TDXM) in
          new r_36: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_36) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_37: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_37) in
          out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        let tcbi_CPU: tcbi_t = get_tcbi in
        let x_O_2: bitstring = tcbi_t2bitstring(tcbi_CPU) in
        find [unique] u_9 = ri_9 <= qH suchthat defined(r_16[ri_9], x1_1[ri_9]) && (x_O_2 = x1_1[ri_9]) then
        (
          let res2_CPU: res_t = get_res in
          let res1_CPU: res_t = get_res in
          let csvn_CPU: csvn_t = get_csvn in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_16[u_9], tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_16[u_9], tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_30: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_30) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_31: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_31) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_8 = ri_8 <= qTDXM suchthat defined(x_O_1[ri_8], r_17[ri_8]) && (x_O_2 = x_O_1[ri_8]) then
        (
          let res2_CPU: res_t = get_res in
          let res1_CPU: res_t = get_res in
          let csvn_CPU: csvn_t = get_csvn in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_17[u_8], tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_17[u_8], tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_32: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_32) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_33: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_33) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_7 = ri_7 <= qCPU suchthat defined(r_18[ri_7]) then
        (
          let res2_CPU: res_t = get_res in
          let res1_CPU: res_t = get_res in
          let csvn_CPU: csvn_t = get_csvn in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_18[u_7], tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_18[u_7], tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_34: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_34) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_35: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_35) in
          out(c17[i_3], m4_CPU)
        )
        else
          new r_18: hashoutput;
          let res2_CPU: res_t = get_res in
          let res1_CPU: res_t = get_res in
          let csvn_CPU: csvn_t = get_csvn in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_18, tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_18, tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_28: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_28) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_29: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_29) in
          out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        let x_Oeq_1: bitstring = tcbi_t2bitstring(tcbi_QE) in
        find [unique] u_3 = ri_3 <= qH suchthat defined(r_16[ri_3], x1_1[ri_3]) && (x_Oeq_1 = x1_1[ri_3]) then
        (
          let x_Oeq: bitstring = tdi_t2bitstring(tdi_QE) in
          find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_Oeq = x1_1[ri_6]) then
          (
            if (tcbh_QE = r_16[u_3]) && (tdih_QE = r_16[u_6]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_19: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_19) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_14: enc_seed;
            let m1: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_14) in
            out(c19[i_4], m1)
          )
          orfind u_5 = ri_5 <= qTDXM suchthat defined(r_17[ri_5], tdi_TDXM[ri_5]) && (tdi_QE = tdi_TDXM[ri_5]) then
          (
            if (tcbh_QE = r_16[u_3]) && (tdih_QE = r_17[u_5]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_20: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_20) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_15: enc_seed;
            let m1_1: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_15) in
            out(c19[i_4], m1_1)
          )
          orfind u_4 = ri_4 <= qCPU suchthat defined(r_18[ri_4], x_O_2[ri_4]) && (x_Oeq = x_O_2[ri_4]) then
          (
            if (tcbh_QE = r_16[u_3]) && (tdih_QE = r_18[u_4]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_21: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_21) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_16: enc_seed;
            let m1_2: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_16) in
            out(c19[i_4], m1_2)
          )
        )
        orfind u_2 = ri_2 <= qTDXM suchthat defined(x_O_1[ri_2], r_17[ri_2]) && (x_Oeq_1 = x_O_1[ri_2]) then
        (
          let x_Oeq: bitstring = tdi_t2bitstring(tdi_QE) in
          find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_Oeq = x1_1[ri_6]) then
          (
            if (tcbh_QE = r_17[u_2]) && (tdih_QE = r_16[u_6]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_22: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_22) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_17: enc_seed;
            let m1_3: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_17) in
            out(c19[i_4], m1_3)
          )
          orfind  suchthat x_Oeq = x_O_1[u_2] then
          (
            if (tcbh_QE = r_17[u_2]) && (tdih_QE = r_17[u_2]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_23: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_23) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_18: enc_seed;
            let m1_4: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_18) in
            out(c19[i_4], m1_4)
          )
          orfind u_4 = ri_4 <= qCPU suchthat defined(r_18[ri_4], x_O_2[ri_4]) && (x_Oeq = x_O_2[ri_4]) then
          (
            if (tcbh_QE = r_17[u_2]) && (tdih_QE = r_18[u_4]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_24: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_24) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_19: enc_seed;
            let m1_5: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_19) in
            out(c19[i_4], m1_5)
          )
        )
        orfind u_1 = ri_1 <= qCPU suchthat defined(x_O_2[ri_1], r_18[ri_1], tcbi_CPU[ri_1]) && (tcbi_QE = tcbi_CPU[ri_1]) then
        (
          let x_Oeq: bitstring = tdi_t2bitstring(tdi_QE) in
          find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_Oeq = x1_1[ri_6]) then
          (
            if (tcbh_QE = r_18[u_1]) && (tdih_QE = r_16[u_6]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_25: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_25) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_20: enc_seed;
            let m1_6: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_20) in
            out(c19[i_4], m1_6)
          )
          orfind u_5 = ri_5 <= qTDXM suchthat defined(r_17[ri_5], tdi_TDXM[ri_5]) && (tdi_QE = tdi_TDXM[ri_5]) then
          (
            if (tcbh_QE = r_18[u_1]) && (tdih_QE = r_17[u_5]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_26: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_26) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_21: enc_seed;
            let m1_7: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_21) in
            out(c19[i_4], m1_7)
          )
          orfind  suchthat x_Oeq = x_O_2[u_1] then
          (
            if (tcbh_QE = r_18[u_1]) && (tdih_QE = r_18[u_1]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_27: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_27) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_22: enc_seed;
            let m1_8: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_22) in
            out(c19[i_4], m1_8)
          )
        )
      ))


Applying move all binders
  - Move assignment to y_2
  - Move assignment to x_3
  - Move assignment to m_8
  - Move random number generation session_key
  - Move random number generation r2_4
  - Move random number generation r3_13
  - Move assignment to y_2
  - Move assignment to x_3
  - Move assignment to m_8
  - Move random number generation session_key
  - Move random number generation r2_4
  - Move random number generation r3_13
  - Move assignment to y_2
  - Move assignment to x_3
  - Move assignment to m_8
  - Move random number generation session_key
  - Move random number generation r2_4
  - Move random number generation r3_13
  - Move assignment to y_2
  - Move assignment to x_3
  - Move assignment to m_8
  - Move random number generation session_key
  - Move random number generation r2_4
  - Move random number generation r3_13
  - Move assignment to y_2
  - Move assignment to x_3
  - Move assignment to m_8
  - Move random number generation session_key
  - Move random number generation r2_4
  - Move random number generation r3_13
  - Move assignment to y_2
  - Move assignment to x_3
  - Move assignment to m_8
  - Move random number generation session_key
  - Move random number generation r2_4
  - Move random number generation r3_13
  - Move assignment to y_2
  - Move assignment to x_3
  - Move assignment to m_8
  - Move random number generation session_key
  - Move random number generation r2_4
  - Move random number generation r3_13
  - Move assignment to y_2
  - Move assignment to x_3
  - Move assignment to m_8
  - Move random number generation session_key
  - Move random number generation r2_4
  - Move random number generation r3_13
  - Move assignment to y_2
  - Move assignment to x_3
  - Move assignment to m_8
  - Move random number generation session_key
  - Move random number generation r2_4
  - Move random number generation r3_13
  - Move assignment to y_2
  - Move assignment to x_3
  - Move assignment to m_8
  - Move random number generation session_key
  - Move random number generation r2_4
  - Move random number generation r3_13
  - Move assignment to y_2
  - Move assignment to x_3
  - Move assignment to m_8
  - Move random number generation session_key
  - Move random number generation r2_4
  - Move random number generation r3_13
yields

Game 30 is
      in(start, ());
      new r1: skeyseed;
      let spk1: spkey = spkgen(r1) in
      let ssk1: sskey = sskgen(r1) in
      new r2_3: keyseed;
      new r3_2: keyseed;
      new sym_key: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        find u_25 = ri_25 <= qChallenger suchthat defined(session_key[ri_25], m2_2[ri_25]) && (m1_Ch = m2_2[ri_25]) then
        (
          let quote_t2bitstring(quote_Ch: quote_t) = key2bitstring(session_key[u_25]) in
          let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
          if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
          let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
          let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
          let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
          event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_1: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_4: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_4) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_13: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_13) in
              out(c23[i], m2_Ch)
        )
        orfind u_24 = ri_24 <= qQE suchthat defined(res2_QE[ri_24], tdih_QE[ri_24], tcbh_QE[ri_24], csvn_QE[ri_24], res1_QE[ri_24], rtyp_QE[ri_24], rdata_QE[ri_24], m1[ri_24]) && (m1_Ch = m1[ri_24]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_24] in
          event QuoteVerified(rtyp_QE[u_24], res1_QE[u_24], csvn_QE[u_24], tcbh_QE[u_24], tdih_QE[u_24], rdata_QE[u_24], res2_QE[u_24]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_1: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_4: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_4) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_13: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_13) in
              out(c23[i], m2_Ch)
        )
        orfind u_23 = ri_23 <= qQE suchthat defined(res2_QE[ri_23], tdih_QE[ri_23], tcbh_QE[ri_23], csvn_QE[ri_23], res1_QE[ri_23], rtyp_QE[ri_23], rdata_QE[ri_23], m1_1[ri_23]) && (m1_Ch = m1_1[ri_23]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_23] in
          event QuoteVerified(rtyp_QE[u_23], res1_QE[u_23], csvn_QE[u_23], tcbh_QE[u_23], tdih_QE[u_23], rdata_QE[u_23], res2_QE[u_23]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_1: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_4: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_4) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_13: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_13) in
              out(c23[i], m2_Ch)
        )
        orfind u_22 = ri_22 <= qQE suchthat defined(res2_QE[ri_22], tdih_QE[ri_22], tcbh_QE[ri_22], csvn_QE[ri_22], res1_QE[ri_22], rtyp_QE[ri_22], rdata_QE[ri_22], m1_2[ri_22]) && (m1_Ch = m1_2[ri_22]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_22] in
          event QuoteVerified(rtyp_QE[u_22], res1_QE[u_22], csvn_QE[u_22], tcbh_QE[u_22], tdih_QE[u_22], rdata_QE[u_22], res2_QE[u_22]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_1: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_4: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_4) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_13: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_13) in
              out(c23[i], m2_Ch)
        )
        orfind u_21 = ri_21 <= qQE suchthat defined(res2_QE[ri_21], tdih_QE[ri_21], tcbh_QE[ri_21], csvn_QE[ri_21], res1_QE[ri_21], rtyp_QE[ri_21], rdata_QE[ri_21], m1_3[ri_21]) && (m1_Ch = m1_3[ri_21]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_21] in
          event QuoteVerified(rtyp_QE[u_21], res1_QE[u_21], csvn_QE[u_21], tcbh_QE[u_21], tdih_QE[u_21], rdata_QE[u_21], res2_QE[u_21]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_1: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_4: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_4) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_13: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_13) in
              out(c23[i], m2_Ch)
        )
        orfind u_20 = ri_20 <= qQE suchthat defined(res2_QE[ri_20], tdih_QE[ri_20], tcbh_QE[ri_20], csvn_QE[ri_20], res1_QE[ri_20], rtyp_QE[ri_20], rdata_QE[ri_20], m1_4[ri_20]) && (m1_Ch = m1_4[ri_20]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_20] in
          event QuoteVerified(rtyp_QE[u_20], res1_QE[u_20], csvn_QE[u_20], tcbh_QE[u_20], tdih_QE[u_20], rdata_QE[u_20], res2_QE[u_20]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_1: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_4: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_4) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_13: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_13) in
              out(c23[i], m2_Ch)
        )
        orfind u_19 = ri_19 <= qQE suchthat defined(res2_QE[ri_19], tdih_QE[ri_19], tcbh_QE[ri_19], csvn_QE[ri_19], res1_QE[ri_19], rtyp_QE[ri_19], rdata_QE[ri_19], m1_5[ri_19]) && (m1_Ch = m1_5[ri_19]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_19] in
          event QuoteVerified(rtyp_QE[u_19], res1_QE[u_19], csvn_QE[u_19], tcbh_QE[u_19], tdih_QE[u_19], rdata_QE[u_19], res2_QE[u_19]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_1: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_4: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_4) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_13: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_13) in
              out(c23[i], m2_Ch)
        )
        orfind u_18 = ri_18 <= qQE suchthat defined(res2_QE[ri_18], tdih_QE[ri_18], tcbh_QE[ri_18], csvn_QE[ri_18], res1_QE[ri_18], rtyp_QE[ri_18], rdata_QE[ri_18], m1_6[ri_18]) && (m1_Ch = m1_6[ri_18]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_18] in
          event QuoteVerified(rtyp_QE[u_18], res1_QE[u_18], csvn_QE[u_18], tcbh_QE[u_18], tdih_QE[u_18], rdata_QE[u_18], res2_QE[u_18]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_1: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_4: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_4) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_13: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_13) in
              out(c23[i], m2_Ch)
        )
        orfind u_17 = ri_17 <= qQE suchthat defined(res2_QE[ri_17], tdih_QE[ri_17], tcbh_QE[ri_17], csvn_QE[ri_17], res1_QE[ri_17], rtyp_QE[ri_17], rdata_QE[ri_17], m1_7[ri_17]) && (m1_Ch = m1_7[ri_17]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_17] in
          event QuoteVerified(rtyp_QE[u_17], res1_QE[u_17], csvn_QE[u_17], tcbh_QE[u_17], tdih_QE[u_17], rdata_QE[u_17], res2_QE[u_17]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_1: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_4: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_4) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_13: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_13) in
              out(c23[i], m2_Ch)
        )
        orfind u_16 = ri_16 <= qQE suchthat defined(res2_QE[ri_16], tdih_QE[ri_16], tcbh_QE[ri_16], csvn_QE[ri_16], res1_QE[ri_16], rtyp_QE[ri_16], rdata_QE[ri_16], m1_8[ri_16]) && (m1_Ch = m1_8[ri_16]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_16] in
          event QuoteVerified(rtyp_QE[u_16], res1_QE[u_16], csvn_QE[u_16], tcbh_QE[u_16], tdih_QE[u_16], rdata_QE[u_16], res2_QE[u_16]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_1: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_4: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_4) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_13: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_13) in
              out(c23[i], m2_Ch)
        )
        else
          let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec2(m1_Ch, skgen2_1(r2_3)) in
          let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
          if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
          let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
          let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
          let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
          event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_1: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_4: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_4) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_13: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_13) in
              out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        find [unique] u_15 = ri_15 <= qH suchthat defined(r_16[ri_15], x1_1[ri_15]) && (x1_1 = x1_1[ri_15]) then
          out(ch2[iH], r_16[u_15])
        orfind u_14 = ri_14 <= qTDXM suchthat defined(x_O_1[ri_14], r_17[ri_14]) && (x1_1 = x_O_1[ri_14]) then
          out(ch2[iH], r_17[u_14])
        orfind u_13 = ri_13 <= qCPU suchthat defined(x_O_2[ri_13], r_18[ri_13]) && (x1_1 = x_O_2[ri_13]) then
          out(ch2[iH], r_18[u_13])
        else
          new r_16: hashoutput;
          out(ch2[iH], r_16)
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pkgen2_1(r3_2), rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        let tdi_TDXM: tdi_t = get_tdi in
        let x_O_1: bitstring = tdi_t2bitstring(tdi_TDXM) in
        find [unique] u_12 = ri_12 <= qH suchthat defined(r_16[ri_12], x1_1[ri_12]) && (x_O_1 = x1_1[ri_12]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_16[u_12], rdata_TDXM) in
          new r_38: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_38) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_39: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_39) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_11 = ri_11 <= qTDXM suchthat defined(r_17[ri_11]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17[u_11], rdata_TDXM) in
          new r_40: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_40) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_41: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_41) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_10 = ri_10 <= qCPU suchthat defined(x_O_2[ri_10], r_18[ri_10]) && (x_O_1 = x_O_2[ri_10]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_18[u_10], rdata_TDXM) in
          new r_42: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_42) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_43: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_43) in
          out(c11[i_2], m4_TDXM)
        )
        else
          new r_17: hashoutput;
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17, rdata_TDXM) in
          new r_36: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_36) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_37: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_37) in
          out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        let tcbi_CPU: tcbi_t = get_tcbi in
        let x_O_2: bitstring = tcbi_t2bitstring(tcbi_CPU) in
        find [unique] u_9 = ri_9 <= qH suchthat defined(r_16[ri_9], x1_1[ri_9]) && (x_O_2 = x1_1[ri_9]) then
        (
          let res2_CPU: res_t = get_res in
          let res1_CPU: res_t = get_res in
          let csvn_CPU: csvn_t = get_csvn in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_16[u_9], tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_16[u_9], tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_30: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_30) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_31: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_31) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_8 = ri_8 <= qTDXM suchthat defined(x_O_1[ri_8], r_17[ri_8]) && (x_O_2 = x_O_1[ri_8]) then
        (
          let res2_CPU: res_t = get_res in
          let res1_CPU: res_t = get_res in
          let csvn_CPU: csvn_t = get_csvn in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_17[u_8], tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_17[u_8], tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_32: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_32) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_33: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_33) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_7 = ri_7 <= qCPU suchthat defined(r_18[ri_7]) then
        (
          let res2_CPU: res_t = get_res in
          let res1_CPU: res_t = get_res in
          let csvn_CPU: csvn_t = get_csvn in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_18[u_7], tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_18[u_7], tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_34: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_34) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_35: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_35) in
          out(c17[i_3], m4_CPU)
        )
        else
          new r_18: hashoutput;
          let res2_CPU: res_t = get_res in
          let res1_CPU: res_t = get_res in
          let csvn_CPU: csvn_t = get_csvn in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_18, tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_18, tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_28: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_28) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_29: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_29) in
          out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        let x_Oeq_1: bitstring = tcbi_t2bitstring(tcbi_QE) in
        find [unique] u_3 = ri_3 <= qH suchthat defined(r_16[ri_3], x1_1[ri_3]) && (x_Oeq_1 = x1_1[ri_3]) then
        (
          let x_Oeq: bitstring = tdi_t2bitstring(tdi_QE) in
          find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_Oeq = x1_1[ri_6]) then
          (
            if (tcbh_QE = r_16[u_3]) && (tdih_QE = r_16[u_6]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_19: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_19) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_14: enc_seed;
            let m1: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_14) in
            out(c19[i_4], m1)
          )
          orfind u_5 = ri_5 <= qTDXM suchthat defined(r_17[ri_5], tdi_TDXM[ri_5]) && (tdi_QE = tdi_TDXM[ri_5]) then
          (
            if (tcbh_QE = r_16[u_3]) && (tdih_QE = r_17[u_5]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_20: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_20) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_15: enc_seed;
            let m1_1: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_15) in
            out(c19[i_4], m1_1)
          )
          orfind u_4 = ri_4 <= qCPU suchthat defined(r_18[ri_4], x_O_2[ri_4]) && (x_Oeq = x_O_2[ri_4]) then
          (
            if (tcbh_QE = r_16[u_3]) && (tdih_QE = r_18[u_4]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_21: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_21) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_16: enc_seed;
            let m1_2: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_16) in
            out(c19[i_4], m1_2)
          )
        )
        orfind u_2 = ri_2 <= qTDXM suchthat defined(x_O_1[ri_2], r_17[ri_2]) && (x_Oeq_1 = x_O_1[ri_2]) then
        (
          let x_Oeq: bitstring = tdi_t2bitstring(tdi_QE) in
          find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_Oeq = x1_1[ri_6]) then
          (
            if (tcbh_QE = r_17[u_2]) && (tdih_QE = r_16[u_6]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_22: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_22) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_17: enc_seed;
            let m1_3: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_17) in
            out(c19[i_4], m1_3)
          )
          orfind  suchthat x_Oeq = x_O_1[u_2] then
          (
            if (tcbh_QE = r_17[u_2]) && (tdih_QE = r_17[u_2]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_23: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_23) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_18: enc_seed;
            let m1_4: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_18) in
            out(c19[i_4], m1_4)
          )
          orfind u_4 = ri_4 <= qCPU suchthat defined(r_18[ri_4], x_O_2[ri_4]) && (x_Oeq = x_O_2[ri_4]) then
          (
            if (tcbh_QE = r_17[u_2]) && (tdih_QE = r_18[u_4]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_24: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_24) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_19: enc_seed;
            let m1_5: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_19) in
            out(c19[i_4], m1_5)
          )
        )
        orfind u_1 = ri_1 <= qCPU suchthat defined(x_O_2[ri_1], r_18[ri_1], tcbi_CPU[ri_1]) && (tcbi_QE = tcbi_CPU[ri_1]) then
        (
          let x_Oeq: bitstring = tdi_t2bitstring(tdi_QE) in
          find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_Oeq = x1_1[ri_6]) then
          (
            if (tcbh_QE = r_18[u_1]) && (tdih_QE = r_16[u_6]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_25: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_25) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_20: enc_seed;
            let m1_6: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_20) in
            out(c19[i_4], m1_6)
          )
          orfind u_5 = ri_5 <= qTDXM suchthat defined(r_17[ri_5], tdi_TDXM[ri_5]) && (tdi_QE = tdi_TDXM[ri_5]) then
          (
            if (tcbh_QE = r_18[u_1]) && (tdih_QE = r_17[u_5]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_26: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_26) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_21: enc_seed;
            let m1_7: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_21) in
            out(c19[i_4], m1_7)
          )
          orfind  suchthat x_Oeq = x_O_2[u_1] then
          (
            if (tcbh_QE = r_18[u_1]) && (tdih_QE = r_18[u_1]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_27: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_27) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
            let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
            let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
            let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
            let m_15: bitstring = quote_t2bitstring(quote_QE) in
            new r3_22: enc_seed;
            let m1_8: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_22) in
            out(c19[i_4], m1_8)
          )
        )
      ))


Applying remove assignments of findcond
  - Remove assignments on m_15 (definition removed, all usages removed)
  - Remove assignments on m_15 (definition removed, all usages removed)
  - Remove assignments on m_15 (definition removed, all usages removed)
  - Remove assignments on m_15 (definition removed, all usages removed)
  - Remove assignments on m_15 (definition removed, all usages removed)
  - Remove assignments on m_15 (definition removed, all usages removed)
  - Remove assignments on m_15 (definition removed, all usages removed)
  - Remove assignments on m_15 (definition removed, all usages removed)
  - Remove assignments on m_15 (definition removed, all usages removed)
  - Rename variable r3_13 into r3_33, r3_32, r3_31, r3_30, r3_29, r3_28, r3_27, r3_26, r3_25, r3_24, r3_23
  - Rename variable r2_4 into r2_25, r2_23, r2_21, r2_19, r2_17, r2_15, r2_13, r2_11, r2_9, r2_7, r2_5
  - Rename variable r2_1 into r2_26, r2_24, r2_22, r2_20, r2_18, r2_16, r2_14, r2_12, r2_10, r2_8, r2_6
  - Remove assignments on quote_QE (definition removed, all usages removed)
  - Remove assignments on quote_QE (definition removed, all usages removed)
  - Remove assignments on quote_QE (definition removed, all usages removed)
  - Remove assignments on quote_QE (definition removed, all usages removed)
  - Remove assignments on quote_QE (definition removed, all usages removed)
  - Remove assignments on quote_QE (definition removed, all usages removed)
  - Remove assignments on quote_QE (definition removed, all usages removed)
  - Remove assignments on quote_QE (definition removed, all usages removed)
  - Remove assignments on quote_QE (definition removed, all usages removed)
  - Remove assignments on sig_QE (definition removed, all usages removed)
  - Remove assignments on sig_QE (definition removed, all usages removed)
  - Remove assignments on sig_QE (definition removed, all usages removed)
  - Remove assignments on sig_QE (definition removed, all usages removed)
  - Remove assignments on sig_QE (definition removed, all usages removed)
  - Remove assignments on sig_QE (definition removed, all usages removed)
  - Remove assignments on sig_QE (definition removed, all usages removed)
  - Remove assignments on sig_QE (definition removed, all usages removed)
  - Remove assignments on sig_QE (definition removed, all usages removed)
  - Remove assignments on ssk1 (definition removed, all usages removed)
  - Remove assignments on tdr_without_mac_QE (definition removed, all usages removed)
  - Remove assignments on tdr_without_mac_QE (definition removed, all usages removed)
  - Remove assignments on tdr_without_mac_QE (definition removed, all usages removed)
  - Remove assignments on tdr_without_mac_QE (definition removed, all usages removed)
  - Remove assignments on tdr_without_mac_QE (definition removed, all usages removed)
  - Remove assignments on tdr_without_mac_QE (definition removed, all usages removed)
  - Remove assignments on tdr_without_mac_QE (definition removed, all usages removed)
  - Remove assignments on tdr_without_mac_QE (definition removed, all usages removed)
  - Remove assignments on tdr_without_mac_QE (definition removed, all usages removed)
  - Remove assignments on smr_without_mac_QE (definition removed, all usages removed)
  - Remove assignments on smr_without_mac_QE (definition removed, all usages removed)
  - Remove assignments on smr_without_mac_QE (definition removed, all usages removed)
  - Remove assignments on smr_without_mac_QE (definition removed, all usages removed)
  - Remove assignments on smr_without_mac_QE (definition removed, all usages removed)
  - Remove assignments on smr_without_mac_QE (definition removed, all usages removed)
  - Remove assignments on smr_without_mac_QE (definition removed, all usages removed)
  - Remove assignments on smr_without_mac_QE (definition removed, all usages removed)
  - Remove assignments on smr_without_mac_QE (definition removed, all usages removed)
yields

Game 31 is
      in(start, ());
      new r1: skeyseed;
      let spk1: spkey = spkgen(r1) in
      new r2_3: keyseed;
      new r3_2: keyseed;
      new sym_key: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        find u_25 = ri_25 <= qChallenger suchthat defined(session_key[ri_25], m2_2[ri_25]) && (m1_Ch = m2_2[ri_25]) then
        (
          let quote_t2bitstring(quote_Ch: quote_t) = key2bitstring(session_key[u_25]) in
          let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
          if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
          let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
          let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
          let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
          event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_8: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_8) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_7: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_7) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_24: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_24) in
              out(c23[i], m2_Ch)
        )
        orfind u_24 = ri_24 <= qQE suchthat defined(res2_QE[ri_24], tdih_QE[ri_24], tcbh_QE[ri_24], csvn_QE[ri_24], res1_QE[ri_24], rtyp_QE[ri_24], rdata_QE[ri_24], m1[ri_24]) && (m1_Ch = m1[ri_24]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_24] in
          event QuoteVerified(rtyp_QE[u_24], res1_QE[u_24], csvn_QE[u_24], tcbh_QE[u_24], tdih_QE[u_24], rdata_QE[u_24], res2_QE[u_24]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_10: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_10) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_9: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_9) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_25: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_25) in
              out(c23[i], m2_Ch)
        )
        orfind u_23 = ri_23 <= qQE suchthat defined(res2_QE[ri_23], tdih_QE[ri_23], tcbh_QE[ri_23], csvn_QE[ri_23], res1_QE[ri_23], rtyp_QE[ri_23], rdata_QE[ri_23], m1_1[ri_23]) && (m1_Ch = m1_1[ri_23]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_23] in
          event QuoteVerified(rtyp_QE[u_23], res1_QE[u_23], csvn_QE[u_23], tcbh_QE[u_23], tdih_QE[u_23], rdata_QE[u_23], res2_QE[u_23]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_12: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_12) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_11: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_11) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_26: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_26) in
              out(c23[i], m2_Ch)
        )
        orfind u_22 = ri_22 <= qQE suchthat defined(res2_QE[ri_22], tdih_QE[ri_22], tcbh_QE[ri_22], csvn_QE[ri_22], res1_QE[ri_22], rtyp_QE[ri_22], rdata_QE[ri_22], m1_2[ri_22]) && (m1_Ch = m1_2[ri_22]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_22] in
          event QuoteVerified(rtyp_QE[u_22], res1_QE[u_22], csvn_QE[u_22], tcbh_QE[u_22], tdih_QE[u_22], rdata_QE[u_22], res2_QE[u_22]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_14: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_14) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_13: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_13) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_27: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_27) in
              out(c23[i], m2_Ch)
        )
        orfind u_21 = ri_21 <= qQE suchthat defined(res2_QE[ri_21], tdih_QE[ri_21], tcbh_QE[ri_21], csvn_QE[ri_21], res1_QE[ri_21], rtyp_QE[ri_21], rdata_QE[ri_21], m1_3[ri_21]) && (m1_Ch = m1_3[ri_21]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_21] in
          event QuoteVerified(rtyp_QE[u_21], res1_QE[u_21], csvn_QE[u_21], tcbh_QE[u_21], tdih_QE[u_21], rdata_QE[u_21], res2_QE[u_21]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_16: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_16) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_15: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_15) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_28: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_28) in
              out(c23[i], m2_Ch)
        )
        orfind u_20 = ri_20 <= qQE suchthat defined(res2_QE[ri_20], tdih_QE[ri_20], tcbh_QE[ri_20], csvn_QE[ri_20], res1_QE[ri_20], rtyp_QE[ri_20], rdata_QE[ri_20], m1_4[ri_20]) && (m1_Ch = m1_4[ri_20]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_20] in
          event QuoteVerified(rtyp_QE[u_20], res1_QE[u_20], csvn_QE[u_20], tcbh_QE[u_20], tdih_QE[u_20], rdata_QE[u_20], res2_QE[u_20]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_18: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_18) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_17: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_17) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_29: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_29) in
              out(c23[i], m2_Ch)
        )
        orfind u_19 = ri_19 <= qQE suchthat defined(res2_QE[ri_19], tdih_QE[ri_19], tcbh_QE[ri_19], csvn_QE[ri_19], res1_QE[ri_19], rtyp_QE[ri_19], rdata_QE[ri_19], m1_5[ri_19]) && (m1_Ch = m1_5[ri_19]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_19] in
          event QuoteVerified(rtyp_QE[u_19], res1_QE[u_19], csvn_QE[u_19], tcbh_QE[u_19], tdih_QE[u_19], rdata_QE[u_19], res2_QE[u_19]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_20: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_20) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_19: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_19) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_30: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_30) in
              out(c23[i], m2_Ch)
        )
        orfind u_18 = ri_18 <= qQE suchthat defined(res2_QE[ri_18], tdih_QE[ri_18], tcbh_QE[ri_18], csvn_QE[ri_18], res1_QE[ri_18], rtyp_QE[ri_18], rdata_QE[ri_18], m1_6[ri_18]) && (m1_Ch = m1_6[ri_18]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_18] in
          event QuoteVerified(rtyp_QE[u_18], res1_QE[u_18], csvn_QE[u_18], tcbh_QE[u_18], tdih_QE[u_18], rdata_QE[u_18], res2_QE[u_18]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_22: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_22) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_21: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_21) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_31: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_31) in
              out(c23[i], m2_Ch)
        )
        orfind u_17 = ri_17 <= qQE suchthat defined(res2_QE[ri_17], tdih_QE[ri_17], tcbh_QE[ri_17], csvn_QE[ri_17], res1_QE[ri_17], rtyp_QE[ri_17], rdata_QE[ri_17], m1_7[ri_17]) && (m1_Ch = m1_7[ri_17]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_17] in
          event QuoteVerified(rtyp_QE[u_17], res1_QE[u_17], csvn_QE[u_17], tcbh_QE[u_17], tdih_QE[u_17], rdata_QE[u_17], res2_QE[u_17]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_24: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_24) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_23: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_23) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_32: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_32) in
              out(c23[i], m2_Ch)
        )
        orfind u_16 = ri_16 <= qQE suchthat defined(res2_QE[ri_16], tdih_QE[ri_16], tcbh_QE[ri_16], csvn_QE[ri_16], res1_QE[ri_16], rtyp_QE[ri_16], rdata_QE[ri_16], m1_8[ri_16]) && (m1_Ch = m1_8[ri_16]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_16] in
          event QuoteVerified(rtyp_QE[u_16], res1_QE[u_16], csvn_QE[u_16], tcbh_QE[u_16], tdih_QE[u_16], rdata_QE[u_16], res2_QE[u_16]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_26: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_26) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_25: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_25) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_33: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_33) in
              out(c23[i], m2_Ch)
        )
        else
          let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec2(m1_Ch, skgen2_1(r2_3)) in
          let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
          if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
          let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
          let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
          let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
          event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_6: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_6) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_5: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_5) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_23: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_23) in
              out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        find [unique] u_15 = ri_15 <= qH suchthat defined(r_16[ri_15], x1_1[ri_15]) && (x1_1 = x1_1[ri_15]) then
          out(ch2[iH], r_16[u_15])
        orfind u_14 = ri_14 <= qTDXM suchthat defined(x_O_1[ri_14], r_17[ri_14]) && (x1_1 = x_O_1[ri_14]) then
          out(ch2[iH], r_17[u_14])
        orfind u_13 = ri_13 <= qCPU suchthat defined(x_O_2[ri_13], r_18[ri_13]) && (x1_1 = x_O_2[ri_13]) then
          out(ch2[iH], r_18[u_13])
        else
          new r_16: hashoutput;
          out(ch2[iH], r_16)
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pkgen2_1(r3_2), rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        let tdi_TDXM: tdi_t = get_tdi in
        let x_O_1: bitstring = tdi_t2bitstring(tdi_TDXM) in
        find [unique] u_12 = ri_12 <= qH suchthat defined(r_16[ri_12], x1_1[ri_12]) && (x_O_1 = x1_1[ri_12]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_16[u_12], rdata_TDXM) in
          new r_38: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_38) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_39: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_39) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_11 = ri_11 <= qTDXM suchthat defined(r_17[ri_11]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17[u_11], rdata_TDXM) in
          new r_40: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_40) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_41: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_41) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_10 = ri_10 <= qCPU suchthat defined(x_O_2[ri_10], r_18[ri_10]) && (x_O_1 = x_O_2[ri_10]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_18[u_10], rdata_TDXM) in
          new r_42: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_42) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_43: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_43) in
          out(c11[i_2], m4_TDXM)
        )
        else
          new r_17: hashoutput;
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17, rdata_TDXM) in
          new r_36: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_36) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_37: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_37) in
          out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        let tcbi_CPU: tcbi_t = get_tcbi in
        let x_O_2: bitstring = tcbi_t2bitstring(tcbi_CPU) in
        find [unique] u_9 = ri_9 <= qH suchthat defined(r_16[ri_9], x1_1[ri_9]) && (x_O_2 = x1_1[ri_9]) then
        (
          let res2_CPU: res_t = get_res in
          let res1_CPU: res_t = get_res in
          let csvn_CPU: csvn_t = get_csvn in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_16[u_9], tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_16[u_9], tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_30: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_30) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_31: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_31) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_8 = ri_8 <= qTDXM suchthat defined(x_O_1[ri_8], r_17[ri_8]) && (x_O_2 = x_O_1[ri_8]) then
        (
          let res2_CPU: res_t = get_res in
          let res1_CPU: res_t = get_res in
          let csvn_CPU: csvn_t = get_csvn in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_17[u_8], tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_17[u_8], tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_32: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_32) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_33: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_33) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_7 = ri_7 <= qCPU suchthat defined(r_18[ri_7]) then
        (
          let res2_CPU: res_t = get_res in
          let res1_CPU: res_t = get_res in
          let csvn_CPU: csvn_t = get_csvn in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_18[u_7], tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_18[u_7], tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_34: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_34) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_35: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_35) in
          out(c17[i_3], m4_CPU)
        )
        else
          new r_18: hashoutput;
          let res2_CPU: res_t = get_res in
          let res1_CPU: res_t = get_res in
          let csvn_CPU: csvn_t = get_csvn in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_18, tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_18, tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_28: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_28) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_29: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_29) in
          out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        let x_Oeq_1: bitstring = tcbi_t2bitstring(tcbi_QE) in
        find [unique] u_3 = ri_3 <= qH suchthat defined(r_16[ri_3], x1_1[ri_3]) && (x_Oeq_1 = x1_1[ri_3]) then
        (
          let x_Oeq: bitstring = tdi_t2bitstring(tdi_QE) in
          find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_Oeq = x1_1[ri_6]) then
          (
            if (tcbh_QE = r_16[u_3]) && (tdih_QE = r_16[u_6]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_19: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_19) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            new r3_14: enc_seed;
            let m1: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_14) in
            out(c19[i_4], m1)
          )
          orfind u_5 = ri_5 <= qTDXM suchthat defined(r_17[ri_5], tdi_TDXM[ri_5]) && (tdi_QE = tdi_TDXM[ri_5]) then
          (
            if (tcbh_QE = r_16[u_3]) && (tdih_QE = r_17[u_5]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_20: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_20) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            new r3_15: enc_seed;
            let m1_1: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_15) in
            out(c19[i_4], m1_1)
          )
          orfind u_4 = ri_4 <= qCPU suchthat defined(r_18[ri_4], x_O_2[ri_4]) && (x_Oeq = x_O_2[ri_4]) then
          (
            if (tcbh_QE = r_16[u_3]) && (tdih_QE = r_18[u_4]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_21: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_21) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            new r3_16: enc_seed;
            let m1_2: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_16) in
            out(c19[i_4], m1_2)
          )
        )
        orfind u_2 = ri_2 <= qTDXM suchthat defined(x_O_1[ri_2], r_17[ri_2]) && (x_Oeq_1 = x_O_1[ri_2]) then
        (
          let x_Oeq: bitstring = tdi_t2bitstring(tdi_QE) in
          find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_Oeq = x1_1[ri_6]) then
          (
            if (tcbh_QE = r_17[u_2]) && (tdih_QE = r_16[u_6]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_22: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_22) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            new r3_17: enc_seed;
            let m1_3: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_17) in
            out(c19[i_4], m1_3)
          )
          orfind  suchthat x_Oeq = x_O_1[u_2] then
          (
            if (tcbh_QE = r_17[u_2]) && (tdih_QE = r_17[u_2]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_23: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_23) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            new r3_18: enc_seed;
            let m1_4: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_18) in
            out(c19[i_4], m1_4)
          )
          orfind u_4 = ri_4 <= qCPU suchthat defined(r_18[ri_4], x_O_2[ri_4]) && (x_Oeq = x_O_2[ri_4]) then
          (
            if (tcbh_QE = r_17[u_2]) && (tdih_QE = r_18[u_4]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_24: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_24) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            new r3_19: enc_seed;
            let m1_5: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_19) in
            out(c19[i_4], m1_5)
          )
        )
        orfind u_1 = ri_1 <= qCPU suchthat defined(x_O_2[ri_1], r_18[ri_1], tcbi_CPU[ri_1]) && (tcbi_QE = tcbi_CPU[ri_1]) then
        (
          let x_Oeq: bitstring = tdi_t2bitstring(tdi_QE) in
          find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_Oeq = x1_1[ri_6]) then
          (
            if (tcbh_QE = r_18[u_1]) && (tdih_QE = r_16[u_6]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_25: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_25) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            new r3_20: enc_seed;
            let m1_6: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_20) in
            out(c19[i_4], m1_6)
          )
          orfind u_5 = ri_5 <= qTDXM suchthat defined(r_17[ri_5], tdi_TDXM[ri_5]) && (tdi_QE = tdi_TDXM[ri_5]) then
          (
            if (tcbh_QE = r_18[u_1]) && (tdih_QE = r_17[u_5]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_26: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_26) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            new r3_21: enc_seed;
            let m1_7: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_21) in
            out(c19[i_4], m1_7)
          )
          orfind  suchthat x_Oeq = x_O_2[u_1] then
          (
            if (tcbh_QE = r_18[u_1]) && (tdih_QE = r_18[u_1]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_27: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_27) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            new r3_22: enc_seed;
            let m1_8: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_22) in
            out(c19[i_4], m1_8)
          )
        )
      ))


Applying remove assignments of binder spk1
  - Remove assignments on spk1 (definition removed, all usages removed)
yields

Game 32 is
      in(start, ());
      new r1: skeyseed;
      new r2_3: keyseed;
      new r3_2: keyseed;
      new sym_key: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        find u_25 = ri_25 <= qChallenger suchthat defined(session_key[ri_25], m2_2[ri_25]) && (m1_Ch = m2_2[ri_25]) then
        (
          let quote_t2bitstring(quote_Ch: quote_t) = key2bitstring(session_key[u_25]) in
          let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
          if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spkgen(r1), sig_Ch) then
          let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
          let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
          let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
          event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_8: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_8) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_7: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_7) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_24: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_24) in
              out(c23[i], m2_Ch)
        )
        orfind u_24 = ri_24 <= qQE suchthat defined(res2_QE[ri_24], tdih_QE[ri_24], tcbh_QE[ri_24], csvn_QE[ri_24], res1_QE[ri_24], rtyp_QE[ri_24], rdata_QE[ri_24], m1[ri_24]) && (m1_Ch = m1[ri_24]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_24] in
          event QuoteVerified(rtyp_QE[u_24], res1_QE[u_24], csvn_QE[u_24], tcbh_QE[u_24], tdih_QE[u_24], rdata_QE[u_24], res2_QE[u_24]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_10: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_10) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_9: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_9) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_25: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_25) in
              out(c23[i], m2_Ch)
        )
        orfind u_23 = ri_23 <= qQE suchthat defined(res2_QE[ri_23], tdih_QE[ri_23], tcbh_QE[ri_23], csvn_QE[ri_23], res1_QE[ri_23], rtyp_QE[ri_23], rdata_QE[ri_23], m1_1[ri_23]) && (m1_Ch = m1_1[ri_23]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_23] in
          event QuoteVerified(rtyp_QE[u_23], res1_QE[u_23], csvn_QE[u_23], tcbh_QE[u_23], tdih_QE[u_23], rdata_QE[u_23], res2_QE[u_23]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_12: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_12) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_11: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_11) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_26: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_26) in
              out(c23[i], m2_Ch)
        )
        orfind u_22 = ri_22 <= qQE suchthat defined(res2_QE[ri_22], tdih_QE[ri_22], tcbh_QE[ri_22], csvn_QE[ri_22], res1_QE[ri_22], rtyp_QE[ri_22], rdata_QE[ri_22], m1_2[ri_22]) && (m1_Ch = m1_2[ri_22]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_22] in
          event QuoteVerified(rtyp_QE[u_22], res1_QE[u_22], csvn_QE[u_22], tcbh_QE[u_22], tdih_QE[u_22], rdata_QE[u_22], res2_QE[u_22]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_14: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_14) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_13: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_13) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_27: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_27) in
              out(c23[i], m2_Ch)
        )
        orfind u_21 = ri_21 <= qQE suchthat defined(res2_QE[ri_21], tdih_QE[ri_21], tcbh_QE[ri_21], csvn_QE[ri_21], res1_QE[ri_21], rtyp_QE[ri_21], rdata_QE[ri_21], m1_3[ri_21]) && (m1_Ch = m1_3[ri_21]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_21] in
          event QuoteVerified(rtyp_QE[u_21], res1_QE[u_21], csvn_QE[u_21], tcbh_QE[u_21], tdih_QE[u_21], rdata_QE[u_21], res2_QE[u_21]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_16: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_16) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_15: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_15) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_28: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_28) in
              out(c23[i], m2_Ch)
        )
        orfind u_20 = ri_20 <= qQE suchthat defined(res2_QE[ri_20], tdih_QE[ri_20], tcbh_QE[ri_20], csvn_QE[ri_20], res1_QE[ri_20], rtyp_QE[ri_20], rdata_QE[ri_20], m1_4[ri_20]) && (m1_Ch = m1_4[ri_20]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_20] in
          event QuoteVerified(rtyp_QE[u_20], res1_QE[u_20], csvn_QE[u_20], tcbh_QE[u_20], tdih_QE[u_20], rdata_QE[u_20], res2_QE[u_20]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_18: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_18) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_17: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_17) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_29: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_29) in
              out(c23[i], m2_Ch)
        )
        orfind u_19 = ri_19 <= qQE suchthat defined(res2_QE[ri_19], tdih_QE[ri_19], tcbh_QE[ri_19], csvn_QE[ri_19], res1_QE[ri_19], rtyp_QE[ri_19], rdata_QE[ri_19], m1_5[ri_19]) && (m1_Ch = m1_5[ri_19]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_19] in
          event QuoteVerified(rtyp_QE[u_19], res1_QE[u_19], csvn_QE[u_19], tcbh_QE[u_19], tdih_QE[u_19], rdata_QE[u_19], res2_QE[u_19]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_20: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_20) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_19: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_19) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_30: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_30) in
              out(c23[i], m2_Ch)
        )
        orfind u_18 = ri_18 <= qQE suchthat defined(res2_QE[ri_18], tdih_QE[ri_18], tcbh_QE[ri_18], csvn_QE[ri_18], res1_QE[ri_18], rtyp_QE[ri_18], rdata_QE[ri_18], m1_6[ri_18]) && (m1_Ch = m1_6[ri_18]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_18] in
          event QuoteVerified(rtyp_QE[u_18], res1_QE[u_18], csvn_QE[u_18], tcbh_QE[u_18], tdih_QE[u_18], rdata_QE[u_18], res2_QE[u_18]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_22: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_22) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_21: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_21) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_31: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_31) in
              out(c23[i], m2_Ch)
        )
        orfind u_17 = ri_17 <= qQE suchthat defined(res2_QE[ri_17], tdih_QE[ri_17], tcbh_QE[ri_17], csvn_QE[ri_17], res1_QE[ri_17], rtyp_QE[ri_17], rdata_QE[ri_17], m1_7[ri_17]) && (m1_Ch = m1_7[ri_17]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_17] in
          event QuoteVerified(rtyp_QE[u_17], res1_QE[u_17], csvn_QE[u_17], tcbh_QE[u_17], tdih_QE[u_17], rdata_QE[u_17], res2_QE[u_17]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_24: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_24) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_23: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_23) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_32: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_32) in
              out(c23[i], m2_Ch)
        )
        orfind u_16 = ri_16 <= qQE suchthat defined(res2_QE[ri_16], tdih_QE[ri_16], tcbh_QE[ri_16], csvn_QE[ri_16], res1_QE[ri_16], rtyp_QE[ri_16], rdata_QE[ri_16], m1_8[ri_16]) && (m1_Ch = m1_8[ri_16]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_16] in
          event QuoteVerified(rtyp_QE[u_16], res1_QE[u_16], csvn_QE[u_16], tcbh_QE[u_16], tdih_QE[u_16], rdata_QE[u_16], res2_QE[u_16]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_26: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_26) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_25: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_25) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_33: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_33) in
              out(c23[i], m2_Ch)
        )
        else
          let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec2(m1_Ch, skgen2_1(r2_3)) in
          let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
          if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spkgen(r1), sig_Ch) then
          let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
          let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
          let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
          event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_6: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_6) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_5: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_5) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_23: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_23) in
              out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        find [unique] u_15 = ri_15 <= qH suchthat defined(r_16[ri_15], x1_1[ri_15]) && (x1_1 = x1_1[ri_15]) then
          out(ch2[iH], r_16[u_15])
        orfind u_14 = ri_14 <= qTDXM suchthat defined(x_O_1[ri_14], r_17[ri_14]) && (x1_1 = x_O_1[ri_14]) then
          out(ch2[iH], r_17[u_14])
        orfind u_13 = ri_13 <= qCPU suchthat defined(x_O_2[ri_13], r_18[ri_13]) && (x1_1 = x_O_2[ri_13]) then
          out(ch2[iH], r_18[u_13])
        else
          new r_16: hashoutput;
          out(ch2[iH], r_16)
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pkgen2_1(r3_2), rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        let tdi_TDXM: tdi_t = get_tdi in
        let x_O_1: bitstring = tdi_t2bitstring(tdi_TDXM) in
        find [unique] u_12 = ri_12 <= qH suchthat defined(r_16[ri_12], x1_1[ri_12]) && (x_O_1 = x1_1[ri_12]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_16[u_12], rdata_TDXM) in
          new r_38: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_38) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_39: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_39) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_11 = ri_11 <= qTDXM suchthat defined(r_17[ri_11]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17[u_11], rdata_TDXM) in
          new r_40: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_40) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_41: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_41) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_10 = ri_10 <= qCPU suchthat defined(x_O_2[ri_10], r_18[ri_10]) && (x_O_1 = x_O_2[ri_10]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_18[u_10], rdata_TDXM) in
          new r_42: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_42) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_43: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_43) in
          out(c11[i_2], m4_TDXM)
        )
        else
          new r_17: hashoutput;
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17, rdata_TDXM) in
          new r_36: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_36) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_37: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_37) in
          out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        let tcbi_CPU: tcbi_t = get_tcbi in
        let x_O_2: bitstring = tcbi_t2bitstring(tcbi_CPU) in
        find [unique] u_9 = ri_9 <= qH suchthat defined(r_16[ri_9], x1_1[ri_9]) && (x_O_2 = x1_1[ri_9]) then
        (
          let res2_CPU: res_t = get_res in
          let res1_CPU: res_t = get_res in
          let csvn_CPU: csvn_t = get_csvn in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_16[u_9], tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_16[u_9], tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_30: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_30) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_31: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_31) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_8 = ri_8 <= qTDXM suchthat defined(x_O_1[ri_8], r_17[ri_8]) && (x_O_2 = x_O_1[ri_8]) then
        (
          let res2_CPU: res_t = get_res in
          let res1_CPU: res_t = get_res in
          let csvn_CPU: csvn_t = get_csvn in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_17[u_8], tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_17[u_8], tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_32: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_32) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_33: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_33) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_7 = ri_7 <= qCPU suchthat defined(r_18[ri_7]) then
        (
          let res2_CPU: res_t = get_res in
          let res1_CPU: res_t = get_res in
          let csvn_CPU: csvn_t = get_csvn in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_18[u_7], tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_18[u_7], tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_34: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_34) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_35: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_35) in
          out(c17[i_3], m4_CPU)
        )
        else
          new r_18: hashoutput;
          let res2_CPU: res_t = get_res in
          let res1_CPU: res_t = get_res in
          let csvn_CPU: csvn_t = get_csvn in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_18, tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_18, tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_28: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_28) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_29: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_29) in
          out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        let x_Oeq_1: bitstring = tcbi_t2bitstring(tcbi_QE) in
        find [unique] u_3 = ri_3 <= qH suchthat defined(r_16[ri_3], x1_1[ri_3]) && (x_Oeq_1 = x1_1[ri_3]) then
        (
          let x_Oeq: bitstring = tdi_t2bitstring(tdi_QE) in
          find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_Oeq = x1_1[ri_6]) then
          (
            if (tcbh_QE = r_16[u_3]) && (tdih_QE = r_16[u_6]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_19: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_19) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            new r3_14: enc_seed;
            let m1: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_14) in
            out(c19[i_4], m1)
          )
          orfind u_5 = ri_5 <= qTDXM suchthat defined(r_17[ri_5], tdi_TDXM[ri_5]) && (tdi_QE = tdi_TDXM[ri_5]) then
          (
            if (tcbh_QE = r_16[u_3]) && (tdih_QE = r_17[u_5]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_20: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_20) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            new r3_15: enc_seed;
            let m1_1: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_15) in
            out(c19[i_4], m1_1)
          )
          orfind u_4 = ri_4 <= qCPU suchthat defined(r_18[ri_4], x_O_2[ri_4]) && (x_Oeq = x_O_2[ri_4]) then
          (
            if (tcbh_QE = r_16[u_3]) && (tdih_QE = r_18[u_4]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_21: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_21) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            new r3_16: enc_seed;
            let m1_2: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_16) in
            out(c19[i_4], m1_2)
          )
        )
        orfind u_2 = ri_2 <= qTDXM suchthat defined(x_O_1[ri_2], r_17[ri_2]) && (x_Oeq_1 = x_O_1[ri_2]) then
        (
          let x_Oeq: bitstring = tdi_t2bitstring(tdi_QE) in
          find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_Oeq = x1_1[ri_6]) then
          (
            if (tcbh_QE = r_17[u_2]) && (tdih_QE = r_16[u_6]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_22: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_22) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            new r3_17: enc_seed;
            let m1_3: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_17) in
            out(c19[i_4], m1_3)
          )
          orfind  suchthat x_Oeq = x_O_1[u_2] then
          (
            if (tcbh_QE = r_17[u_2]) && (tdih_QE = r_17[u_2]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_23: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_23) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            new r3_18: enc_seed;
            let m1_4: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_18) in
            out(c19[i_4], m1_4)
          )
          orfind u_4 = ri_4 <= qCPU suchthat defined(r_18[ri_4], x_O_2[ri_4]) && (x_Oeq = x_O_2[ri_4]) then
          (
            if (tcbh_QE = r_17[u_2]) && (tdih_QE = r_18[u_4]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_24: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_24) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            new r3_19: enc_seed;
            let m1_5: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_19) in
            out(c19[i_4], m1_5)
          )
        )
        orfind u_1 = ri_1 <= qCPU suchthat defined(x_O_2[ri_1], r_18[ri_1], tcbi_CPU[ri_1]) && (tcbi_QE = tcbi_CPU[ri_1]) then
        (
          let x_Oeq: bitstring = tdi_t2bitstring(tdi_QE) in
          find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_Oeq = x1_1[ri_6]) then
          (
            if (tcbh_QE = r_18[u_1]) && (tdih_QE = r_16[u_6]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_25: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_25) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            new r3_20: enc_seed;
            let m1_6: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_20) in
            out(c19[i_4], m1_6)
          )
          orfind u_5 = ri_5 <= qTDXM suchthat defined(r_17[ri_5], tdi_TDXM[ri_5]) && (tdi_QE = tdi_TDXM[ri_5]) then
          (
            if (tcbh_QE = r_18[u_1]) && (tdih_QE = r_17[u_5]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_26: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_26) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            new r3_21: enc_seed;
            let m1_7: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_21) in
            out(c19[i_4], m1_7)
          )
          orfind  suchthat x_Oeq = x_O_2[u_1] then
          (
            if (tcbh_QE = r_18[u_1]) && (tdih_QE = r_18[u_1]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_27: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_27) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            new r3_22: enc_seed;
            let m1_8: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_22) in
            out(c19[i_4], m1_8)
          )
        )
      ))


Applying equivalence uf_cma(sign) with r1 [probability Psign(time(context for game 32) + time + (-1 + qChallenger) * time(verify, length(tdr_without_mac_t2bitstring)), 0, -inf)]
  - Equivalence uf_cma(sign) with variables: r1 -> r
yields

Game 33 is
      in(start, ());
      new r1: skeyseed;
      new r2_3: keyseed;
      new r3_2: keyseed;
      new sym_key: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        find u_25 = ri_25 <= qChallenger suchthat defined(session_key[ri_25], m2_2[ri_25]) && (m1_Ch = m2_2[ri_25]) then
        (
          let quote_t2bitstring(quote_Ch: quote_t) = key2bitstring(session_key[u_25]) in
          let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
          if (let m1_10: bitstring = tdr_without_mac_t2bitstring(tdr_without_mac_Ch) in (let si1_1: signature = sig_Ch in {46}find  else false)) then
          let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
          let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
          let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
          event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_8: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_8) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_7: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_7) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_24: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_24) in
              out(c23[i], m2_Ch)
        )
        orfind u_24 = ri_24 <= qQE suchthat defined(res2_QE[ri_24], tdih_QE[ri_24], tcbh_QE[ri_24], csvn_QE[ri_24], res1_QE[ri_24], rtyp_QE[ri_24], rdata_QE[ri_24], m1[ri_24]) && (m1_Ch = m1[ri_24]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_24] in
          event QuoteVerified(rtyp_QE[u_24], res1_QE[u_24], csvn_QE[u_24], tcbh_QE[u_24], tdih_QE[u_24], rdata_QE[u_24], res2_QE[u_24]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_10: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_10) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_9: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_9) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_25: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_25) in
              out(c23[i], m2_Ch)
        )
        orfind u_23 = ri_23 <= qQE suchthat defined(res2_QE[ri_23], tdih_QE[ri_23], tcbh_QE[ri_23], csvn_QE[ri_23], res1_QE[ri_23], rtyp_QE[ri_23], rdata_QE[ri_23], m1_1[ri_23]) && (m1_Ch = m1_1[ri_23]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_23] in
          event QuoteVerified(rtyp_QE[u_23], res1_QE[u_23], csvn_QE[u_23], tcbh_QE[u_23], tdih_QE[u_23], rdata_QE[u_23], res2_QE[u_23]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_12: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_12) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_11: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_11) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_26: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_26) in
              out(c23[i], m2_Ch)
        )
        orfind u_22 = ri_22 <= qQE suchthat defined(res2_QE[ri_22], tdih_QE[ri_22], tcbh_QE[ri_22], csvn_QE[ri_22], res1_QE[ri_22], rtyp_QE[ri_22], rdata_QE[ri_22], m1_2[ri_22]) && (m1_Ch = m1_2[ri_22]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_22] in
          event QuoteVerified(rtyp_QE[u_22], res1_QE[u_22], csvn_QE[u_22], tcbh_QE[u_22], tdih_QE[u_22], rdata_QE[u_22], res2_QE[u_22]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_14: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_14) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_13: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_13) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_27: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_27) in
              out(c23[i], m2_Ch)
        )
        orfind u_21 = ri_21 <= qQE suchthat defined(res2_QE[ri_21], tdih_QE[ri_21], tcbh_QE[ri_21], csvn_QE[ri_21], res1_QE[ri_21], rtyp_QE[ri_21], rdata_QE[ri_21], m1_3[ri_21]) && (m1_Ch = m1_3[ri_21]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_21] in
          event QuoteVerified(rtyp_QE[u_21], res1_QE[u_21], csvn_QE[u_21], tcbh_QE[u_21], tdih_QE[u_21], rdata_QE[u_21], res2_QE[u_21]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_16: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_16) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_15: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_15) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_28: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_28) in
              out(c23[i], m2_Ch)
        )
        orfind u_20 = ri_20 <= qQE suchthat defined(res2_QE[ri_20], tdih_QE[ri_20], tcbh_QE[ri_20], csvn_QE[ri_20], res1_QE[ri_20], rtyp_QE[ri_20], rdata_QE[ri_20], m1_4[ri_20]) && (m1_Ch = m1_4[ri_20]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_20] in
          event QuoteVerified(rtyp_QE[u_20], res1_QE[u_20], csvn_QE[u_20], tcbh_QE[u_20], tdih_QE[u_20], rdata_QE[u_20], res2_QE[u_20]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_18: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_18) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_17: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_17) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_29: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_29) in
              out(c23[i], m2_Ch)
        )
        orfind u_19 = ri_19 <= qQE suchthat defined(res2_QE[ri_19], tdih_QE[ri_19], tcbh_QE[ri_19], csvn_QE[ri_19], res1_QE[ri_19], rtyp_QE[ri_19], rdata_QE[ri_19], m1_5[ri_19]) && (m1_Ch = m1_5[ri_19]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_19] in
          event QuoteVerified(rtyp_QE[u_19], res1_QE[u_19], csvn_QE[u_19], tcbh_QE[u_19], tdih_QE[u_19], rdata_QE[u_19], res2_QE[u_19]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_20: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_20) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_19: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_19) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_30: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_30) in
              out(c23[i], m2_Ch)
        )
        orfind u_18 = ri_18 <= qQE suchthat defined(res2_QE[ri_18], tdih_QE[ri_18], tcbh_QE[ri_18], csvn_QE[ri_18], res1_QE[ri_18], rtyp_QE[ri_18], rdata_QE[ri_18], m1_6[ri_18]) && (m1_Ch = m1_6[ri_18]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_18] in
          event QuoteVerified(rtyp_QE[u_18], res1_QE[u_18], csvn_QE[u_18], tcbh_QE[u_18], tdih_QE[u_18], rdata_QE[u_18], res2_QE[u_18]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_22: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_22) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_21: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_21) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_31: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_31) in
              out(c23[i], m2_Ch)
        )
        orfind u_17 = ri_17 <= qQE suchthat defined(res2_QE[ri_17], tdih_QE[ri_17], tcbh_QE[ri_17], csvn_QE[ri_17], res1_QE[ri_17], rtyp_QE[ri_17], rdata_QE[ri_17], m1_7[ri_17]) && (m1_Ch = m1_7[ri_17]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_17] in
          event QuoteVerified(rtyp_QE[u_17], res1_QE[u_17], csvn_QE[u_17], tcbh_QE[u_17], tdih_QE[u_17], rdata_QE[u_17], res2_QE[u_17]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_24: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_24) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_23: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_23) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_32: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_32) in
              out(c23[i], m2_Ch)
        )
        orfind u_16 = ri_16 <= qQE suchthat defined(res2_QE[ri_16], tdih_QE[ri_16], tcbh_QE[ri_16], csvn_QE[ri_16], res1_QE[ri_16], rtyp_QE[ri_16], rdata_QE[ri_16], m1_8[ri_16]) && (m1_Ch = m1_8[ri_16]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_16] in
          event QuoteVerified(rtyp_QE[u_16], res1_QE[u_16], csvn_QE[u_16], tcbh_QE[u_16], tdih_QE[u_16], rdata_QE[u_16], res2_QE[u_16]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_26: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_26) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_25: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_25) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_33: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_33) in
              out(c23[i], m2_Ch)
        )
        else
          let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec2(m1_Ch, skgen2_1(r2_3)) in
          let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
          if (let m1_9: bitstring = tdr_without_mac_t2bitstring(tdr_without_mac_Ch) in (let si1: signature = sig_Ch in {1119}find  else false)) then
          let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
          let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
          let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
          event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_6: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_6) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_5: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_5) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_23: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_23) in
              out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        find [unique] u_15 = ri_15 <= qH suchthat defined(r_16[ri_15], x1_1[ri_15]) && (x1_1 = x1_1[ri_15]) then
          out(ch2[iH], r_16[u_15])
        orfind u_14 = ri_14 <= qTDXM suchthat defined(x_O_1[ri_14], r_17[ri_14]) && (x1_1 = x_O_1[ri_14]) then
          out(ch2[iH], r_17[u_14])
        orfind u_13 = ri_13 <= qCPU suchthat defined(x_O_2[ri_13], r_18[ri_13]) && (x1_1 = x_O_2[ri_13]) then
          out(ch2[iH], r_18[u_13])
        else
          new r_16: hashoutput;
          out(ch2[iH], r_16)
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pkgen2_1(r3_2), rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        let tdi_TDXM: tdi_t = get_tdi in
        let x_O_1: bitstring = tdi_t2bitstring(tdi_TDXM) in
        find [unique] u_12 = ri_12 <= qH suchthat defined(r_16[ri_12], x1_1[ri_12]) && (x_O_1 = x1_1[ri_12]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_16[u_12], rdata_TDXM) in
          new r_38: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_38) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_39: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_39) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_11 = ri_11 <= qTDXM suchthat defined(r_17[ri_11]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17[u_11], rdata_TDXM) in
          new r_40: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_40) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_41: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_41) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_10 = ri_10 <= qCPU suchthat defined(x_O_2[ri_10], r_18[ri_10]) && (x_O_1 = x_O_2[ri_10]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_18[u_10], rdata_TDXM) in
          new r_42: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_42) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_43: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_43) in
          out(c11[i_2], m4_TDXM)
        )
        else
          new r_17: hashoutput;
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17, rdata_TDXM) in
          new r_36: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_36) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_37: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_37) in
          out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        let tcbi_CPU: tcbi_t = get_tcbi in
        let x_O_2: bitstring = tcbi_t2bitstring(tcbi_CPU) in
        find [unique] u_9 = ri_9 <= qH suchthat defined(r_16[ri_9], x1_1[ri_9]) && (x_O_2 = x1_1[ri_9]) then
        (
          let res2_CPU: res_t = get_res in
          let res1_CPU: res_t = get_res in
          let csvn_CPU: csvn_t = get_csvn in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_16[u_9], tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_16[u_9], tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_30: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_30) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_31: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_31) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_8 = ri_8 <= qTDXM suchthat defined(x_O_1[ri_8], r_17[ri_8]) && (x_O_2 = x_O_1[ri_8]) then
        (
          let res2_CPU: res_t = get_res in
          let res1_CPU: res_t = get_res in
          let csvn_CPU: csvn_t = get_csvn in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_17[u_8], tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_17[u_8], tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_32: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_32) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_33: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_33) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_7 = ri_7 <= qCPU suchthat defined(r_18[ri_7]) then
        (
          let res2_CPU: res_t = get_res in
          let res1_CPU: res_t = get_res in
          let csvn_CPU: csvn_t = get_csvn in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_18[u_7], tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_18[u_7], tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_34: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_34) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_35: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_35) in
          out(c17[i_3], m4_CPU)
        )
        else
          new r_18: hashoutput;
          let res2_CPU: res_t = get_res in
          let res1_CPU: res_t = get_res in
          let csvn_CPU: csvn_t = get_csvn in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_18, tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_18, tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_28: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_28) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_29: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_29) in
          out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        let x_Oeq_1: bitstring = tcbi_t2bitstring(tcbi_QE) in
        find [unique] u_3 = ri_3 <= qH suchthat defined(r_16[ri_3], x1_1[ri_3]) && (x_Oeq_1 = x1_1[ri_3]) then
        (
          let x_Oeq: bitstring = tdi_t2bitstring(tdi_QE) in
          find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_Oeq = x1_1[ri_6]) then
          (
            if (tcbh_QE = r_16[u_3]) && (tdih_QE = r_16[u_6]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_19: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_19) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            new r3_14: enc_seed;
            let m1: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_14) in
            out(c19[i_4], m1)
          )
          orfind u_5 = ri_5 <= qTDXM suchthat defined(r_17[ri_5], tdi_TDXM[ri_5]) && (tdi_QE = tdi_TDXM[ri_5]) then
          (
            if (tcbh_QE = r_16[u_3]) && (tdih_QE = r_17[u_5]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_20: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_20) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            new r3_15: enc_seed;
            let m1_1: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_15) in
            out(c19[i_4], m1_1)
          )
          orfind u_4 = ri_4 <= qCPU suchthat defined(r_18[ri_4], x_O_2[ri_4]) && (x_Oeq = x_O_2[ri_4]) then
          (
            if (tcbh_QE = r_16[u_3]) && (tdih_QE = r_18[u_4]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_21: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_21) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            new r3_16: enc_seed;
            let m1_2: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_16) in
            out(c19[i_4], m1_2)
          )
        )
        orfind u_2 = ri_2 <= qTDXM suchthat defined(x_O_1[ri_2], r_17[ri_2]) && (x_Oeq_1 = x_O_1[ri_2]) then
        (
          let x_Oeq: bitstring = tdi_t2bitstring(tdi_QE) in
          find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_Oeq = x1_1[ri_6]) then
          (
            if (tcbh_QE = r_17[u_2]) && (tdih_QE = r_16[u_6]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_22: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_22) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            new r3_17: enc_seed;
            let m1_3: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_17) in
            out(c19[i_4], m1_3)
          )
          orfind  suchthat x_Oeq = x_O_1[u_2] then
          (
            if (tcbh_QE = r_17[u_2]) && (tdih_QE = r_17[u_2]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_23: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_23) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            new r3_18: enc_seed;
            let m1_4: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_18) in
            out(c19[i_4], m1_4)
          )
          orfind u_4 = ri_4 <= qCPU suchthat defined(r_18[ri_4], x_O_2[ri_4]) && (x_Oeq = x_O_2[ri_4]) then
          (
            if (tcbh_QE = r_17[u_2]) && (tdih_QE = r_18[u_4]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_24: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_24) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            new r3_19: enc_seed;
            let m1_5: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_19) in
            out(c19[i_4], m1_5)
          )
        )
        orfind u_1 = ri_1 <= qCPU suchthat defined(x_O_2[ri_1], r_18[ri_1], tcbi_CPU[ri_1]) && (tcbi_QE = tcbi_CPU[ri_1]) then
        (
          let x_Oeq: bitstring = tdi_t2bitstring(tdi_QE) in
          find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_Oeq = x1_1[ri_6]) then
          (
            if (tcbh_QE = r_18[u_1]) && (tdih_QE = r_16[u_6]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_25: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_25) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            new r3_20: enc_seed;
            let m1_6: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_20) in
            out(c19[i_4], m1_6)
          )
          orfind u_5 = ri_5 <= qTDXM suchthat defined(r_17[ri_5], tdi_TDXM[ri_5]) && (tdi_QE = tdi_TDXM[ri_5]) then
          (
            if (tcbh_QE = r_18[u_1]) && (tdih_QE = r_17[u_5]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_26: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_26) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            new r3_21: enc_seed;
            let m1_7: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_21) in
            out(c19[i_4], m1_7)
          )
          orfind  suchthat x_Oeq = x_O_2[u_1] then
          (
            if (tcbh_QE = r_18[u_1]) && (tdih_QE = r_18[u_1]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_27: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_27) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            new r3_22: enc_seed;
            let m1_8: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_22) in
            out(c19[i_4], m1_8)
          )
        )
      ))


Applying simplify (non-expanded game)
  - Simplification pass
    - Find at 46 removed (else branch kept if any)
    - Find at 1119 removed (else branch kept if any)
yields

Game 34 is
      in(start, ());
      new r1: skeyseed;
      new r2_3: keyseed;
      new r3_2: keyseed;
      new sym_key: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        find u_25 = ri_25 <= qChallenger suchthat defined(session_key[ri_25], m2_2[ri_25]) && (m1_Ch = m2_2[ri_25]) then
        (
  {30}    let quote_t2bitstring(quote_Ch: quote_t) = key2bitstring(session_key[u_25]) in
  {35}    let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
  {38}    if {39}(let m1_10: bitstring = tdr_without_mac_t2bitstring(tdr_without_mac_Ch) in {43}(let si1_1: signature = sig_Ch in false)) then
          let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
          let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
          let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
          event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_8: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_8) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_7: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_7) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_24: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_24) in
              out(c23[i], m2_Ch)
        )
        orfind u_24 = ri_24 <= qQE suchthat defined(res2_QE[ri_24], tdih_QE[ri_24], tcbh_QE[ri_24], csvn_QE[ri_24], res1_QE[ri_24], rtyp_QE[ri_24], rdata_QE[ri_24], m1[ri_24]) && (m1_Ch = m1[ri_24]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_24] in
          event QuoteVerified(rtyp_QE[u_24], res1_QE[u_24], csvn_QE[u_24], tcbh_QE[u_24], tdih_QE[u_24], rdata_QE[u_24], res2_QE[u_24]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_10: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_10) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_9: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_9) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_25: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_25) in
              out(c23[i], m2_Ch)
        )
        orfind u_23 = ri_23 <= qQE suchthat defined(res2_QE[ri_23], tdih_QE[ri_23], tcbh_QE[ri_23], csvn_QE[ri_23], res1_QE[ri_23], rtyp_QE[ri_23], rdata_QE[ri_23], m1_1[ri_23]) && (m1_Ch = m1_1[ri_23]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_23] in
          event QuoteVerified(rtyp_QE[u_23], res1_QE[u_23], csvn_QE[u_23], tcbh_QE[u_23], tdih_QE[u_23], rdata_QE[u_23], res2_QE[u_23]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_12: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_12) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_11: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_11) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_26: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_26) in
              out(c23[i], m2_Ch)
        )
        orfind u_22 = ri_22 <= qQE suchthat defined(res2_QE[ri_22], tdih_QE[ri_22], tcbh_QE[ri_22], csvn_QE[ri_22], res1_QE[ri_22], rtyp_QE[ri_22], rdata_QE[ri_22], m1_2[ri_22]) && (m1_Ch = m1_2[ri_22]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_22] in
          event QuoteVerified(rtyp_QE[u_22], res1_QE[u_22], csvn_QE[u_22], tcbh_QE[u_22], tdih_QE[u_22], rdata_QE[u_22], res2_QE[u_22]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_14: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_14) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_13: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_13) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_27: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_27) in
              out(c23[i], m2_Ch)
        )
        orfind u_21 = ri_21 <= qQE suchthat defined(res2_QE[ri_21], tdih_QE[ri_21], tcbh_QE[ri_21], csvn_QE[ri_21], res1_QE[ri_21], rtyp_QE[ri_21], rdata_QE[ri_21], m1_3[ri_21]) && (m1_Ch = m1_3[ri_21]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_21] in
          event QuoteVerified(rtyp_QE[u_21], res1_QE[u_21], csvn_QE[u_21], tcbh_QE[u_21], tdih_QE[u_21], rdata_QE[u_21], res2_QE[u_21]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_16: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_16) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_15: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_15) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_28: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_28) in
              out(c23[i], m2_Ch)
        )
        orfind u_20 = ri_20 <= qQE suchthat defined(res2_QE[ri_20], tdih_QE[ri_20], tcbh_QE[ri_20], csvn_QE[ri_20], res1_QE[ri_20], rtyp_QE[ri_20], rdata_QE[ri_20], m1_4[ri_20]) && (m1_Ch = m1_4[ri_20]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_20] in
          event QuoteVerified(rtyp_QE[u_20], res1_QE[u_20], csvn_QE[u_20], tcbh_QE[u_20], tdih_QE[u_20], rdata_QE[u_20], res2_QE[u_20]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_18: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_18) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_17: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_17) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_29: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_29) in
              out(c23[i], m2_Ch)
        )
        orfind u_19 = ri_19 <= qQE suchthat defined(res2_QE[ri_19], tdih_QE[ri_19], tcbh_QE[ri_19], csvn_QE[ri_19], res1_QE[ri_19], rtyp_QE[ri_19], rdata_QE[ri_19], m1_5[ri_19]) && (m1_Ch = m1_5[ri_19]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_19] in
          event QuoteVerified(rtyp_QE[u_19], res1_QE[u_19], csvn_QE[u_19], tcbh_QE[u_19], tdih_QE[u_19], rdata_QE[u_19], res2_QE[u_19]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_20: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_20) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_19: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_19) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_30: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_30) in
              out(c23[i], m2_Ch)
        )
        orfind u_18 = ri_18 <= qQE suchthat defined(res2_QE[ri_18], tdih_QE[ri_18], tcbh_QE[ri_18], csvn_QE[ri_18], res1_QE[ri_18], rtyp_QE[ri_18], rdata_QE[ri_18], m1_6[ri_18]) && (m1_Ch = m1_6[ri_18]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_18] in
          event QuoteVerified(rtyp_QE[u_18], res1_QE[u_18], csvn_QE[u_18], tcbh_QE[u_18], tdih_QE[u_18], rdata_QE[u_18], res2_QE[u_18]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_22: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_22) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_21: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_21) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_31: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_31) in
              out(c23[i], m2_Ch)
        )
        orfind u_17 = ri_17 <= qQE suchthat defined(res2_QE[ri_17], tdih_QE[ri_17], tcbh_QE[ri_17], csvn_QE[ri_17], res1_QE[ri_17], rtyp_QE[ri_17], rdata_QE[ri_17], m1_7[ri_17]) && (m1_Ch = m1_7[ri_17]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_17] in
          event QuoteVerified(rtyp_QE[u_17], res1_QE[u_17], csvn_QE[u_17], tcbh_QE[u_17], tdih_QE[u_17], rdata_QE[u_17], res2_QE[u_17]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_24: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_24) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_23: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_23) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_32: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_32) in
              out(c23[i], m2_Ch)
        )
        orfind u_16 = ri_16 <= qQE suchthat defined(res2_QE[ri_16], tdih_QE[ri_16], tcbh_QE[ri_16], csvn_QE[ri_16], res1_QE[ri_16], rtyp_QE[ri_16], rdata_QE[ri_16], m1_8[ri_16]) && (m1_Ch = m1_8[ri_16]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_16] in
          event QuoteVerified(rtyp_QE[u_16], res1_QE[u_16], csvn_QE[u_16], tcbh_QE[u_16], tdih_QE[u_16], rdata_QE[u_16], res2_QE[u_16]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_26: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_26) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_25: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_25) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_33: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_33) in
              out(c23[i], m2_Ch)
        )
        else
{1101}    let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec2(m1_Ch, skgen2_1(r2_3)) in
{1107}    let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
{1110}    if {1111}(let m1_9: bitstring = tdr_without_mac_t2bitstring(tdr_without_mac_Ch) in {1115}(let si1: signature = sig_Ch in false)) then
          let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
          let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
          let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
          event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_6: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_6) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_5: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_5) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_23: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_23) in
              out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        find [unique] u_15 = ri_15 <= qH suchthat defined(r_16[ri_15], x1_1[ri_15]) && (x1_1 = x1_1[ri_15]) then
          out(ch2[iH], r_16[u_15])
        orfind u_14 = ri_14 <= qTDXM suchthat defined(x_O_1[ri_14], r_17[ri_14]) && (x1_1 = x_O_1[ri_14]) then
          out(ch2[iH], r_17[u_14])
        orfind u_13 = ri_13 <= qCPU suchthat defined(x_O_2[ri_13], r_18[ri_13]) && (x1_1 = x_O_2[ri_13]) then
          out(ch2[iH], r_18[u_13])
        else
          new r_16: hashoutput;
          out(ch2[iH], r_16)
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pkgen2_1(r3_2), rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        let tdi_TDXM: tdi_t = get_tdi in
        let x_O_1: bitstring = tdi_t2bitstring(tdi_TDXM) in
        find [unique] u_12 = ri_12 <= qH suchthat defined(r_16[ri_12], x1_1[ri_12]) && (x_O_1 = x1_1[ri_12]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_16[u_12], rdata_TDXM) in
          new r_38: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_38) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_39: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_39) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_11 = ri_11 <= qTDXM suchthat defined(r_17[ri_11]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17[u_11], rdata_TDXM) in
          new r_40: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_40) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_41: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_41) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_10 = ri_10 <= qCPU suchthat defined(x_O_2[ri_10], r_18[ri_10]) && (x_O_1 = x_O_2[ri_10]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_18[u_10], rdata_TDXM) in
          new r_42: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_42) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_43: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_43) in
          out(c11[i_2], m4_TDXM)
        )
        else
          new r_17: hashoutput;
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17, rdata_TDXM) in
          new r_36: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_36) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_37: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_37) in
          out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        let tcbi_CPU: tcbi_t = get_tcbi in
        let x_O_2: bitstring = tcbi_t2bitstring(tcbi_CPU) in
        find [unique] u_9 = ri_9 <= qH suchthat defined(r_16[ri_9], x1_1[ri_9]) && (x_O_2 = x1_1[ri_9]) then
        (
          let res2_CPU: res_t = get_res in
          let res1_CPU: res_t = get_res in
          let csvn_CPU: csvn_t = get_csvn in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_16[u_9], tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_16[u_9], tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_30: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_30) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_31: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_31) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_8 = ri_8 <= qTDXM suchthat defined(x_O_1[ri_8], r_17[ri_8]) && (x_O_2 = x_O_1[ri_8]) then
        (
          let res2_CPU: res_t = get_res in
          let res1_CPU: res_t = get_res in
          let csvn_CPU: csvn_t = get_csvn in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_17[u_8], tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_17[u_8], tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_32: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_32) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_33: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_33) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_7 = ri_7 <= qCPU suchthat defined(r_18[ri_7]) then
        (
          let res2_CPU: res_t = get_res in
          let res1_CPU: res_t = get_res in
          let csvn_CPU: csvn_t = get_csvn in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_18[u_7], tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_18[u_7], tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_34: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_34) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_35: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_35) in
          out(c17[i_3], m4_CPU)
        )
        else
          new r_18: hashoutput;
          let res2_CPU: res_t = get_res in
          let res1_CPU: res_t = get_res in
          let csvn_CPU: csvn_t = get_csvn in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_18, tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_18, tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_28: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_28) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_29: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_29) in
          out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        let x_Oeq_1: bitstring = tcbi_t2bitstring(tcbi_QE) in
        find [unique] u_3 = ri_3 <= qH suchthat defined(r_16[ri_3], x1_1[ri_3]) && (x_Oeq_1 = x1_1[ri_3]) then
        (
          let x_Oeq: bitstring = tdi_t2bitstring(tdi_QE) in
          find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_Oeq = x1_1[ri_6]) then
          (
            if (tcbh_QE = r_16[u_3]) && (tdih_QE = r_16[u_6]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_19: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_19) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            new r3_14: enc_seed;
            let m1: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_14) in
            out(c19[i_4], m1)
          )
          orfind u_5 = ri_5 <= qTDXM suchthat defined(r_17[ri_5], tdi_TDXM[ri_5]) && (tdi_QE = tdi_TDXM[ri_5]) then
          (
            if (tcbh_QE = r_16[u_3]) && (tdih_QE = r_17[u_5]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_20: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_20) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            new r3_15: enc_seed;
            let m1_1: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_15) in
            out(c19[i_4], m1_1)
          )
          orfind u_4 = ri_4 <= qCPU suchthat defined(r_18[ri_4], x_O_2[ri_4]) && (x_Oeq = x_O_2[ri_4]) then
          (
            if (tcbh_QE = r_16[u_3]) && (tdih_QE = r_18[u_4]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_21: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_21) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            new r3_16: enc_seed;
            let m1_2: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_16) in
            out(c19[i_4], m1_2)
          )
        )
        orfind u_2 = ri_2 <= qTDXM suchthat defined(x_O_1[ri_2], r_17[ri_2]) && (x_Oeq_1 = x_O_1[ri_2]) then
        (
          let x_Oeq: bitstring = tdi_t2bitstring(tdi_QE) in
          find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_Oeq = x1_1[ri_6]) then
          (
            if (tcbh_QE = r_17[u_2]) && (tdih_QE = r_16[u_6]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_22: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_22) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            new r3_17: enc_seed;
            let m1_3: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_17) in
            out(c19[i_4], m1_3)
          )
          orfind  suchthat x_Oeq = x_O_1[u_2] then
          (
            if (tcbh_QE = r_17[u_2]) && (tdih_QE = r_17[u_2]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_23: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_23) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            new r3_18: enc_seed;
            let m1_4: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_18) in
            out(c19[i_4], m1_4)
          )
          orfind u_4 = ri_4 <= qCPU suchthat defined(r_18[ri_4], x_O_2[ri_4]) && (x_Oeq = x_O_2[ri_4]) then
          (
            if (tcbh_QE = r_17[u_2]) && (tdih_QE = r_18[u_4]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_24: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_24) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            new r3_19: enc_seed;
            let m1_5: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_19) in
            out(c19[i_4], m1_5)
          )
        )
        orfind u_1 = ri_1 <= qCPU suchthat defined(x_O_2[ri_1], r_18[ri_1], tcbi_CPU[ri_1]) && (tcbi_QE = tcbi_CPU[ri_1]) then
        (
          let x_Oeq: bitstring = tdi_t2bitstring(tdi_QE) in
          find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_Oeq = x1_1[ri_6]) then
          (
            if (tcbh_QE = r_18[u_1]) && (tdih_QE = r_16[u_6]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_25: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_25) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            new r3_20: enc_seed;
            let m1_6: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_20) in
            out(c19[i_4], m1_6)
          )
          orfind u_5 = ri_5 <= qTDXM suchthat defined(r_17[ri_5], tdi_TDXM[ri_5]) && (tdi_QE = tdi_TDXM[ri_5]) then
          (
            if (tcbh_QE = r_18[u_1]) && (tdih_QE = r_17[u_5]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_26: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_26) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            new r3_21: enc_seed;
            let m1_7: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_21) in
            out(c19[i_4], m1_7)
          )
          orfind  suchthat x_Oeq = x_O_2[u_1] then
          (
            if (tcbh_QE = r_18[u_1]) && (tdih_QE = r_18[u_1]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_27: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_27) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            new r3_22: enc_seed;
            let m1_8: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_22) in
            out(c19[i_4], m1_8)
          )
        )
      ))


Applying expand
  - Expand if/find/let
    - Test at 1110 always false
    - Remove let at 1115
    - Remove let at 1111
    - Remove let at 1107
    - Remove let at 1101
    - Test at 38 always false
    - Remove let at 43
    - Remove let at 39
    - Remove let at 35
    - Remove let at 30
yields

Game 35 is
      in(start, ());
   {2}new r1: skeyseed;
      new r2_3: keyseed;
      new r3_2: keyseed;
      new sym_key: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        find u_25 = ri_25 <= qChallenger suchthat defined(session_key[ri_25], m2_2[ri_25]) && (m1_Ch = m2_2[ri_25]) then
          yield
        orfind u_24 = ri_24 <= qQE suchthat defined(res2_QE[ri_24], tdih_QE[ri_24], tcbh_QE[ri_24], csvn_QE[ri_24], res1_QE[ri_24], rtyp_QE[ri_24], rdata_QE[ri_24], m1[ri_24]) && (m1_Ch = m1[ri_24]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_24] in
          event QuoteVerified(rtyp_QE[u_24], res1_QE[u_24], csvn_QE[u_24], tcbh_QE[u_24], tdih_QE[u_24], rdata_QE[u_24], res2_QE[u_24]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_10: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_10) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_9: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_9) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_25: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_25) in
              out(c23[i], m2_Ch)
        )
        orfind u_23 = ri_23 <= qQE suchthat defined(res2_QE[ri_23], tdih_QE[ri_23], tcbh_QE[ri_23], csvn_QE[ri_23], res1_QE[ri_23], rtyp_QE[ri_23], rdata_QE[ri_23], m1_1[ri_23]) && (m1_Ch = m1_1[ri_23]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_23] in
          event QuoteVerified(rtyp_QE[u_23], res1_QE[u_23], csvn_QE[u_23], tcbh_QE[u_23], tdih_QE[u_23], rdata_QE[u_23], res2_QE[u_23]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_12: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_12) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_11: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_11) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_26: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_26) in
              out(c23[i], m2_Ch)
        )
        orfind u_22 = ri_22 <= qQE suchthat defined(res2_QE[ri_22], tdih_QE[ri_22], tcbh_QE[ri_22], csvn_QE[ri_22], res1_QE[ri_22], rtyp_QE[ri_22], rdata_QE[ri_22], m1_2[ri_22]) && (m1_Ch = m1_2[ri_22]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_22] in
          event QuoteVerified(rtyp_QE[u_22], res1_QE[u_22], csvn_QE[u_22], tcbh_QE[u_22], tdih_QE[u_22], rdata_QE[u_22], res2_QE[u_22]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_14: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_14) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_13: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_13) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_27: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_27) in
              out(c23[i], m2_Ch)
        )
        orfind u_21 = ri_21 <= qQE suchthat defined(res2_QE[ri_21], tdih_QE[ri_21], tcbh_QE[ri_21], csvn_QE[ri_21], res1_QE[ri_21], rtyp_QE[ri_21], rdata_QE[ri_21], m1_3[ri_21]) && (m1_Ch = m1_3[ri_21]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_21] in
          event QuoteVerified(rtyp_QE[u_21], res1_QE[u_21], csvn_QE[u_21], tcbh_QE[u_21], tdih_QE[u_21], rdata_QE[u_21], res2_QE[u_21]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_16: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_16) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_15: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_15) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_28: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_28) in
              out(c23[i], m2_Ch)
        )
        orfind u_20 = ri_20 <= qQE suchthat defined(res2_QE[ri_20], tdih_QE[ri_20], tcbh_QE[ri_20], csvn_QE[ri_20], res1_QE[ri_20], rtyp_QE[ri_20], rdata_QE[ri_20], m1_4[ri_20]) && (m1_Ch = m1_4[ri_20]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_20] in
          event QuoteVerified(rtyp_QE[u_20], res1_QE[u_20], csvn_QE[u_20], tcbh_QE[u_20], tdih_QE[u_20], rdata_QE[u_20], res2_QE[u_20]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_18: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_18) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_17: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_17) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_29: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_29) in
              out(c23[i], m2_Ch)
        )
        orfind u_19 = ri_19 <= qQE suchthat defined(res2_QE[ri_19], tdih_QE[ri_19], tcbh_QE[ri_19], csvn_QE[ri_19], res1_QE[ri_19], rtyp_QE[ri_19], rdata_QE[ri_19], m1_5[ri_19]) && (m1_Ch = m1_5[ri_19]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_19] in
          event QuoteVerified(rtyp_QE[u_19], res1_QE[u_19], csvn_QE[u_19], tcbh_QE[u_19], tdih_QE[u_19], rdata_QE[u_19], res2_QE[u_19]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_20: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_20) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_19: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_19) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_30: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_30) in
              out(c23[i], m2_Ch)
        )
        orfind u_18 = ri_18 <= qQE suchthat defined(res2_QE[ri_18], tdih_QE[ri_18], tcbh_QE[ri_18], csvn_QE[ri_18], res1_QE[ri_18], rtyp_QE[ri_18], rdata_QE[ri_18], m1_6[ri_18]) && (m1_Ch = m1_6[ri_18]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_18] in
          event QuoteVerified(rtyp_QE[u_18], res1_QE[u_18], csvn_QE[u_18], tcbh_QE[u_18], tdih_QE[u_18], rdata_QE[u_18], res2_QE[u_18]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_22: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_22) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_21: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_21) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_31: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_31) in
              out(c23[i], m2_Ch)
        )
        orfind u_17 = ri_17 <= qQE suchthat defined(res2_QE[ri_17], tdih_QE[ri_17], tcbh_QE[ri_17], csvn_QE[ri_17], res1_QE[ri_17], rtyp_QE[ri_17], rdata_QE[ri_17], m1_7[ri_17]) && (m1_Ch = m1_7[ri_17]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_17] in
          event QuoteVerified(rtyp_QE[u_17], res1_QE[u_17], csvn_QE[u_17], tcbh_QE[u_17], tdih_QE[u_17], rdata_QE[u_17], res2_QE[u_17]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_24: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_24) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_23: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_23) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_32: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_32) in
              out(c23[i], m2_Ch)
        )
        orfind u_16 = ri_16 <= qQE suchthat defined(res2_QE[ri_16], tdih_QE[ri_16], tcbh_QE[ri_16], csvn_QE[ri_16], res1_QE[ri_16], rtyp_QE[ri_16], rdata_QE[ri_16], m1_8[ri_16]) && (m1_Ch = m1_8[ri_16]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_16] in
          event QuoteVerified(rtyp_QE[u_16], res1_QE[u_16], csvn_QE[u_16], tcbh_QE[u_16], tdih_QE[u_16], rdata_QE[u_16], res2_QE[u_16]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_26: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_26) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_25: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_25) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_33: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_33) in
              out(c23[i], m2_Ch)
        )
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        find [unique] u_15 = ri_15 <= qH suchthat defined(r_16[ri_15], x1_1[ri_15]) && (x1_1 = x1_1[ri_15]) then
          out(ch2[iH], r_16[u_15])
        orfind u_14 = ri_14 <= qTDXM suchthat defined(x_O_1[ri_14], r_17[ri_14]) && (x1_1 = x_O_1[ri_14]) then
          out(ch2[iH], r_17[u_14])
        orfind u_13 = ri_13 <= qCPU suchthat defined(x_O_2[ri_13], r_18[ri_13]) && (x1_1 = x_O_2[ri_13]) then
          out(ch2[iH], r_18[u_13])
        else
          new r_16: hashoutput;
          out(ch2[iH], r_16)
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pkgen2_1(r3_2), rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        let tdi_TDXM: tdi_t = get_tdi in
        let x_O_1: bitstring = tdi_t2bitstring(tdi_TDXM) in
        find [unique] u_12 = ri_12 <= qH suchthat defined(r_16[ri_12], x1_1[ri_12]) && (x_O_1 = x1_1[ri_12]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_16[u_12], rdata_TDXM) in
          new r_38: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_38) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_39: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_39) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_11 = ri_11 <= qTDXM suchthat defined(r_17[ri_11]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17[u_11], rdata_TDXM) in
          new r_40: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_40) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_41: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_41) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_10 = ri_10 <= qCPU suchthat defined(x_O_2[ri_10], r_18[ri_10]) && (x_O_1 = x_O_2[ri_10]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_18[u_10], rdata_TDXM) in
          new r_42: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_42) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_43: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_43) in
          out(c11[i_2], m4_TDXM)
        )
        else
          new r_17: hashoutput;
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17, rdata_TDXM) in
          new r_36: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_36) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_37: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_37) in
          out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        let tcbi_CPU: tcbi_t = get_tcbi in
        let x_O_2: bitstring = tcbi_t2bitstring(tcbi_CPU) in
        find [unique] u_9 = ri_9 <= qH suchthat defined(r_16[ri_9], x1_1[ri_9]) && (x_O_2 = x1_1[ri_9]) then
        (
          let res2_CPU: res_t = get_res in
          let res1_CPU: res_t = get_res in
          let csvn_CPU: csvn_t = get_csvn in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_16[u_9], tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_16[u_9], tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_30: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_30) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_31: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_31) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_8 = ri_8 <= qTDXM suchthat defined(x_O_1[ri_8], r_17[ri_8]) && (x_O_2 = x_O_1[ri_8]) then
        (
          let res2_CPU: res_t = get_res in
          let res1_CPU: res_t = get_res in
          let csvn_CPU: csvn_t = get_csvn in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_17[u_8], tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_17[u_8], tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_32: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_32) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_33: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_33) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_7 = ri_7 <= qCPU suchthat defined(r_18[ri_7]) then
        (
          let res2_CPU: res_t = get_res in
          let res1_CPU: res_t = get_res in
          let csvn_CPU: csvn_t = get_csvn in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_18[u_7], tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_18[u_7], tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_34: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_34) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_35: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_35) in
          out(c17[i_3], m4_CPU)
        )
        else
          new r_18: hashoutput;
          let res2_CPU: res_t = get_res in
          let res1_CPU: res_t = get_res in
          let csvn_CPU: csvn_t = get_csvn in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_18, tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_18, tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_28: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_28) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_29: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_29) in
          out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        let x_Oeq_1: bitstring = tcbi_t2bitstring(tcbi_QE) in
        find [unique] u_3 = ri_3 <= qH suchthat defined(r_16[ri_3], x1_1[ri_3]) && (x_Oeq_1 = x1_1[ri_3]) then
        (
          let x_Oeq: bitstring = tdi_t2bitstring(tdi_QE) in
          find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_Oeq = x1_1[ri_6]) then
          (
            if (tcbh_QE = r_16[u_3]) && (tdih_QE = r_16[u_6]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_19: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_19) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            new r3_14: enc_seed;
            let m1: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_14) in
            out(c19[i_4], m1)
          )
          orfind u_5 = ri_5 <= qTDXM suchthat defined(r_17[ri_5], tdi_TDXM[ri_5]) && (tdi_QE = tdi_TDXM[ri_5]) then
          (
            if (tcbh_QE = r_16[u_3]) && (tdih_QE = r_17[u_5]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_20: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_20) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            new r3_15: enc_seed;
            let m1_1: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_15) in
            out(c19[i_4], m1_1)
          )
          orfind u_4 = ri_4 <= qCPU suchthat defined(r_18[ri_4], x_O_2[ri_4]) && (x_Oeq = x_O_2[ri_4]) then
          (
            if (tcbh_QE = r_16[u_3]) && (tdih_QE = r_18[u_4]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_21: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_21) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            new r3_16: enc_seed;
            let m1_2: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_16) in
            out(c19[i_4], m1_2)
          )
        )
        orfind u_2 = ri_2 <= qTDXM suchthat defined(x_O_1[ri_2], r_17[ri_2]) && (x_Oeq_1 = x_O_1[ri_2]) then
        (
          let x_Oeq: bitstring = tdi_t2bitstring(tdi_QE) in
          find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_Oeq = x1_1[ri_6]) then
          (
            if (tcbh_QE = r_17[u_2]) && (tdih_QE = r_16[u_6]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_22: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_22) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            new r3_17: enc_seed;
            let m1_3: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_17) in
            out(c19[i_4], m1_3)
          )
          orfind  suchthat x_Oeq = x_O_1[u_2] then
          (
            if (tcbh_QE = r_17[u_2]) && (tdih_QE = r_17[u_2]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_23: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_23) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            new r3_18: enc_seed;
            let m1_4: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_18) in
            out(c19[i_4], m1_4)
          )
          orfind u_4 = ri_4 <= qCPU suchthat defined(r_18[ri_4], x_O_2[ri_4]) && (x_Oeq = x_O_2[ri_4]) then
          (
            if (tcbh_QE = r_17[u_2]) && (tdih_QE = r_18[u_4]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_24: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_24) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            new r3_19: enc_seed;
            let m1_5: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_19) in
            out(c19[i_4], m1_5)
          )
        )
        orfind u_1 = ri_1 <= qCPU suchthat defined(x_O_2[ri_1], r_18[ri_1], tcbi_CPU[ri_1]) && (tcbi_QE = tcbi_CPU[ri_1]) then
        (
          let x_Oeq: bitstring = tdi_t2bitstring(tdi_QE) in
          find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_Oeq = x1_1[ri_6]) then
          (
            if (tcbh_QE = r_18[u_1]) && (tdih_QE = r_16[u_6]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_25: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_25) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            new r3_20: enc_seed;
            let m1_6: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_20) in
            out(c19[i_4], m1_6)
          )
          orfind u_5 = ri_5 <= qTDXM suchthat defined(r_17[ri_5], tdi_TDXM[ri_5]) && (tdi_QE = tdi_TDXM[ri_5]) then
          (
            if (tcbh_QE = r_18[u_1]) && (tdih_QE = r_17[u_5]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_26: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_26) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            new r3_21: enc_seed;
            let m1_7: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_21) in
            out(c19[i_4], m1_7)
          )
          orfind  suchthat x_Oeq = x_O_2[u_1] then
          (
            if (tcbh_QE = r_18[u_1]) && (tdih_QE = r_18[u_1]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_27: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_27) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            new r3_22: enc_seed;
            let m1_8: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_22) in
            out(c19[i_4], m1_8)
          )
        )
      ))


Applying simplify
  - Simplification pass
    - Remove random number generation at 2
yields

Game 36 is
      in(start, ());
      new r2_3: keyseed;
      new r3_2: keyseed;
      new sym_key: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        find u_25 = ri_25 <= qChallenger suchthat defined(session_key[ri_25], m2_2[ri_25]) && (m1_Ch = m2_2[ri_25]) then
          yield
        orfind u_24 = ri_24 <= qQE suchthat defined(res2_QE[ri_24], tdih_QE[ri_24], tcbh_QE[ri_24], csvn_QE[ri_24], res1_QE[ri_24], rtyp_QE[ri_24], rdata_QE[ri_24], m1[ri_24]) && (m1_Ch = m1[ri_24]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_24] in
          event QuoteVerified(rtyp_QE[u_24], res1_QE[u_24], csvn_QE[u_24], tcbh_QE[u_24], tdih_QE[u_24], rdata_QE[u_24], res2_QE[u_24]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_10: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_10) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_9: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_9) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_25: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_25) in
              out(c23[i], m2_Ch)
        )
        orfind u_23 = ri_23 <= qQE suchthat defined(res2_QE[ri_23], tdih_QE[ri_23], tcbh_QE[ri_23], csvn_QE[ri_23], res1_QE[ri_23], rtyp_QE[ri_23], rdata_QE[ri_23], m1_1[ri_23]) && (m1_Ch = m1_1[ri_23]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_23] in
          event QuoteVerified(rtyp_QE[u_23], res1_QE[u_23], csvn_QE[u_23], tcbh_QE[u_23], tdih_QE[u_23], rdata_QE[u_23], res2_QE[u_23]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_12: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_12) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_11: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_11) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_26: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_26) in
              out(c23[i], m2_Ch)
        )
        orfind u_22 = ri_22 <= qQE suchthat defined(res2_QE[ri_22], tdih_QE[ri_22], tcbh_QE[ri_22], csvn_QE[ri_22], res1_QE[ri_22], rtyp_QE[ri_22], rdata_QE[ri_22], m1_2[ri_22]) && (m1_Ch = m1_2[ri_22]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_22] in
          event QuoteVerified(rtyp_QE[u_22], res1_QE[u_22], csvn_QE[u_22], tcbh_QE[u_22], tdih_QE[u_22], rdata_QE[u_22], res2_QE[u_22]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_14: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_14) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_13: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_13) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_27: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_27) in
              out(c23[i], m2_Ch)
        )
        orfind u_21 = ri_21 <= qQE suchthat defined(res2_QE[ri_21], tdih_QE[ri_21], tcbh_QE[ri_21], csvn_QE[ri_21], res1_QE[ri_21], rtyp_QE[ri_21], rdata_QE[ri_21], m1_3[ri_21]) && (m1_Ch = m1_3[ri_21]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_21] in
          event QuoteVerified(rtyp_QE[u_21], res1_QE[u_21], csvn_QE[u_21], tcbh_QE[u_21], tdih_QE[u_21], rdata_QE[u_21], res2_QE[u_21]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_16: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_16) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_15: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_15) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_28: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_28) in
              out(c23[i], m2_Ch)
        )
        orfind u_20 = ri_20 <= qQE suchthat defined(res2_QE[ri_20], tdih_QE[ri_20], tcbh_QE[ri_20], csvn_QE[ri_20], res1_QE[ri_20], rtyp_QE[ri_20], rdata_QE[ri_20], m1_4[ri_20]) && (m1_Ch = m1_4[ri_20]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_20] in
          event QuoteVerified(rtyp_QE[u_20], res1_QE[u_20], csvn_QE[u_20], tcbh_QE[u_20], tdih_QE[u_20], rdata_QE[u_20], res2_QE[u_20]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_18: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_18) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_17: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_17) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_29: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_29) in
              out(c23[i], m2_Ch)
        )
        orfind u_19 = ri_19 <= qQE suchthat defined(res2_QE[ri_19], tdih_QE[ri_19], tcbh_QE[ri_19], csvn_QE[ri_19], res1_QE[ri_19], rtyp_QE[ri_19], rdata_QE[ri_19], m1_5[ri_19]) && (m1_Ch = m1_5[ri_19]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_19] in
          event QuoteVerified(rtyp_QE[u_19], res1_QE[u_19], csvn_QE[u_19], tcbh_QE[u_19], tdih_QE[u_19], rdata_QE[u_19], res2_QE[u_19]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_20: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_20) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_19: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_19) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_30: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_30) in
              out(c23[i], m2_Ch)
        )
        orfind u_18 = ri_18 <= qQE suchthat defined(res2_QE[ri_18], tdih_QE[ri_18], tcbh_QE[ri_18], csvn_QE[ri_18], res1_QE[ri_18], rtyp_QE[ri_18], rdata_QE[ri_18], m1_6[ri_18]) && (m1_Ch = m1_6[ri_18]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_18] in
          event QuoteVerified(rtyp_QE[u_18], res1_QE[u_18], csvn_QE[u_18], tcbh_QE[u_18], tdih_QE[u_18], rdata_QE[u_18], res2_QE[u_18]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_22: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_22) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_21: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_21) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_31: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_31) in
              out(c23[i], m2_Ch)
        )
        orfind u_17 = ri_17 <= qQE suchthat defined(res2_QE[ri_17], tdih_QE[ri_17], tcbh_QE[ri_17], csvn_QE[ri_17], res1_QE[ri_17], rtyp_QE[ri_17], rdata_QE[ri_17], m1_7[ri_17]) && (m1_Ch = m1_7[ri_17]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_17] in
          event QuoteVerified(rtyp_QE[u_17], res1_QE[u_17], csvn_QE[u_17], tcbh_QE[u_17], tdih_QE[u_17], rdata_QE[u_17], res2_QE[u_17]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_24: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_24) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_23: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_23) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_32: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_32) in
              out(c23[i], m2_Ch)
        )
        orfind u_16 = ri_16 <= qQE suchthat defined(res2_QE[ri_16], tdih_QE[ri_16], tcbh_QE[ri_16], csvn_QE[ri_16], res1_QE[ri_16], rtyp_QE[ri_16], rdata_QE[ri_16], m1_8[ri_16]) && (m1_Ch = m1_8[ri_16]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_16] in
          event QuoteVerified(rtyp_QE[u_16], res1_QE[u_16], csvn_QE[u_16], tcbh_QE[u_16], tdih_QE[u_16], rdata_QE[u_16], res2_QE[u_16]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_26: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_26) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_25: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_25) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_33: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_33) in
              out(c23[i], m2_Ch)
        )
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        find [unique] u_15 = ri_15 <= qH suchthat defined(r_16[ri_15], x1_1[ri_15]) && (x1_1 = x1_1[ri_15]) then
          out(ch2[iH], r_16[u_15])
        orfind u_14 = ri_14 <= qTDXM suchthat defined(x_O_1[ri_14], r_17[ri_14]) && (x1_1 = x_O_1[ri_14]) then
          out(ch2[iH], r_17[u_14])
        orfind u_13 = ri_13 <= qCPU suchthat defined(x_O_2[ri_13], r_18[ri_13]) && (x1_1 = x_O_2[ri_13]) then
          out(ch2[iH], r_18[u_13])
        else
          new r_16: hashoutput;
          out(ch2[iH], r_16)
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pkgen2_1(r3_2), rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        let tdi_TDXM: tdi_t = get_tdi in
        let x_O_1: bitstring = tdi_t2bitstring(tdi_TDXM) in
        find [unique] u_12 = ri_12 <= qH suchthat defined(r_16[ri_12], x1_1[ri_12]) && (x_O_1 = x1_1[ri_12]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_16[u_12], rdata_TDXM) in
          new r_38: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_38) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_39: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_39) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_11 = ri_11 <= qTDXM suchthat defined(r_17[ri_11]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17[u_11], rdata_TDXM) in
          new r_40: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_40) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_41: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_41) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_10 = ri_10 <= qCPU suchthat defined(x_O_2[ri_10], r_18[ri_10]) && (x_O_1 = x_O_2[ri_10]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_18[u_10], rdata_TDXM) in
          new r_42: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_42) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_43: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_43) in
          out(c11[i_2], m4_TDXM)
        )
        else
          new r_17: hashoutput;
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17, rdata_TDXM) in
          new r_36: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_36) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_37: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_37) in
          out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        let tcbi_CPU: tcbi_t = get_tcbi in
        let x_O_2: bitstring = tcbi_t2bitstring(tcbi_CPU) in
        find [unique] u_9 = ri_9 <= qH suchthat defined(r_16[ri_9], x1_1[ri_9]) && (x_O_2 = x1_1[ri_9]) then
        (
          let res2_CPU: res_t = get_res in
          let res1_CPU: res_t = get_res in
          let csvn_CPU: csvn_t = get_csvn in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_16[u_9], tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_16[u_9], tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_30: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_30) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_31: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_31) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_8 = ri_8 <= qTDXM suchthat defined(x_O_1[ri_8], r_17[ri_8]) && (x_O_2 = x_O_1[ri_8]) then
        (
          let res2_CPU: res_t = get_res in
          let res1_CPU: res_t = get_res in
          let csvn_CPU: csvn_t = get_csvn in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_17[u_8], tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_17[u_8], tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_32: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_32) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_33: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_33) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_7 = ri_7 <= qCPU suchthat defined(r_18[ri_7]) then
        (
          let res2_CPU: res_t = get_res in
          let res1_CPU: res_t = get_res in
          let csvn_CPU: csvn_t = get_csvn in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_18[u_7], tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_18[u_7], tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_34: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_34) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_35: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_35) in
          out(c17[i_3], m4_CPU)
        )
        else
          new r_18: hashoutput;
          let res2_CPU: res_t = get_res in
          let res1_CPU: res_t = get_res in
          let csvn_CPU: csvn_t = get_csvn in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_18, tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_18, tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_28: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_28) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_29: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_29) in
          out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        let x_Oeq_1: bitstring = tcbi_t2bitstring(tcbi_QE) in
        find [unique] u_3 = ri_3 <= qH suchthat defined(r_16[ri_3], x1_1[ri_3]) && (x_Oeq_1 = x1_1[ri_3]) then
        (
          let x_Oeq: bitstring = tdi_t2bitstring(tdi_QE) in
          find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_Oeq = x1_1[ri_6]) then
          (
            if (tcbh_QE = r_16[u_3]) && (tdih_QE = r_16[u_6]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_19: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_19) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            new r3_14: enc_seed;
            let m1: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_14) in
            out(c19[i_4], m1)
          )
          orfind u_5 = ri_5 <= qTDXM suchthat defined(r_17[ri_5], tdi_TDXM[ri_5]) && (tdi_QE = tdi_TDXM[ri_5]) then
          (
            if (tcbh_QE = r_16[u_3]) && (tdih_QE = r_17[u_5]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_20: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_20) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            new r3_15: enc_seed;
            let m1_1: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_15) in
            out(c19[i_4], m1_1)
          )
          orfind u_4 = ri_4 <= qCPU suchthat defined(r_18[ri_4], x_O_2[ri_4]) && (x_Oeq = x_O_2[ri_4]) then
          (
            if (tcbh_QE = r_16[u_3]) && (tdih_QE = r_18[u_4]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_21: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_21) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            new r3_16: enc_seed;
            let m1_2: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_16) in
            out(c19[i_4], m1_2)
          )
        )
        orfind u_2 = ri_2 <= qTDXM suchthat defined(x_O_1[ri_2], r_17[ri_2]) && (x_Oeq_1 = x_O_1[ri_2]) then
        (
          let x_Oeq: bitstring = tdi_t2bitstring(tdi_QE) in
          find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_Oeq = x1_1[ri_6]) then
          (
            if (tcbh_QE = r_17[u_2]) && (tdih_QE = r_16[u_6]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_22: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_22) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            new r3_17: enc_seed;
            let m1_3: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_17) in
            out(c19[i_4], m1_3)
          )
          orfind  suchthat x_Oeq = x_O_1[u_2] then
          (
            if (tcbh_QE = r_17[u_2]) && (tdih_QE = r_17[u_2]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_23: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_23) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            new r3_18: enc_seed;
            let m1_4: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_18) in
            out(c19[i_4], m1_4)
          )
          orfind u_4 = ri_4 <= qCPU suchthat defined(r_18[ri_4], x_O_2[ri_4]) && (x_Oeq = x_O_2[ri_4]) then
          (
            if (tcbh_QE = r_17[u_2]) && (tdih_QE = r_18[u_4]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_24: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_24) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            new r3_19: enc_seed;
            let m1_5: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_19) in
            out(c19[i_4], m1_5)
          )
        )
        orfind u_1 = ri_1 <= qCPU suchthat defined(x_O_2[ri_1], r_18[ri_1], tcbi_CPU[ri_1]) && (tcbi_QE = tcbi_CPU[ri_1]) then
        (
          let x_Oeq: bitstring = tdi_t2bitstring(tdi_QE) in
          find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_Oeq = x1_1[ri_6]) then
          (
            if (tcbh_QE = r_18[u_1]) && (tdih_QE = r_16[u_6]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_25: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_25) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            new r3_20: enc_seed;
            let m1_6: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_20) in
            out(c19[i_4], m1_6)
          )
          orfind u_5 = ri_5 <= qTDXM suchthat defined(r_17[ri_5], tdi_TDXM[ri_5]) && (tdi_QE = tdi_TDXM[ri_5]) then
          (
            if (tcbh_QE = r_18[u_1]) && (tdih_QE = r_17[u_5]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_26: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_26) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            new r3_21: enc_seed;
            let m1_7: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_21) in
            out(c19[i_4], m1_7)
          )
          orfind  suchthat x_Oeq = x_O_2[u_1] then
          (
            if (tcbh_QE = r_18[u_1]) && (tdih_QE = r_18[u_1]) then
            let m_14: bitstring = rms_t2bitstring(rms_QE) in
            new r_27: enc_seed_1;
            let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_27) in
            out(c15[i_4], m1_QE);
            in(c18[i_4], m2_QE: bitstring);
            let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
            if resOfMac_QE then
            new r3_22: enc_seed;
            let m1_8: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_22) in
            out(c19[i_4], m1_8)
          )
        )
      ))

Adv[Game 1: event(QEaccepted2_14(x1, x2)) ==> event(TDXMsentTDR_8(x1, x2))] <= Penccoll + (qChallenger + qQE) * Penc(time_1, 0) + Adv[Game 11: event(QEaccepted2_14(x1, x2)) ==> event(TDXMsentTDR_8(x1, x2))]
Adv[Game 11: event(QEaccepted2_14(x1, x2)) ==> event(TDXMsentTDR_8(x1, x2))] <= 0
RESULT Proved event(QEaccepted2_14(x1, x2)) ==> event(TDXMsentTDR_8(x1, x2)) up to probability Penccoll + (qChallenger + qQE) * Penc(time_1, 0)
Adv[Game 1: event(eve_QE(x1, x2, x3, x4, x5, x6, x7)) ==> event(CPUsentSMR(x1, x2, x3, x4, x5, x6, x7, x8, x9))] <= Penccoll + (qChallenger + qQE) * Penc(time_1, 0) + Adv[Game 11: event(eve_QE(x1, x2, x3, x4, x5, x6, x7)) ==> event(CPUsentSMR(x1, x2, x3, x4, x5, x6, x7, x8, x9))]
Adv[Game 11: event(eve_QE(x1, x2, x3, x4, x5, x6, x7)) ==> event(CPUsentSMR(x1, x2, x3, x4, x5, x6, x7, x8, x9))] <= 0
RESULT Proved event(eve_QE(x1, x2, x3, x4, x5, x6, x7)) ==> event(CPUsentSMR(x1, x2, x3, x4, x5, x6, x7, x8, x9)) up to probability Penccoll + (qChallenger + qQE) * Penc(time_1, 0)
RESULT time_1 = time(context for game 5) + time + (-1 + qChallenger + qQE) * time(enc_r, max(maxlength(game 5: m_15), maxlength(game 5: m_8)))
RESULT time(context for game 5) = time(spkgen) + time(sskgen) + time(pkgen) + time(skgen) + qChallenger * time(dec, maxlength(game 5: m1_Ch)) + qChallenger * time(let injbot, length(quote_t2bitstring)) + qChallenger * time(let quote_t2bitstring) + qChallenger * time(let quote_f) + qChallenger * time(verify, length(tdr_without_mac_t2bitstring)) + (qChallenger + qQE) * time(tdr_without_mac_t2bitstring) + qChallenger * time(let tdr_without_mac_f) + qChallenger * time(let smr_without_mac_f) + (qChallenger + qQE) * time(let rms_without_mac_f) + qChallenger * time(let rdata_f) + qChallenger * time(([1,qChallenger])) + qChallenger * time(key2bitstring) + qH * time(hash, maxlength(game 5: x1_1)) + qTD * time(rdata_f) + qTD * time(rdata_t2bitstring) + qTD * time(enc_r_1, maxlength(game 5: m_9)) + qTD * time(sym_dec, maxlength(game 5: m2_TD)) + qTD * time(let sym_injbot, length(tdr_t2bitstring)) + qTD * time(let tdr_t2bitstring) + qTDXM * time(sym_dec, maxlength(game 5: m1_TDXM)) + qTDXM * time(let sym_injbot, length(rdata_t2bitstring)) + qTDXM * time(let rdata_t2bitstring) + (qTDXM + qQE) * time(hash, length(tdi_t2bitstring)) + (qTDXM + qQE) * time(tdi_t2bitstring) + qTDXM * time(arg_TDXM_CPU) + qTDXM * time(enc_r_1, maxlength(game 5: m_10)) + qTDXM * time(sym_dec, maxlength(game 5: m3_TDXM)) + qTDXM * time(let sym_injbot, length(smr_t2bitstring)) + qTDXM * time(let smr_t2bitstring) + qTDXM * time(tdr_f) + qTDXM * time(([1,qTDXM])) + qTDXM * time(tdr_t2bitstring) + qTDXM * time(enc_r_1, maxlength(game 5: m_11)) + qCPU * time(sym_dec, maxlength(game 5: m1_CPU)) + qCPU * time(let sym_injbot, length(arg_TDXM_CPU)) + qCPU * time(let arg_TDXM_CPU) + (qCPU + qQE) * time(hash, length(tcbi_t2bitstring)) + (qCPU + qQE) * time(tcbi_t2bitstring) + qCPU * time(rms_without_mac_f) + qCPU * time(mac, length(rms_without_mac_t2bitstring)) + qCPU * time(rms_f) + qCPU * time(smr_f) + qCPU * time(([1,qCPU])) + qCPU * time(smr_t2bitstring) + qCPU * time(enc_r_1, maxlength(game 5: m_12)) + qCPU * time(sym_dec, maxlength(game 5: m3_CPU)) + qCPU * time(let sym_injbot, length(rms_t2bitstring)) + qCPU * time(let rms_t2bitstring) + (qCPU + qQE) * time(let rms_f) + qCPU * time(check, length(rms_without_mac_t2bitstring)) + 2 * qCPU * time(rms_without_mac_t2bitstring) + qCPU * time(bool2bitstring) + qCPU * time(enc_r_1, maxlength(game 5: m_13)) + qQE * time(let tdr_f) + qQE * time(let smr_f) + qQE * time(rms_t2bitstring) + qQE * time(enc_r_1, maxlength(game 5: m_14)) + qQE * time(sym_dec, maxlength(game 5: m2_QE)) + qQE * time(let sym_injbot, length(bool2bitstring)) + qQE * time(let bool2bitstring) + qQE * time(smr_without_mac_f) + qQE * time(tdr_without_mac_f) + qQE * time(sign, length(tdr_without_mac_t2bitstring)) + qQE * time(quote_f) + qQE * time(quote_t2bitstring)
RESULT time(context for game 11) = time(spkgen) + time(sskgen) + time(pkgen) + time(skgen) + qChallenger * time(dec, maxlength(game 11: m1_Ch)) + qChallenger * time(let injbot, length(quote_t2bitstring)) + qChallenger * time(let quote_t2bitstring) + qChallenger * time(let quote_f) + qChallenger * time(verify, length(tdr_without_mac_t2bitstring)) + (qChallenger + qQE) * time(tdr_without_mac_t2bitstring) + qChallenger * time(let tdr_without_mac_f) + qChallenger * time(let smr_without_mac_f) + (qChallenger + qQE) * time(let rms_without_mac_f) + qChallenger * time(let rdata_f) + qChallenger * time(([1,qChallenger])) + (qChallenger + qTD) * time(pkgen2_1) + qChallenger * time(enc_r2, length(Zkey1)) + qChallenger * time(key2bitstring) + qChallenger * time(enc_r, maxlength(game 11: m_8)) + qH * time(hash, maxlength(game 11: x1_1)) + qTD * time(rdata_f) + qTD * time(rdata_t2bitstring) + qTD * time(enc_r_1, maxlength(game 11: m_9)) + qTD * time(sym_dec, maxlength(game 11: m2_TD)) + qTD * time(let sym_injbot, length(tdr_t2bitstring)) + qTD * time(let tdr_t2bitstring) + qTDXM * time(sym_dec, maxlength(game 11: m1_TDXM)) + qTDXM * time(let sym_injbot, length(rdata_t2bitstring)) + qTDXM * time(let rdata_t2bitstring) + (qTDXM + qQE) * time(hash, length(tdi_t2bitstring)) + (qTDXM + qQE) * time(tdi_t2bitstring) + qTDXM * time(arg_TDXM_CPU) + qTDXM * time(enc_r_1, maxlength(game 11: m_10)) + qTDXM * time(sym_dec, maxlength(game 11: m3_TDXM)) + qTDXM * time(let sym_injbot, length(smr_t2bitstring)) + qTDXM * time(let smr_t2bitstring) + qTDXM * time(tdr_f) + qTDXM * time(([1,qTDXM])) + qTDXM * time(tdr_t2bitstring) + qTDXM * time(enc_r_1, maxlength(game 11: m_11)) + qCPU * time(sym_dec, maxlength(game 11: m1_CPU)) + qCPU * time(let sym_injbot, length(arg_TDXM_CPU)) + qCPU * time(let arg_TDXM_CPU) + (qCPU + qQE) * time(hash, length(tcbi_t2bitstring)) + (qCPU + qQE) * time(tcbi_t2bitstring) + qCPU * time(rms_without_mac_f) + qCPU * time(rms_f) + qCPU * time(smr_f) + qCPU * time(([1,qCPU])) + qCPU * time(smr_t2bitstring) + qCPU * time(enc_r_1, maxlength(game 11: m_12)) + qCPU * time(sym_dec, maxlength(game 11: m3_CPU)) + qCPU * time(let sym_injbot, length(rms_t2bitstring)) + qCPU * time(let rms_t2bitstring) + (qCPU + qQE) * time(let rms_f) + 2 * qCPU * time(rms_without_mac_t2bitstring) + qCPU * time(bool2bitstring) + qCPU * time(enc_r_1, maxlength(game 11: m_13)) + qQE * time(let tdr_f) + qQE * time(let smr_f) + qQE * time(rms_t2bitstring) + qQE * time(enc_r_1, maxlength(game 11: m_14)) + qQE * time(sym_dec, maxlength(game 11: m2_QE)) + qQE * time(let sym_injbot, length(bool2bitstring)) + qQE * time(let bool2bitstring) + qQE * time(smr_without_mac_f) + qQE * time(tdr_without_mac_f) + qQE * time(sign, length(tdr_without_mac_t2bitstring)) + qQE * time(quote_f) + qQE * time(quote_t2bitstring) + qQE * time(enc_r, maxlength(game 11: m_15))
RESULT time(context for game 25) = time(spkgen) + time(sskgen) + qChallenger * time(let injbot, length(quote_t2bitstring)) + qChallenger * time(let quote_t2bitstring) + qChallenger * time(let quote_f) + qChallenger * time(verify, length(tdr_without_mac_t2bitstring)) + (qChallenger + qQE) * time(tdr_without_mac_t2bitstring) + qChallenger * time(let tdr_without_mac_f) + qChallenger * time(let smr_without_mac_f) + (qChallenger + qQE) * time(let rms_without_mac_f) + qChallenger * time(let rdata_f) + qChallenger * time(([1,qChallenger])) + (qChallenger + qTD) * time(pkgen2_1) + qChallenger * time(enc_r2, length(Zkey1)) + qChallenger * time(key2bitstring) + qH * qH * time(= bitstring, maxlength(game 25: x1_1), maxlength(game 25: x1_1)) + qH * qTDXM * time(= bitstring, maxlength(game 25: x1_1), maxlength(game 25: x_O_1)) + qH * qCPU * time(= bitstring, maxlength(game 25: x1_1), maxlength(game 25: x_O_2)) + qTD * time(rdata_f) + qTD * time(rdata_t2bitstring) + qTD * time(enc_r_1, maxlength(game 25: m_9)) + qTD * time(sym_dec, maxlength(game 25: m2_TD)) + qTD * time(let sym_injbot, length(tdr_t2bitstring)) + qTD * time(let tdr_t2bitstring) + qTDXM * time(sym_dec, maxlength(game 25: m1_TDXM)) + qTDXM * time(let sym_injbot, length(rdata_t2bitstring)) + qTDXM * time(let rdata_t2bitstring) + (qTDXM + qQE) * time(tdi_t2bitstring) + qTDXM * qH * time(= bitstring, maxlength(game 25: x_O_1), maxlength(game 25: x1_1)) + qTDXM * qCPU * time(= bitstring, maxlength(game 25: x_O_1), maxlength(game 25: x_O_2)) + qTDXM * time(arg_TDXM_CPU) + qTDXM * time(enc_r_1, maxlength(game 25: m_10)) + qTDXM * time(sym_dec, maxlength(game 25: m3_TDXM)) + qTDXM * time(let sym_injbot, length(smr_t2bitstring)) + qTDXM * time(let smr_t2bitstring) + qTDXM * time(tdr_f) + qTDXM * time(tdr_t2bitstring) + qTDXM * time(enc_r_1, maxlength(game 25: m_11)) + qCPU * time(sym_dec, maxlength(game 25: m1_CPU)) + qCPU * time(let sym_injbot, length(arg_TDXM_CPU)) + qCPU * time(let arg_TDXM_CPU) + (qCPU + qQE) * time(tcbi_t2bitstring) + qCPU * qH * time(= bitstring, maxlength(game 25: x_O_2), maxlength(game 25: x1_1)) + qCPU * qTDXM * time(= bitstring, maxlength(game 25: x_O_2), maxlength(game 25: x_O_1)) + qCPU * time(rms_without_mac_f) + qCPU * time(rms_without_mac_t2bitstring) + qCPU * time(mac', maxlength(game 25: x_2)) + qCPU * time(rms_f) + qCPU * time(smr_f) + qCPU * time(([1,qCPU])) + qCPU * time(smr_t2bitstring) + qCPU * time(enc_r_1, maxlength(game 25: m_12)) + qCPU * time(sym_dec, maxlength(game 25: m3_CPU)) + qCPU * time(let sym_injbot, length(rms_t2bitstring)) + qCPU * time(let rms_t2bitstring) + (qCPU + qQE) * time(let rms_f) + qCPU * time(bool2bitstring) + qCPU * time(enc_r_1, maxlength(game 25: m_13)) + qQE * time(let tdr_f) + qQE * time(let smr_f) + qQE * qH * time(= bitstring, maxlength(game 25: x_Oeq_1), maxlength(game 25: x1_1)) + qQE * qTDXM * time(= bitstring, maxlength(game 25: x_Oeq_1), maxlength(game 25: x_O_1)) + qQE * time(= bitstring, maxlength(game 25: x_Oeq), maxlength(game 25: x_O_1)) + (qQE * qCPU + qQE) * time(= bitstring, maxlength(game 25: x_Oeq), maxlength(game 25: x_O_2)) + qQE * qH * time(= bitstring, maxlength(game 25: x_Oeq), maxlength(game 25: x1_1)) + qQE * time(rms_t2bitstring) + qQE * time(enc_r_1, maxlength(game 25: m_14)) + qQE * time(sym_dec, maxlength(game 25: m2_QE)) + qQE * time(let sym_injbot, length(bool2bitstring)) + qQE * time(let bool2bitstring) + qQE * time(smr_without_mac_f) + qQE * time(tdr_without_mac_f) + qQE * time(sign, length(tdr_without_mac_t2bitstring)) + qQE * time(quote_f) + qQE * time(quote_t2bitstring)
RESULT time(context for game 32) = qChallenger * qChallenger * time(= bitstring, maxlength(game 32: m1_Ch), maxlength(game 32: m2_2)) + qChallenger * qQE * time(= bitstring, maxlength(game 32: m1_Ch), maxlength(game 32: m1)) + qChallenger * qQE * time(= bitstring, maxlength(game 32: m1_Ch), maxlength(game 32: m1_1)) + qChallenger * qQE * time(= bitstring, maxlength(game 32: m1_Ch), maxlength(game 32: m1_2)) + qChallenger * qQE * time(= bitstring, maxlength(game 32: m1_Ch), maxlength(game 32: m1_3)) + qChallenger * qQE * time(= bitstring, maxlength(game 32: m1_Ch), maxlength(game 32: m1_4)) + qChallenger * qQE * time(= bitstring, maxlength(game 32: m1_Ch), maxlength(game 32: m1_5)) + qChallenger * qQE * time(= bitstring, maxlength(game 32: m1_Ch), maxlength(game 32: m1_6)) + qChallenger * qQE * time(= bitstring, maxlength(game 32: m1_Ch), maxlength(game 32: m1_7)) + qChallenger * qQE * time(= bitstring, maxlength(game 32: m1_Ch), maxlength(game 32: m1_8)) + qChallenger * time(dec2, maxlength(game 32: m1_Ch)) + qChallenger * time(skgen2_1) + qChallenger * time(let injbot, length(quote_t2bitstring)) + qChallenger * time(let quote_t2bitstring) + qChallenger * time(let quote_f) + qChallenger * time(tdr_without_mac_t2bitstring) + qChallenger * time(let tdr_without_mac_f) + qChallenger * time(let smr_without_mac_f) + (qChallenger + qQE) * time(let rms_without_mac_f) + qChallenger * time(let rdata_f) + qChallenger * time(([1,qChallenger])) + (2 * qChallenger + qTD + qQE) * time(pkgen2_1) + (qChallenger + qQE) * time(enc_r2, length(Zkey1)) + 2 * qChallenger * time(key2bitstring) + qChallenger * time(enc_r, maxlength(game 32: m_8)) + qH * qH * time(= bitstring, maxlength(game 32: x1_1), maxlength(game 32: x1_1)) + qH * qTDXM * time(= bitstring, maxlength(game 32: x1_1), maxlength(game 32: x_O_1)) + qH * qCPU * time(= bitstring, maxlength(game 32: x1_1), maxlength(game 32: x_O_2)) + qTD * time(rdata_f) + qTD * time(rdata_t2bitstring) + qTD * time(enc_r_1, maxlength(game 32: m_9)) + qTD * time(sym_dec, maxlength(game 32: m2_TD)) + qTD * time(let sym_injbot, length(tdr_t2bitstring)) + qTD * time(let tdr_t2bitstring) + qTDXM * time(sym_dec, maxlength(game 32: m1_TDXM)) + qTDXM * time(let sym_injbot, length(rdata_t2bitstring)) + qTDXM * time(let rdata_t2bitstring) + (qTDXM + qQE) * time(tdi_t2bitstring) + qTDXM * qH * time(= bitstring, maxlength(game 32: x_O_1), maxlength(game 32: x1_1)) + qTDXM * qCPU * time(= bitstring, maxlength(game 32: x_O_1), maxlength(game 32: x_O_2)) + qTDXM * time(arg_TDXM_CPU) + qTDXM * time(enc_r_1, maxlength(game 32: m_10)) + qTDXM * time(sym_dec, maxlength(game 32: m3_TDXM)) + qTDXM * time(let sym_injbot, length(smr_t2bitstring)) + qTDXM * time(let smr_t2bitstring) + qTDXM * time(tdr_f) + qTDXM * time(tdr_t2bitstring) + qTDXM * time(enc_r_1, maxlength(game 32: m_11)) + qCPU * time(sym_dec, maxlength(game 32: m1_CPU)) + qCPU * time(let sym_injbot, length(arg_TDXM_CPU)) + qCPU * time(let arg_TDXM_CPU) + (qCPU + qQE) * time(tcbi_t2bitstring) + qCPU * qH * time(= bitstring, maxlength(game 32: x_O_2), maxlength(game 32: x1_1)) + qCPU * qTDXM * time(= bitstring, maxlength(game 32: x_O_2), maxlength(game 32: x_O_1)) + qCPU * time(rms_without_mac_f) + qCPU * time(rms_without_mac_t2bitstring) + qCPU * time(mac', maxlength(game 32: x_2)) + qCPU * time(rms_f) + qCPU * time(smr_f) + qCPU * time(([1,qCPU])) + qCPU * time(smr_t2bitstring) + qCPU * time(enc_r_1, maxlength(game 32: m_12)) + qCPU * time(sym_dec, maxlength(game 32: m3_CPU)) + qCPU * time(let sym_injbot, length(rms_t2bitstring)) + qCPU * time(let rms_t2bitstring) + (qCPU + qQE) * time(let rms_f) + qCPU * time(bool2bitstring) + qCPU * time(enc_r_1, maxlength(game 32: m_13)) + qQE * time(let tdr_f) + qQE * time(let smr_f) + qQE * qH * time(= bitstring, maxlength(game 32: x_Oeq_1), maxlength(game 32: x1_1)) + qQE * qTDXM * time(= bitstring, maxlength(game 32: x_Oeq_1), maxlength(game 32: x_O_1)) + qQE * time(= bitstring, maxlength(game 32: x_Oeq), maxlength(game 32: x_O_1)) + (qQE * qCPU + qQE) * time(= bitstring, maxlength(game 32: x_Oeq), maxlength(game 32: x_O_2)) + qQE * qH * time(= bitstring, maxlength(game 32: x_Oeq), maxlength(game 32: x1_1)) + qQE * time(rms_t2bitstring) + qQE * time(enc_r_1, maxlength(game 32: m_14)) + qQE * time(sym_dec, maxlength(game 32: m2_QE)) + qQE * time(let sym_injbot, length(bool2bitstring)) + qQE * time(let bool2bitstring)
RESULT Could not prove secrecy of session_key; event(QuoteVerified(x1, x2, x3, x4, x5, x6, x7)) ==> event(CPUsentSMR(x1, x2, x3, x4, x5, x6, x7, x8, x9)); event(QuoteVerified(x1, x2, x3, x4, x5, x6, x7)) ==> event(eve_QE(x1, x2, x3, x4, x5, x6, x7)).
