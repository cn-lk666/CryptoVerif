param qChallenger, qTD, qTDXM, qCPU, qQE, qIAS.

channel c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, start.

type macres_t [bounded].
type key [large,fixed].
type sskey [bounded].
type spkey [bounded].
type skey [bounded].
type pkey [bounded].
type signature [bounded].
type keyseed [large,fixed].
type rdata_t[bounded].
type user_data_t [bounded, nonuniform].



(* MAC *)
proba Pmac.
expand SUF_CMA_det_mac(
    key,            (*mkey is the type of keys, must be bounded*)
    bitstring , (*macinput is the type of inputs of MACs*)
    macres_t,  (*macres_t is the type of MACs.*)
    mac,          (*mac(macinput ,mkey ) : macres_t is the MAC function.*)
    check,      (*check (macinput ,mkey ,macres_t ) : bool is the verification function*)
    Pmac        (*Pmac(t,N,N′,Nu′,l) is the probability of breaking the SUF-CMA property in time t for one key,
                N MAC queries, N′ verification queries modified by the transformation and Nu verification queries
                left unchanged by the transformation for messages of length at most l.*)
).

(* Signature *)
proba Psign.
proba Psigncoll.
expand UF_CMA_det_signature(
        keyseed,
        spkey,                  (*pkey is the type of public keys, must be bounded.*)
        sskey,                  (*skey is the type of secret keys, must be bounded.*)
        bitstring,            (*signinput*)
        signature,            (*signature*)
       	sskgen,                  (*skgen(keyseed ) : skey is the secret key generation function.*)
        spkgen,                 (*pkgen (keyseed ) : pkey is the public key generation function.*)
        sign,                     (*sign (signinput ,skey ) : signature is the signature function.*)
        verify,                  (*check (signinput ,pkey ,signature) : bool is the verification function.*)
        Psign,                  (*Psign (t,N,l) is the probability of breaking the UF-CMA property 
                                        in time t, for one key, N signature queries with messages of length at most l.*)
        Psigncoll           (*Psigncoll is the probability of collision between independently generated keys.*)
).


query secret session_key.

(* Asymmetric encryption *)
proba Penc.
proba Penccoll.
expand IND_CCA2_public_key_enc(
        keyseed, 
        pkey,                       (*pkey is the type of public keys, must be bounded*)
        skey,                        (*skey is the type of secret keys, must be bounded*) 
        bitstring,                (*cleartext is the type of cleartexts.*)
        bitstring,             (*ciphertext is the type of ciphertexts.*)
        skgen,                      (*skgen(keyseed ) : skey is the secret key generation function.*)
        pkgen,                      (*pkgen (keyseed ) : pkey is the public key generation function.*)
        enc,                            (*enc(cleartext ,pkey ) : ciphertext is the encryption function. 
                                                Internally, it generates random coins, so that it is probabilistic*)
        dec,                            (*dec(ciphertext ,skey ) : bitstringbot is the decryption function; it returns bottom 
                                                when decryption fails*)
        injbot,                         (*injbot (cleartext ) : bitstringbot is the natural injection from cleartext to bitstringbot*)
        Z,                                  (*Z (cleartext ) : cleartext is the function that returns for each cleartext a cleartext of 
                                                the same length consisting only of zeroes.*)
        Penc,                           (*Penc(t,N) is the probability of breaking the IND-CCA2 property
                                                (indistinguishable under adaptive chosen ciphertext attacks)
                                                in time t for one key and N decryption queries.*)
        Penccoll                    (*Penccoll is the probability of collision between independently generated keys.*)
).

const Zkey : bitstring.
equation forall y:bitstring;
	Z(y) = Zkey.


fun rdata_t2bitstring(rdata_t):bitstring[data].
fun quote_f(bitstring, signature):bitstring[data].
fun key2bitstring(key):bitstring[data].
fun rdata_f(pkey, user_data_t):rdata_t[data].
fun pkey2bitstring(pkey):bitstring[data].

let TD(pk_TD:pkey, mk_TD:key, sk_TD:skey)=

    TDX_TD{
        in(c6, ());
        

        out(c7, (pk_TD, mac(pkey2bitstring(pk_TD), mk_TD)));

        in(c9, (m2:bitstring));
        let injbot(session_key1)=dec(m2, sk_TD) in
        out(c10,())
    }.



let Challenger(mk_Ch:key)=
    in(c2, (pk:pkey, macres:macres_t));
    if(check(pkey2bitstring(pk), mk_Ch, macres)) then(
        new session_key:key;
        let m2_Ch=enc(key2bitstring(session_key), pk) in

        out(c9, (m2_Ch))
    )

    .




let Application(mk_A:key) =
TDX_keygen_App[pk3>pk3, sk3>sk3]{
    in(c4, ());
    new r3:keyseed;
    let pk3:pkey=pkgen(r3) in
    let sk3:skey=skgen(r3) in
    out(c5, ())
};
(
    (!i<=qTD TD(pk3, mk_A,sk3) ) 
).
(*
let IAS(spk:spkey, sk:skey)=
    in(c28, ());
    get Ch_IAS_19(x, y, m1) suchthat x=hostname_Ch && y=hostname_IAS in
    let injbot(quote_t2bitstring(quote))=dec(m1, sk) in
    let quote_f(tdr_without_mac, sig) =quote in
    if(verify(tdr_without_mac_t2bitstring(tdr_without_mac), spk, sig)) then(
        let tdr_without_mac_f(smr_without_mac, res4, tdi)=tdr_without_mac in
        let smr_without_mac_f(rms_without_mac, tcbi)=smr_without_mac in
        let rms_without_mac_f(rtyp, res1, csvn, tcbh, tdih, rdata, res2)=rms_without_mac in
        let rdata_f(x1, y1)=rdata in
        insert IAS_Ch_20(hostname_IAS, hostname_Ch, x1);
        out(c29, ())
    ).
*)


process
    TDX_Keygen {
        in(start, ());
        new mk:key;
        out (c1, ())
    };
	(
        (!i<= qChallenger Challenger(mk )) | 
        (Application(mk)) 
    )