File "/tmp/cve189fd.cv", line 330, character 5 - line 344, character 6:
Warning: Duplicate inputs on channel c22
(The second one is located under the return of the first one.).
This is an example (possibly among others) that contradicts the following recommendation:
Different inputs should use different channel names, except matching inputs in different branches of if, find, let, or get.
 - That guarantees that the adversary knows precisely to which input it sends messages.
 - That allows using the number of inputs on channels in probability results.
Furthermore, for the best precision, you should also make sure that replications use different bounds when they are above different inputs, except matching inputs in different branches of if, find, let, or get.
Doing expand get, insert... No change.
Doing simplify (non-expanded game)... No change.
Doing expand... Done.
Doing remove assignments of findcond... Done.
Doing simplify... Run simplify 1 time(s). Fixpoint reached.
No change.
Doing move all binders... Done.
Doing remove assignments of findcond... No change.
Doing merge branches... No change.
Trying equivalence ind_cca2(enc) with r3... Failed.
Doing remove assignments of binder pk3... Done.
Trying equivalence ind_cca2(enc) with r3... Transf. OK Transf. done Succeeded.
Doing simplify (non-expanded game)... Applied collision new r1_1: keyseed; new r2_1: keyseed; return((pkgen(r1_1) = pkgen2_1(r2_1))) <=(Penccoll)=> return(false) with r2_1 -> r3_2, r1_1 -> r2 Probability: Penccoll
Done.
Doing expand... Done.
Doing remove assignments of findcond... Done.
Doing simplify... Run simplify 2 time(s). Fixpoint reached.
Done.
Doing move all binders... Done.
Doing remove assignments of findcond... No change.
Doing merge branches... No change.
Proof of event(QuoteVerified(x1, x2, x3, x4, x5, x6, x7)) ==> event(eve_QE(x1, x2, x3, x4, x5, x6, x7)) failed:
  Found QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch) at 64
  but could not prove event(eve_QE(x1, x2, x3, x4, x5, x6, x7))
Proved query event(eve_QE(x1, x2, x3, x4, x5, x6, x7)) ==> event(CPUsentSMR(x1, x2, x3, x4, x5, x6, x7, x8, x9))
Proof of event(QuoteVerified(x1, x2, x3, x4, x5, x6, x7)) ==> event(CPUsentSMR(x1, x2, x3, x4, x5, x6, x7, x8, x9)) failed:
  Found QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch) at 64
  but could not prove event(CPUsentSMR(x1, x2, x3, x4, x5, x6, x7, x8, x9))
Proved query event(QEaccepted2_14(x1, x2)) ==> event(TDXMsentTDR_8(x1, x2))
Proof of (one-session) secrecy of session_key failed:
  at 118, bad usage(s) of m2_Ch, which may depend on session_key.
Trying equivalence ind_cpa(sym_enc)... Failed.
Trying equivalence ind_cca2(enc)... Failed.
Trying equivalence uf_cma(sign)... Failed.
Trying equivalence suf_cma(mac)... Transf. OK Transf. done Succeeded.
Doing simplify (non-expanded game)... No change.
Doing expand... Done.
Doing remove assignments of findcond... Done.
Doing simplify... Run simplify 2 time(s). Fixpoint reached.
Done.
Doing move all binders... Done.
Doing remove assignments of findcond... No change.
Doing merge branches... No change.
Proof of event(QuoteVerified(x1, x2, x3, x4, x5, x6, x7)) ==> event(eve_QE(x1, x2, x3, x4, x5, x6, x7)) failed:
  Found QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch) at 64
  but could not prove event(eve_QE(x1, x2, x3, x4, x5, x6, x7))
Proof of event(QuoteVerified(x1, x2, x3, x4, x5, x6, x7)) ==> event(CPUsentSMR(x1, x2, x3, x4, x5, x6, x7, x8, x9)) failed:
  Found QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch) at 64
  but could not prove event(CPUsentSMR(x1, x2, x3, x4, x5, x6, x7, x8, x9))
Proof of (one-session) secrecy of session_key failed:
  at 118, bad usage(s) of m2_Ch, which may depend on session_key.
Trying equivalence ind_cpa(sym_enc)... Failed.
Trying equivalence ind_cca2(enc)... Failed.
Trying equivalence uf_cma(sign)... Failed.
Trying equivalence suf_cma(mac)... Failed.
Trying equivalence rom(hash)... Transf. OK Transf. done Succeeded.
Doing simplify (non-expanded game)... No change.
Doing expand... Done.
Doing remove assignments of findcond... Done.
Doing simplify... Run simplify 2 time(s). Fixpoint reached.
Done.
Doing move all binders... Done.
Doing remove assignments of findcond... Done.
Doing merge branches... No change.
Proof of event(QuoteVerified(x1, x2, x3, x4, x5, x6, x7)) ==> event(eve_QE(x1, x2, x3, x4, x5, x6, x7)) failed:
  Found QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch) at 63
  but could not prove event(eve_QE(x1, x2, x3, x4, x5, x6, x7))
Proof of event(QuoteVerified(x1, x2, x3, x4, x5, x6, x7)) ==> event(CPUsentSMR(x1, x2, x3, x4, x5, x6, x7, x8, x9)) failed:
  Found QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch) at 63
  but could not prove event(CPUsentSMR(x1, x2, x3, x4, x5, x6, x7, x8, x9))
Proof of (one-session) secrecy of session_key failed:
  at 117, bad usage(s) of m2_Ch, which may depend on session_key.
Trying equivalence ind_cpa(sym_enc)... Failed.
Trying equivalence ind_cca2(enc)... Failed.
Trying equivalence uf_cma(sign)... Failed.
Trying equivalence suf_cma(mac)... Failed.
Trying equivalence rom(hash)... Failed.
Doing remove assignments of binder x1_Ch... No change.
Doing remove assignments of binder pk2... Done.
Doing remove assignments of binder sk2... Done.
Trying equivalence ind_cca2(enc) with r3_3, r3_1, r2... Transf. OK Transf. done Succeeded.
Doing simplify (non-expanded game)... No change.
Doing expand... Done.
Doing remove assignments of findcond... Done.
Doing simplify... Doing global dependency analysis on session_key inside simplify... The variable session_key depends on session_key and occurs in a query.
No change
Doing global dependency analysis on session_key inside simplify... The variable session_key depends on session_key and occurs in a query.
No change
Run simplify 2 time(s). Fixpoint reached.
Done.
Doing move all binders... Done.
Doing remove assignments of findcond... Done.
Doing merge branches... No change.
Proof of event(QuoteVerified(x1, x2, x3, x4, x5, x6, x7)) ==> event(eve_QE(x1, x2, x3, x4, x5, x6, x7)) failed:
  Found QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch) at 62
  but could not prove event(eve_QE(x1, x2, x3, x4, x5, x6, x7))
Proof of event(QuoteVerified(x1, x2, x3, x4, x5, x6, x7)) ==> event(CPUsentSMR(x1, x2, x3, x4, x5, x6, x7, x8, x9)) failed:
  Found QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch) at 62
  but could not prove event(CPUsentSMR(x1, x2, x3, x4, x5, x6, x7, x8, x9))
Proof of (one-session) secrecy of session_key failed:
  at 137, bad usage(s) of m2_Ch, which may depend on session_key.
Trying equivalence ind_cpa(sym_enc)... Failed.
Trying equivalence ind_cca2(enc)... Failed.
Trying equivalence uf_cma(sign)... Failed.
Trying equivalence suf_cma(mac)... Failed.
Trying equivalence rom(hash)... Failed.
Doing SA rename x1_Ch... Done.
Doing remove assignments of findcond... No change.
Doing simplify... Doing global dependency analysis on session_key inside simplify... The variable session_key depends on session_key and occurs in a query.
No change
Run simplify 1 time(s). Fixpoint reached.
No change.
Trying equivalence ind_cca2(enc) with r3_6, r3_7, r3_8... Failed.
Doing remove assignments of binder x1_Ch_2... No change.
Trying equivalence ind_cca2(enc) with r3_6, r3_7, r3_8... Failed:
Random variables: r3_8 -> r2_1, r3_7 -> r2_1, r3_6 -> r2_1
The transformation did not use the useful_change oracles, or oracles deemed useful by default.
Trying equivalence ind_cca2(enc) with r3_6, r3_7, r3_8... Failed:
Random variables: r3_8 -> r2_1, r3_7 -> r2_1, r3_6 -> r2_1
The transformation did not use the useful_change oracles, or oracles deemed useful by default.
Doing remove assignments of binder spk1... Done.
Trying equivalence uf_cma(sign) with r1... Transf. OK Transf. done Succeeded.
Doing simplify (non-expanded game)... Done.
Doing expand... Done.
Doing remove assignments of findcond... No change.
Doing simplify... Run simplify 2 time(s). Fixpoint reached.
Done.
Doing move all binders... No change.
Doing remove assignments of findcond... No change.
Doing merge branches... No change.
Proof of event(QuoteVerified(x1, x2, x3, x4, x5, x6, x7)) ==> event(eve_QE(x1, x2, x3, x4, x5, x6, x7)) failed:
  Found QuoteVerified(rtyp_QE[u_10], res1_QE[u_10], csvn_QE[u_10], tcbh_QE[u_10], tdih_QE[u_10], rdata_QE[u_10], res2_QE[u_10]) at 48
  but could not prove event(eve_QE(x1, x2, x3, x4, x5, x6, x7))
Proof of event(QuoteVerified(x1, x2, x3, x4, x5, x6, x7)) ==> event(CPUsentSMR(x1, x2, x3, x4, x5, x6, x7, x8, x9)) failed:
  Found QuoteVerified(rtyp_QE[u_10], res1_QE[u_10], csvn_QE[u_10], tcbh_QE[u_10], tdih_QE[u_10], rdata_QE[u_10], res2_QE[u_10]) at 48
  but could not prove event(CPUsentSMR(x1, x2, x3, x4, x5, x6, x7, x8, x9))
Proof of (one-session) secrecy of session_key failed:
  at 130, bad usage(s) of m2_Ch, which may depend on session_key.
Trying equivalence ind_cpa(sym_enc)... Failed.
Trying equivalence ind_cca2(enc)... Failed.
Trying equivalence uf_cma(sign)... Failed.
Trying equivalence suf_cma(mac)... Failed.
Trying equivalence rom(hash)... Failed.
Doing remove assignments of binder x1_Ch... No change.
Trying equivalence ind_cca2(enc) with r3_8... Failed:
Random variables: r3_8 -> r2_1
The transformation did not use the useful_change oracles, or oracles deemed useful by default.
===================== Proof starts =======================
Initial state
Game 1 is
      in(start, ());
      new r1: skeyseed;
      let spk1: spkey = spkgen(r1) in
      let ssk1: sskey = sskgen(r1) in
      new r2: keyseed;
      let pk2: pkey = pkgen(r2) in
      let sk2: skey = skgen(r2) in
      new r3: keyseed;
      new sym_key: key;
      let pk3: pkey = pkgen(r3) in
      let sk3: skey = skgen(r3) in
      new hk: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec(m1_Ch, sk2) in
        let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
        if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
        let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
        let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
        let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
        let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
        event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
        new session_key: key;
        let m2_Ch: bitstring = (let m_8: bitstring = key2bitstring(session_key) in new r_8: enc_seed; enc_r(m_8, x1_Ch, r_8)) in
        out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        out(ch2[iH], hash(hk, x1_1))
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let pk_TD1: pkey = pk3 in
        let rdata_TD: rdata_t = rdata_f(pk3, rdata_other) in
        let m1_TD: bitstring = (let m_9: bitstring = rdata_t2bitstring(rdata_TD) in new r_9: enc_seed_1; enc_r_1(m_9, sym_key, r_9)) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        new tdi_TDXM: tdi_t;
        out(c6[i_2], tdi_t2bitstring(tdi_TDXM));
        in(c6[i_2], ());
        let rtyp_TDXM: rtyp_t = get_rtyp in
        let tdih_TDXM: hashoutput = hash(hk, tdi_t2bitstring(tdi_TDXM)) in
        let m2_TDXM: bitstring = (let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, tdih_TDXM, rdata_TDXM) in new r_10: enc_seed_1; enc_r_1(m_10, sym_key, r_10)) in
        out(c7[i_2], m2_TDXM);
        in(c10[i_2], m3_TDXM: bitstring);
        let res4_TDXM: res_t = get_res in
        let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
        let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
        event TDXMsentTDR_8(smr_TDXM, tdi_TDXM);
        let m4_TDXM: bitstring = (let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in new r_11: enc_seed_1; enc_r_1(m_11, sym_key, r_11)) in
        out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        new csvn_CPU: csvn_t;
        new res1_CPU: res_t;
        new res2_CPU: res_t;
        new tcbi_CPU: tcbi_t;
        let tcbh_CPU: hashoutput = hash(hk, tcbi_t2bitstring(tcbi_CPU)) in
        let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU) in
        let mac_CPU: macres_t = mac(rms_without_mac_t2bitstring(rms_without_mac_CPU), mkey) in
        let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, mac_CPU) in
        let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
        event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU, mac_CPU, tcbi_CPU);
        let m2_CPU: bitstring = (let m_12: bitstring = smr_t2bitstring(smr_CPU) in new r_12: enc_seed_1; enc_r_1(m_12, sym_key, r_12)) in
        out(c9[i_3], m2_CPU);
        in(c16[i_3], m3_CPU: bitstring);
        let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
        let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
        if check(rms_without_mac_t2bitstring(rms_without_mac_QE_to_CPU), mkey, mac_QE_to_CPU) then
        let resOfMac: bool = true in
        let m4_CPU: bitstring = (let m_13: bitstring = bool2bitstring(resOfMac) in new r_13: enc_seed_1; enc_r_1(m_13, sym_key, r_13)) in
        out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        let m1_QE: bitstring = (let m_14: bitstring = rms_t2bitstring(rms_QE) in new r_14: enc_seed_1; enc_r_1(m_14, sym_key, r_14)) in
        out(c15[i_4], m1_QE);
        in(c18[i_4], m2_QE: bitstring);
        let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
        if resOfMac_QE then
        let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
        let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
        let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
        let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
        let m3_QE: bitstring = (let m_15: bitstring = quote_t2bitstring(quote_QE) in new r_15: enc_seed; enc_r(m_15, pk2, r_15)) in
        out(c19[i_4], m3_QE)
      ))


Applying expand
  - Expand if/find/let
yields

Game 2 is
      in(start, ());
      new r1: skeyseed;
      let spk1: spkey = spkgen(r1) in
      let ssk1: sskey = sskgen(r1) in
      new r2: keyseed;
      let pk2: pkey = pkgen(r2) in
      let sk2: skey = skgen(r2) in
      new r3: keyseed;
      new sym_key: key;
      let pk3: pkey = pkgen(r3) in
      let sk3: skey = skgen(r3) in
      new hk: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec(m1_Ch, sk2) in
        let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
        if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
        let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
        let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
        let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
        let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
        event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
        new session_key: key;
        let m_8: bitstring = key2bitstring(session_key) in
        new r_8: enc_seed;
        let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r_8) in
        out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        out(ch2[iH], hash(hk, x1_1))
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let pk_TD1: pkey = pk3 in
        let rdata_TD: rdata_t = rdata_f(pk3, rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        new tdi_TDXM: tdi_t;
        out(c6[i_2], tdi_t2bitstring(tdi_TDXM));
        in(c6[i_2], ());
        let rtyp_TDXM: rtyp_t = get_rtyp in
        let tdih_TDXM: hashoutput = hash(hk, tdi_t2bitstring(tdi_TDXM)) in
        let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, tdih_TDXM, rdata_TDXM) in
        new r_10: enc_seed_1;
        let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
        out(c7[i_2], m2_TDXM);
        in(c10[i_2], m3_TDXM: bitstring);
        let res4_TDXM: res_t = get_res in
        let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
        let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
        event TDXMsentTDR_8(smr_TDXM, tdi_TDXM);
        let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
        new r_11: enc_seed_1;
        let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
        out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        new csvn_CPU: csvn_t;
        new res1_CPU: res_t;
        new res2_CPU: res_t;
        new tcbi_CPU: tcbi_t;
        let tcbh_CPU: hashoutput = hash(hk, tcbi_t2bitstring(tcbi_CPU)) in
        let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU) in
        let mac_CPU: macres_t = mac(rms_without_mac_t2bitstring(rms_without_mac_CPU), mkey) in
        let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, mac_CPU) in
        let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
        event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU, mac_CPU, tcbi_CPU);
        let m_12: bitstring = smr_t2bitstring(smr_CPU) in
        new r_12: enc_seed_1;
        let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
        out(c9[i_3], m2_CPU);
        in(c16[i_3], m3_CPU: bitstring);
        let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
        let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
        if check(rms_without_mac_t2bitstring(rms_without_mac_QE_to_CPU), mkey, mac_QE_to_CPU) then
        let resOfMac: bool = true in
        let m_13: bitstring = bool2bitstring(resOfMac) in
        new r_13: enc_seed_1;
        let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
        out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        let m_14: bitstring = rms_t2bitstring(rms_QE) in
        new r_14: enc_seed_1;
        let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
        out(c15[i_4], m1_QE);
        in(c18[i_4], m2_QE: bitstring);
        let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
        if resOfMac_QE then
        let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
        let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
        let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
        let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
        let m_15: bitstring = quote_t2bitstring(quote_QE) in
        new r_15: enc_seed;
        let m3_QE: bitstring = enc_r(m_15, pk2, r_15) in
        out(c19[i_4], m3_QE)
      ))


Applying remove assignments of findcond
  - Remove assignments on sk3 (definition removed, all usages removed)
  - Remove assignments on pk_TD1 (definition removed, all usages removed)
yields

Game 3 is
      in(start, ());
      new r1: skeyseed;
      let spk1: spkey = spkgen(r1) in
      let ssk1: sskey = sskgen(r1) in
      new r2: keyseed;
      let pk2: pkey = pkgen(r2) in
      let sk2: skey = skgen(r2) in
      new r3: keyseed;
      new sym_key: key;
      let pk3: pkey = pkgen(r3) in
      new hk: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec(m1_Ch, sk2) in
        let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
        if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
        let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
        let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
        let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
        let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
        event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
        new session_key: key;
        let m_8: bitstring = key2bitstring(session_key) in
        new r_8: enc_seed;
        let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r_8) in
        out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        out(ch2[iH], hash(hk, x1_1))
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pk3, rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        new tdi_TDXM: tdi_t;
        out(c6[i_2], tdi_t2bitstring(tdi_TDXM));
        in(c6[i_2], ());
        let rtyp_TDXM: rtyp_t = get_rtyp in
        let tdih_TDXM: hashoutput = hash(hk, tdi_t2bitstring(tdi_TDXM)) in
        let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, tdih_TDXM, rdata_TDXM) in
        new r_10: enc_seed_1;
        let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
        out(c7[i_2], m2_TDXM);
        in(c10[i_2], m3_TDXM: bitstring);
        let res4_TDXM: res_t = get_res in
        let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
        let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
        event TDXMsentTDR_8(smr_TDXM, tdi_TDXM);
        let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
        new r_11: enc_seed_1;
        let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
        out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        new csvn_CPU: csvn_t;
        new res1_CPU: res_t;
        new res2_CPU: res_t;
        new tcbi_CPU: tcbi_t;
        let tcbh_CPU: hashoutput = hash(hk, tcbi_t2bitstring(tcbi_CPU)) in
        let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU) in
        let mac_CPU: macres_t = mac(rms_without_mac_t2bitstring(rms_without_mac_CPU), mkey) in
        let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, mac_CPU) in
        let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
        event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU, mac_CPU, tcbi_CPU);
        let m_12: bitstring = smr_t2bitstring(smr_CPU) in
        new r_12: enc_seed_1;
        let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
        out(c9[i_3], m2_CPU);
        in(c16[i_3], m3_CPU: bitstring);
        let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
        let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
        if check(rms_without_mac_t2bitstring(rms_without_mac_QE_to_CPU), mkey, mac_QE_to_CPU) then
        let resOfMac: bool = true in
        let m_13: bitstring = bool2bitstring(resOfMac) in
        new r_13: enc_seed_1;
        let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
        out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        let m_14: bitstring = rms_t2bitstring(rms_QE) in
        new r_14: enc_seed_1;
        let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
        out(c15[i_4], m1_QE);
        in(c18[i_4], m2_QE: bitstring);
        let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
        if resOfMac_QE then
        let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
        let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
        let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
        let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
        let m_15: bitstring = quote_t2bitstring(quote_QE) in
        new r_15: enc_seed;
        let m3_QE: bitstring = enc_r(m_15, pk2, r_15) in
        out(c19[i_4], m3_QE)
      ))


Applying move all binders
  - Move assignment to res4_TDXM
yields

Game 4 is
      in(start, ());
      new r1: skeyseed;
      let spk1: spkey = spkgen(r1) in
      let ssk1: sskey = sskgen(r1) in
      new r2: keyseed;
      let pk2: pkey = pkgen(r2) in
      let sk2: skey = skgen(r2) in
      new r3: keyseed;
      new sym_key: key;
      let pk3: pkey = pkgen(r3) in
      new hk: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec(m1_Ch, sk2) in
        let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
        if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
        let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
        let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
        let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
        let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
        event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
        new session_key: key;
        let m_8: bitstring = key2bitstring(session_key) in
        new r_8: enc_seed;
        let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r_8) in
        out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        out(ch2[iH], hash(hk, x1_1))
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pk3, rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        new tdi_TDXM: tdi_t;
        out(c6[i_2], tdi_t2bitstring(tdi_TDXM));
        in(c6[i_2], ());
        let rtyp_TDXM: rtyp_t = get_rtyp in
        let tdih_TDXM: hashoutput = hash(hk, tdi_t2bitstring(tdi_TDXM)) in
        let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, tdih_TDXM, rdata_TDXM) in
        new r_10: enc_seed_1;
        let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
        out(c7[i_2], m2_TDXM);
        in(c10[i_2], m3_TDXM: bitstring);
        let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
        let res4_TDXM: res_t = get_res in
        let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
        event TDXMsentTDR_8(smr_TDXM, tdi_TDXM);
        let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
        new r_11: enc_seed_1;
        let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
        out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        new csvn_CPU: csvn_t;
        new res1_CPU: res_t;
        new res2_CPU: res_t;
        new tcbi_CPU: tcbi_t;
        let tcbh_CPU: hashoutput = hash(hk, tcbi_t2bitstring(tcbi_CPU)) in
        let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU) in
        let mac_CPU: macres_t = mac(rms_without_mac_t2bitstring(rms_without_mac_CPU), mkey) in
        let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, mac_CPU) in
        let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
        event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU, mac_CPU, tcbi_CPU);
        let m_12: bitstring = smr_t2bitstring(smr_CPU) in
        new r_12: enc_seed_1;
        let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
        out(c9[i_3], m2_CPU);
        in(c16[i_3], m3_CPU: bitstring);
        let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
        let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
        if check(rms_without_mac_t2bitstring(rms_without_mac_QE_to_CPU), mkey, mac_QE_to_CPU) then
        let resOfMac: bool = true in
        let m_13: bitstring = bool2bitstring(resOfMac) in
        new r_13: enc_seed_1;
        let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
        out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        let m_14: bitstring = rms_t2bitstring(rms_QE) in
        new r_14: enc_seed_1;
        let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
        out(c15[i_4], m1_QE);
        in(c18[i_4], m2_QE: bitstring);
        let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
        if resOfMac_QE then
        let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
        let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
        let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
        let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
        let m_15: bitstring = quote_t2bitstring(quote_QE) in
        new r_15: enc_seed;
        let m3_QE: bitstring = enc_r(m_15, pk2, r_15) in
        out(c19[i_4], m3_QE)
      ))


Applying remove assignments of binder pk3
  - Remove assignments on pk3 (definition removed, all usages removed)
yields

Game 5 is
      in(start, ());
      new r1: skeyseed;
      let spk1: spkey = spkgen(r1) in
      let ssk1: sskey = sskgen(r1) in
      new r2: keyseed;
      let pk2: pkey = pkgen(r2) in
      let sk2: skey = skgen(r2) in
      new r3: keyseed;
      new sym_key: key;
      new hk: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec(m1_Ch, sk2) in
        let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
        if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
        let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
        let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
        let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
        let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
        event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
        new session_key: key;
        let m_8: bitstring = key2bitstring(session_key) in
        new r_8: enc_seed;
        let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r_8) in
        out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        out(ch2[iH], hash(hk, x1_1))
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pkgen(r3), rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        new tdi_TDXM: tdi_t;
        out(c6[i_2], tdi_t2bitstring(tdi_TDXM));
        in(c6[i_2], ());
        let rtyp_TDXM: rtyp_t = get_rtyp in
        let tdih_TDXM: hashoutput = hash(hk, tdi_t2bitstring(tdi_TDXM)) in
        let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, tdih_TDXM, rdata_TDXM) in
        new r_10: enc_seed_1;
        let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
        out(c7[i_2], m2_TDXM);
        in(c10[i_2], m3_TDXM: bitstring);
        let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
        let res4_TDXM: res_t = get_res in
        let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
        event TDXMsentTDR_8(smr_TDXM, tdi_TDXM);
        let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
        new r_11: enc_seed_1;
        let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
        out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        new csvn_CPU: csvn_t;
        new res1_CPU: res_t;
        new res2_CPU: res_t;
        new tcbi_CPU: tcbi_t;
        let tcbh_CPU: hashoutput = hash(hk, tcbi_t2bitstring(tcbi_CPU)) in
        let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU) in
        let mac_CPU: macres_t = mac(rms_without_mac_t2bitstring(rms_without_mac_CPU), mkey) in
        let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, mac_CPU) in
        let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
        event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU, mac_CPU, tcbi_CPU);
        let m_12: bitstring = smr_t2bitstring(smr_CPU) in
        new r_12: enc_seed_1;
        let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
        out(c9[i_3], m2_CPU);
        in(c16[i_3], m3_CPU: bitstring);
        let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
        let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
        if check(rms_without_mac_t2bitstring(rms_without_mac_QE_to_CPU), mkey, mac_QE_to_CPU) then
        let resOfMac: bool = true in
        let m_13: bitstring = bool2bitstring(resOfMac) in
        new r_13: enc_seed_1;
        let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
        out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        let m_14: bitstring = rms_t2bitstring(rms_QE) in
        new r_14: enc_seed_1;
        let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
        out(c15[i_4], m1_QE);
        in(c18[i_4], m2_QE: bitstring);
        let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
        if resOfMac_QE then
        let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
        let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
        let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
        let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
        let m_15: bitstring = quote_t2bitstring(quote_QE) in
        new r_15: enc_seed;
        let m3_QE: bitstring = enc_r(m_15, pk2, r_15) in
        out(c19[i_4], m3_QE)
      ))


Applying equivalence ind_cca2(enc) with r3 [probability (qQE + qChallenger) * Penc(time(context for game 5) + time + (-1 + qChallenger + qQE) * time(enc_r, max(maxlength(game 5: m_15), maxlength(game 5: m_8))), 0)]
  - Equivalence ind_cca2(enc) with variables: r_15 -> r2_1, r_8 -> r2_1, r3 -> r
yields

Game 6 is
      in(start, ());
      new r1: skeyseed;
      let spk1: spkey = spkgen(r1) in
      let ssk1: sskey = sskgen(r1) in
      new r2: keyseed;
      let pk2: pkey = pkgen(r2) in
      let sk2: skey = skgen(r2) in
      new r3_2: keyseed;
      new sym_key: key;
      new hk: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec(m1_Ch, sk2) in
        let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
        if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
        let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
        let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
        let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
        let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
        event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
        new session_key: key;
        let m_8: bitstring = key2bitstring(session_key) in
        new r3_1: enc_seed;
        new r2_1: enc_seed;
        let m2_Ch: bitstring = (let x: bitstring = m_8 in (let y: pkey = x1_Ch in if defined(r3_2) && (y = pkgen2_1(r3_2)) then (let m2: bitstring = enc_r2(Z(x), y, r2_1) in m2) else enc_r(x, y, r3_1))) in
        out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        out(ch2[iH], hash(hk, x1_1))
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pkgen2_1(r3_2), rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        new tdi_TDXM: tdi_t;
        out(c6[i_2], tdi_t2bitstring(tdi_TDXM));
        in(c6[i_2], ());
        let rtyp_TDXM: rtyp_t = get_rtyp in
        let tdih_TDXM: hashoutput = hash(hk, tdi_t2bitstring(tdi_TDXM)) in
        let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, tdih_TDXM, rdata_TDXM) in
        new r_10: enc_seed_1;
        let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
        out(c7[i_2], m2_TDXM);
        in(c10[i_2], m3_TDXM: bitstring);
        let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
        let res4_TDXM: res_t = get_res in
        let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
        event TDXMsentTDR_8(smr_TDXM, tdi_TDXM);
        let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
        new r_11: enc_seed_1;
        let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
        out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        new csvn_CPU: csvn_t;
        new res1_CPU: res_t;
        new res2_CPU: res_t;
        new tcbi_CPU: tcbi_t;
        let tcbh_CPU: hashoutput = hash(hk, tcbi_t2bitstring(tcbi_CPU)) in
        let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU) in
        let mac_CPU: macres_t = mac(rms_without_mac_t2bitstring(rms_without_mac_CPU), mkey) in
        let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, mac_CPU) in
        let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
        event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU, mac_CPU, tcbi_CPU);
        let m_12: bitstring = smr_t2bitstring(smr_CPU) in
        new r_12: enc_seed_1;
        let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
        out(c9[i_3], m2_CPU);
        in(c16[i_3], m3_CPU: bitstring);
        let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
        let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
        if check(rms_without_mac_t2bitstring(rms_without_mac_QE_to_CPU), mkey, mac_QE_to_CPU) then
        let resOfMac: bool = true in
        let m_13: bitstring = bool2bitstring(resOfMac) in
        new r_13: enc_seed_1;
        let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
        out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        let m_14: bitstring = rms_t2bitstring(rms_QE) in
        new r_14: enc_seed_1;
        let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
        out(c15[i_4], m1_QE);
        in(c18[i_4], m2_QE: bitstring);
        let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
        if resOfMac_QE then
        let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
        let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
        let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
        let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
        let m_15: bitstring = quote_t2bitstring(quote_QE) in
        new r3_3: enc_seed;
        new r2_2: enc_seed;
        let m3_QE: bitstring = (let x_1: bitstring = m_15 in (let y_1: pkey = pk2 in {501}if defined(r3_2) && {502}(y_1 = pkgen2_1(r3_2)) then (let m2_1: bitstring = enc_r2(Z(x_1), y_1, r2_2) in m2_1) else enc_r(x_1, y_1, r3_3))) in
        out(c19[i_4], m3_QE)
      ))


Applying simplify (non-expanded game) [probability Penccoll]
  - Simplification pass
    - Replaced (y_1 = pkgen2_1(r3_2)) with false at 502
    - Remove branch 1 in find at 501
    - Find at 501 removed (else branch kept if any)
yields

Game 7 is
      in(start, ());
      new r1: skeyseed;
      let spk1: spkey = spkgen(r1) in
      let ssk1: sskey = sskgen(r1) in
      new r2: keyseed;
      let pk2: pkey = pkgen(r2) in
      let sk2: skey = skgen(r2) in
      new r3_2: keyseed;
      new sym_key: key;
      new hk: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec(m1_Ch, sk2) in
        let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
        if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
        let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
        let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
        let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
        let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
        event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
        new session_key: key;
        let m_8: bitstring = key2bitstring(session_key) in
        new r3_1: enc_seed;
        new r2_1: enc_seed;
        let m2_Ch: bitstring = (let x: bitstring = m_8 in (let y: pkey = x1_Ch in {95}if defined(r3_2) && (y = pkgen2_1(r3_2)) then (let m2: bitstring = enc_r2(Z(x), y, r2_1) in m2) else enc_r(x, y, r3_1))) in
        out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        out(ch2[iH], hash(hk, x1_1))
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pkgen2_1(r3_2), rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        new tdi_TDXM: tdi_t;
        out(c6[i_2], tdi_t2bitstring(tdi_TDXM));
        in(c6[i_2], ());
        let rtyp_TDXM: rtyp_t = get_rtyp in
        let tdih_TDXM: hashoutput = hash(hk, tdi_t2bitstring(tdi_TDXM)) in
        let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, tdih_TDXM, rdata_TDXM) in
        new r_10: enc_seed_1;
        let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
        out(c7[i_2], m2_TDXM);
        in(c10[i_2], m3_TDXM: bitstring);
        let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
        let res4_TDXM: res_t = get_res in
        let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
        event TDXMsentTDR_8(smr_TDXM, tdi_TDXM);
        let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
        new r_11: enc_seed_1;
        let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
        out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        new csvn_CPU: csvn_t;
        new res1_CPU: res_t;
        new res2_CPU: res_t;
        new tcbi_CPU: tcbi_t;
        let tcbh_CPU: hashoutput = hash(hk, tcbi_t2bitstring(tcbi_CPU)) in
        let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU) in
        let mac_CPU: macres_t = mac(rms_without_mac_t2bitstring(rms_without_mac_CPU), mkey) in
        let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, mac_CPU) in
        let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
        event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU, mac_CPU, tcbi_CPU);
        let m_12: bitstring = smr_t2bitstring(smr_CPU) in
        new r_12: enc_seed_1;
        let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
        out(c9[i_3], m2_CPU);
        in(c16[i_3], m3_CPU: bitstring);
        let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
        let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
        if check(rms_without_mac_t2bitstring(rms_without_mac_QE_to_CPU), mkey, mac_QE_to_CPU) then
        let resOfMac: bool = true in
        let m_13: bitstring = bool2bitstring(resOfMac) in
        new r_13: enc_seed_1;
        let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
        out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        let m_14: bitstring = rms_t2bitstring(rms_QE) in
        new r_14: enc_seed_1;
        let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
        out(c15[i_4], m1_QE);
        in(c18[i_4], m2_QE: bitstring);
        let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
        if resOfMac_QE then
        let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
        let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
        let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
        let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
        let m_15: bitstring = quote_t2bitstring(quote_QE) in
        new r3_3: enc_seed;
        new r2_2: enc_seed;
        let m3_QE: bitstring = (let x_1: bitstring = m_15 in (let y_1: pkey = pk2 in enc_r(x_1, y_1, r3_3))) in
        out(c19[i_4], m3_QE)
      ))


Applying expand
  - Expand if/find/let
    - Transformed find at 95 into a test
yields

Game 8 is
      in(start, ());
      new r1: skeyseed;
      let spk1: spkey = spkgen(r1) in
      let ssk1: sskey = sskgen(r1) in
      new r2: keyseed;
      let pk2: pkey = pkgen(r2) in
      let sk2: skey = skgen(r2) in
      new r3_2: keyseed;
      new sym_key: key;
      new hk: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec(m1_Ch, sk2) in
        let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
        if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
        let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
        let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
        let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
        let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
        event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
        new session_key: key;
        let m_8: bitstring = key2bitstring(session_key) in
        new r3_1: enc_seed;
        new r2_1: enc_seed;
        let x: bitstring = m_8 in
        let y: pkey = x1_Ch in
        if y = pkgen2_1(r3_2) then
        (
          let m2: bitstring = enc_r2(Z(x), y, r2_1) in
          let m2_Ch: bitstring = m2 in
          out(c23[i], m2_Ch)
        )
        else
          let m2_Ch: bitstring = enc_r(x, y, r3_1) in
          out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        out(ch2[iH], hash(hk, x1_1))
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pkgen2_1(r3_2), rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        new tdi_TDXM: tdi_t;
        out(c6[i_2], tdi_t2bitstring(tdi_TDXM));
        in(c6[i_2], ());
        let rtyp_TDXM: rtyp_t = get_rtyp in
        let tdih_TDXM: hashoutput = hash(hk, tdi_t2bitstring(tdi_TDXM)) in
        let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, tdih_TDXM, rdata_TDXM) in
        new r_10: enc_seed_1;
        let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
        out(c7[i_2], m2_TDXM);
        in(c10[i_2], m3_TDXM: bitstring);
        let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
        let res4_TDXM: res_t = get_res in
        let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
        event TDXMsentTDR_8(smr_TDXM, tdi_TDXM);
        let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
        new r_11: enc_seed_1;
        let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
        out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        new csvn_CPU: csvn_t;
        new res1_CPU: res_t;
        new res2_CPU: res_t;
        new tcbi_CPU: tcbi_t;
        let tcbh_CPU: hashoutput = hash(hk, tcbi_t2bitstring(tcbi_CPU)) in
        let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU) in
        let mac_CPU: macres_t = mac(rms_without_mac_t2bitstring(rms_without_mac_CPU), mkey) in
        let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, mac_CPU) in
        let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
        event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU, mac_CPU, tcbi_CPU);
        let m_12: bitstring = smr_t2bitstring(smr_CPU) in
        new r_12: enc_seed_1;
        let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
        out(c9[i_3], m2_CPU);
        in(c16[i_3], m3_CPU: bitstring);
        let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
        let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
        if check(rms_without_mac_t2bitstring(rms_without_mac_QE_to_CPU), mkey, mac_QE_to_CPU) then
        let resOfMac: bool = true in
        let m_13: bitstring = bool2bitstring(resOfMac) in
        new r_13: enc_seed_1;
        let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
        out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        let m_14: bitstring = rms_t2bitstring(rms_QE) in
        new r_14: enc_seed_1;
        let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
        out(c15[i_4], m1_QE);
        in(c18[i_4], m2_QE: bitstring);
        let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
        if resOfMac_QE then
        let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
        let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
        let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
        let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
        let m_15: bitstring = quote_t2bitstring(quote_QE) in
        new r3_3: enc_seed;
        new r2_2: enc_seed;
        let x_1: bitstring = m_15 in
        let y_1: pkey = pk2 in
        let m3_QE: bitstring = enc_r(x_1, y_1, r3_3) in
        out(c19[i_4], m3_QE)
      ))


Applying remove assignments of findcond
  - Remove assignments on x_1 (definition removed, all usages removed)
  - Remove assignments on y_1 (definition removed, all usages removed)
  - Remove assignments on x (definition removed, all usages removed)
  - Remove assignments on y (definition removed, all usages removed)
  - Remove assignments on m2_Ch (definition removed, all usages removed)
yields

Game 9 is
      in(start, ());
      new r1: skeyseed;
      let spk1: spkey = spkgen(r1) in
      let ssk1: sskey = sskgen(r1) in
      new r2: keyseed;
      let pk2: pkey = pkgen(r2) in
      let sk2: skey = skgen(r2) in
      new r3_2: keyseed;
      new sym_key: key;
      new hk: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec(m1_Ch, sk2) in
        let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
        if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
        let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
        let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
        let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
        let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
        event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
        new session_key: key;
        let m_8: bitstring = key2bitstring(session_key) in
        new r3_1: enc_seed;
        new r2_1: enc_seed;
        if x1_Ch = pkgen2_1(r3_2) then
        (
          let m2: bitstring = {95}enc_r2(Z(m_8), x1_Ch, r2_1) in
          out(c23[i], m2)
        )
        else
          let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_1) in
          out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        out(ch2[iH], hash(hk, x1_1))
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pkgen2_1(r3_2), rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        new tdi_TDXM: tdi_t;
        out(c6[i_2], tdi_t2bitstring(tdi_TDXM));
        in(c6[i_2], ());
        let rtyp_TDXM: rtyp_t = get_rtyp in
        let tdih_TDXM: hashoutput = hash(hk, tdi_t2bitstring(tdi_TDXM)) in
        let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, tdih_TDXM, rdata_TDXM) in
        new r_10: enc_seed_1;
        let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
        out(c7[i_2], m2_TDXM);
        in(c10[i_2], m3_TDXM: bitstring);
        let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
        let res4_TDXM: res_t = get_res in
        let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
        event TDXMsentTDR_8(smr_TDXM, tdi_TDXM);
        let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
        new r_11: enc_seed_1;
        let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
        out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        new csvn_CPU: csvn_t;
        new res1_CPU: res_t;
        new res2_CPU: res_t;
        new tcbi_CPU: tcbi_t;
        let tcbh_CPU: hashoutput = hash(hk, tcbi_t2bitstring(tcbi_CPU)) in
        let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU) in
        let mac_CPU: macres_t = mac(rms_without_mac_t2bitstring(rms_without_mac_CPU), mkey) in
        let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, mac_CPU) in
        let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
        event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU, mac_CPU, tcbi_CPU);
        let m_12: bitstring = smr_t2bitstring(smr_CPU) in
        new r_12: enc_seed_1;
        let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
        out(c9[i_3], m2_CPU);
        in(c16[i_3], m3_CPU: bitstring);
        let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
        let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
        if check(rms_without_mac_t2bitstring(rms_without_mac_QE_to_CPU), mkey, mac_QE_to_CPU) then
        let resOfMac: bool = true in
        let m_13: bitstring = bool2bitstring(resOfMac) in
        new r_13: enc_seed_1;
        let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
        out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        let m_14: bitstring = rms_t2bitstring(rms_QE) in
        new r_14: enc_seed_1;
        let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
        out(c15[i_4], m1_QE);
        in(c18[i_4], m2_QE: bitstring);
        let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
        if resOfMac_QE then
        let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
        let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
        let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
        let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
        let m_15: bitstring = quote_t2bitstring(quote_QE) in
        new r3_3: enc_seed;
 {492}  new r2_2: enc_seed;
        let m3_QE: bitstring = enc_r(m_15, pk2, r3_3) in
        out(c19[i_4], m3_QE)
      ))


Applying simplify
  - Simplification pass
    - Remove random number generation at 492
    - Replaced enc_r2(Z(m_8), x1_Ch, r2_1) with enc_r2(Zkey1, x1_Ch, r2_1) at 95
yields

Game 10 is
      in(start, ());
      new r1: skeyseed;
      let spk1: spkey = spkgen(r1) in
      let ssk1: sskey = sskgen(r1) in
      new r2: keyseed;
      let pk2: pkey = pkgen(r2) in
      let sk2: skey = skgen(r2) in
      new r3_2: keyseed;
      new sym_key: key;
      new hk: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec(m1_Ch, sk2) in
        let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
        if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
        let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
        let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
        let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
        let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
        event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
        new session_key: key;
        let m_8: bitstring = key2bitstring(session_key) in
        new r3_1: enc_seed;
        new r2_1: enc_seed;
        if x1_Ch = pkgen2_1(r3_2) then
        (
          let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
          out(c23[i], m2)
        )
        else
          let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_1) in
          out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        out(ch2[iH], hash(hk, x1_1))
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pkgen2_1(r3_2), rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        new tdi_TDXM: tdi_t;
        out(c6[i_2], tdi_t2bitstring(tdi_TDXM));
        in(c6[i_2], ());
        let rtyp_TDXM: rtyp_t = get_rtyp in
        let tdih_TDXM: hashoutput = hash(hk, tdi_t2bitstring(tdi_TDXM)) in
        let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, tdih_TDXM, rdata_TDXM) in
        new r_10: enc_seed_1;
        let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
        out(c7[i_2], m2_TDXM);
        in(c10[i_2], m3_TDXM: bitstring);
        let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
        let res4_TDXM: res_t = get_res in
        let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
        event TDXMsentTDR_8(smr_TDXM, tdi_TDXM);
        let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
        new r_11: enc_seed_1;
        let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
        out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        new csvn_CPU: csvn_t;
        new res1_CPU: res_t;
        new res2_CPU: res_t;
        new tcbi_CPU: tcbi_t;
        let tcbh_CPU: hashoutput = hash(hk, tcbi_t2bitstring(tcbi_CPU)) in
        let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU) in
        let mac_CPU: macres_t = mac(rms_without_mac_t2bitstring(rms_without_mac_CPU), mkey) in
        let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, mac_CPU) in
        let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
        event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU, mac_CPU, tcbi_CPU);
        let m_12: bitstring = smr_t2bitstring(smr_CPU) in
        new r_12: enc_seed_1;
        let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
        out(c9[i_3], m2_CPU);
        in(c16[i_3], m3_CPU: bitstring);
        let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
        let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
        if check(rms_without_mac_t2bitstring(rms_without_mac_QE_to_CPU), mkey, mac_QE_to_CPU) then
        let resOfMac: bool = true in
        let m_13: bitstring = bool2bitstring(resOfMac) in
        new r_13: enc_seed_1;
        let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
        out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        let m_14: bitstring = rms_t2bitstring(rms_QE) in
        new r_14: enc_seed_1;
        let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
        out(c15[i_4], m1_QE);
        in(c18[i_4], m2_QE: bitstring);
        let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
        if resOfMac_QE then
        let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
        let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
        let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
        let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
        let m_15: bitstring = quote_t2bitstring(quote_QE) in
        new r3_3: enc_seed;
        let m3_QE: bitstring = enc_r(m_15, pk2, r3_3) in
        out(c19[i_4], m3_QE)
      ))


Applying move all binders
  - Move random number generation r2_1
  - Move random number generation r3_1
  - Move assignment to m_8
  - Move random number generation session_key
yields

Game 11 is
      in(start, ());
      new r1: skeyseed;
      let spk1: spkey = spkgen(r1) in
      let ssk1: sskey = sskgen(r1) in
      new r2: keyseed;
      let pk2: pkey = pkgen(r2) in
      let sk2: skey = skgen(r2) in
      new r3_2: keyseed;
      new sym_key: key;
      new hk: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec(m1_Ch, sk2) in
        let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
        if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
        let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
        let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
        let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
        let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
        event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
        if x1_Ch = pkgen2_1(r3_2) then
        (
          new r2_1: enc_seed;
          let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
          new session_key: key;
          out(c23[i], m2)
        )
        else
          new r3_1: enc_seed;
          new session_key: key;
          let m_8: bitstring = key2bitstring(session_key) in
          let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_1) in
          out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        out(ch2[iH], hash(hk, x1_1))
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pkgen2_1(r3_2), rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        new tdi_TDXM: tdi_t;
        out(c6[i_2], tdi_t2bitstring(tdi_TDXM));
        in(c6[i_2], ());
        let rtyp_TDXM: rtyp_t = get_rtyp in
        let tdih_TDXM: hashoutput = hash(hk, tdi_t2bitstring(tdi_TDXM)) in
        let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, tdih_TDXM, rdata_TDXM) in
        new r_10: enc_seed_1;
        let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
        out(c7[i_2], m2_TDXM);
        in(c10[i_2], m3_TDXM: bitstring);
        let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
        let res4_TDXM: res_t = get_res in
        let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
        event TDXMsentTDR_8(smr_TDXM, tdi_TDXM);
        let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
        new r_11: enc_seed_1;
        let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
        out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        new csvn_CPU: csvn_t;
        new res1_CPU: res_t;
        new res2_CPU: res_t;
        new tcbi_CPU: tcbi_t;
        let tcbh_CPU: hashoutput = hash(hk, tcbi_t2bitstring(tcbi_CPU)) in
        let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU) in
        let mac_CPU: macres_t = mac(rms_without_mac_t2bitstring(rms_without_mac_CPU), mkey) in
        let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, mac_CPU) in
        let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
        event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU, mac_CPU, tcbi_CPU);
        let m_12: bitstring = smr_t2bitstring(smr_CPU) in
        new r_12: enc_seed_1;
        let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
        out(c9[i_3], m2_CPU);
        in(c16[i_3], m3_CPU: bitstring);
        let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
        let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
        if check(rms_without_mac_t2bitstring(rms_without_mac_QE_to_CPU), mkey, mac_QE_to_CPU) then
        let resOfMac: bool = true in
        let m_13: bitstring = bool2bitstring(resOfMac) in
        new r_13: enc_seed_1;
        let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
        out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        let m_14: bitstring = rms_t2bitstring(rms_QE) in
        new r_14: enc_seed_1;
        let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
        out(c15[i_4], m1_QE);
        in(c18[i_4], m2_QE: bitstring);
        let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
        if resOfMac_QE then
        let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
        let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
        let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
        let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
        let m_15: bitstring = quote_t2bitstring(quote_QE) in
        new r3_3: enc_seed;
        let m3_QE: bitstring = enc_r(m_15, pk2, r3_3) in
        out(c19[i_4], m3_QE)
      ))


Proved event(QEaccepted2_14(x1, x2)) ==> event(TDXMsentTDR_8(x1, x2)) in game 11
Proved event(eve_QE(x1, x2, x3, x4, x5, x6, x7)) ==> event(CPUsentSMR(x1, x2, x3, x4, x5, x6, x7, x8, x9)) in game 11

Applying equivalence suf_cma(mac) [probability Pmac(time(context for game 11) + time, qCPU, qCPU, 0, length(rms_without_mac_t2bitstring))]
  - Equivalence suf_cma(mac) with variables: mkey -> k_1
yields

Game 12 is
      in(start, ());
      new r1: skeyseed;
      let spk1: spkey = spkgen(r1) in
      let ssk1: sskey = sskgen(r1) in
      new r2: keyseed;
      let pk2: pkey = pkgen(r2) in
      let sk2: skey = skgen(r2) in
      new r3_2: keyseed;
      new sym_key: key;
      new hk: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec(m1_Ch, sk2) in
        let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
        if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
        let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
        let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
        let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
        let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
        event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
        if x1_Ch = pkgen2_1(r3_2) then
        (
          new r2_1: enc_seed;
          let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
          new session_key: key;
          out(c23[i], m2)
        )
        else
          new r3_1: enc_seed;
          new session_key: key;
          let m_8: bitstring = key2bitstring(session_key) in
          let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_1) in
          out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        out(ch2[iH], hash(hk, x1_1))
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pkgen2_1(r3_2), rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        new tdi_TDXM: tdi_t;
        out(c6[i_2], tdi_t2bitstring(tdi_TDXM));
        in(c6[i_2], ());
        let rtyp_TDXM: rtyp_t = get_rtyp in
        let tdih_TDXM: hashoutput = hash(hk, tdi_t2bitstring(tdi_TDXM)) in
        let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, tdih_TDXM, rdata_TDXM) in
        new r_10: enc_seed_1;
        let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
        out(c7[i_2], m2_TDXM);
        in(c10[i_2], m3_TDXM: bitstring);
        let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
        let res4_TDXM: res_t = get_res in
        let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
        event TDXMsentTDR_8(smr_TDXM, tdi_TDXM);
        let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
        new r_11: enc_seed_1;
        let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
        out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        new csvn_CPU: csvn_t;
        new res1_CPU: res_t;
        new res2_CPU: res_t;
        new tcbi_CPU: tcbi_t;
        let tcbh_CPU: hashoutput = hash(hk, tcbi_t2bitstring(tcbi_CPU)) in
        let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU) in
        let mac_CPU: macres_t = (let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in (let ma2: macres_t = mac'(x_2, mkey) in ma2)) in
        let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, mac_CPU) in
        let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
        event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU, mac_CPU, tcbi_CPU);
        let m_12: bitstring = smr_t2bitstring(smr_CPU) in
        new r_12: enc_seed_1;
        let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
        out(c9[i_3], m2_CPU);
        in(c16[i_3], m3_CPU: bitstring);
        let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
        let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
 {384}  if (let m_16: bitstring = rms_without_mac_t2bitstring(rms_without_mac_QE_to_CPU) in (let ma: macres_t = mac_QE_to_CPU in find u = ri <= qCPU suchthat defined(x_2[ri], ma2[ri]) && (m_16 = x_2[ri]) && (ma = ma2[ri]) then true else false)) then
        let resOfMac: bool = true in
        let m_13: bitstring = bool2bitstring(resOfMac) in
        new r_13: enc_seed_1;
        let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
        out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        let m_14: bitstring = rms_t2bitstring(rms_QE) in
        new r_14: enc_seed_1;
        let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
        out(c15[i_4], m1_QE);
        in(c18[i_4], m2_QE: bitstring);
        let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
        if resOfMac_QE then
        let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
        let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
        let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
        let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
        let m_15: bitstring = quote_t2bitstring(quote_QE) in
        new r3_3: enc_seed;
        let m3_QE: bitstring = enc_r(m_15, pk2, r3_3) in
        out(c19[i_4], m3_QE)
      ))


Applying expand
  - Expand if/find/let
    - Test at 384 always false
    - Test at 384 always true
yields

Game 13 is
      in(start, ());
      new r1: skeyseed;
      let spk1: spkey = spkgen(r1) in
      let ssk1: sskey = sskgen(r1) in
      new r2: keyseed;
      let pk2: pkey = pkgen(r2) in
      let sk2: skey = skgen(r2) in
      new r3_2: keyseed;
      new sym_key: key;
      new hk: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec(m1_Ch, sk2) in
        let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
        if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
        let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
        let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
        let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
        let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
        event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
        if x1_Ch = pkgen2_1(r3_2) then
        (
          new r2_1: enc_seed;
          let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
          new session_key: key;
          out(c23[i], m2)
        )
        else
          new r3_1: enc_seed;
          new session_key: key;
          let m_8: bitstring = key2bitstring(session_key) in
          let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_1) in
          out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        out(ch2[iH], hash(hk, x1_1))
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pkgen2_1(r3_2), rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        new tdi_TDXM: tdi_t;
        out(c6[i_2], tdi_t2bitstring(tdi_TDXM));
        in(c6[i_2], ());
        let rtyp_TDXM: rtyp_t = get_rtyp in
        let tdih_TDXM: hashoutput = hash(hk, tdi_t2bitstring(tdi_TDXM)) in
        let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, tdih_TDXM, rdata_TDXM) in
        new r_10: enc_seed_1;
        let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
        out(c7[i_2], m2_TDXM);
        in(c10[i_2], m3_TDXM: bitstring);
        let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
        let res4_TDXM: res_t = get_res in
        let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
        let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
        new r_11: enc_seed_1;
        let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
        out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        new csvn_CPU: csvn_t;
        new res1_CPU: res_t;
        new res2_CPU: res_t;
        new tcbi_CPU: tcbi_t;
        let tcbh_CPU: hashoutput = hash(hk, tcbi_t2bitstring(tcbi_CPU)) in
        let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU) in
        let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
        let ma2: macres_t = mac'(x_2, mkey) in
        let mac_CPU: macres_t = ma2 in
        let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, mac_CPU) in
        let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
        event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU, mac_CPU, tcbi_CPU);
        let m_12: bitstring = smr_t2bitstring(smr_CPU) in
        new r_12: enc_seed_1;
        let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
        out(c9[i_3], m2_CPU);
        in(c16[i_3], m3_CPU: bitstring);
        let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
        let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
        let m_16: bitstring = rms_without_mac_t2bitstring(rms_without_mac_QE_to_CPU) in
        let ma: macres_t = mac_QE_to_CPU in
        find u = ri <= qCPU suchthat defined(x_2[ri], ma2[ri]) && (m_16 = x_2[ri]) && (ma = ma2[ri]) then
        let resOfMac: bool = true in
        let m_13: bitstring = bool2bitstring(resOfMac) in
        new r_13: enc_seed_1;
        let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
        out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        let m_14: bitstring = rms_t2bitstring(rms_QE) in
        new r_14: enc_seed_1;
        let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
        out(c15[i_4], m1_QE);
        in(c18[i_4], m2_QE: bitstring);
        let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
        if resOfMac_QE then
        let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
        let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
        let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
        let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
        let m_15: bitstring = quote_t2bitstring(quote_QE) in
        new r3_3: enc_seed;
        let m3_QE: bitstring = enc_r(m_15, pk2, r3_3) in
        out(c19[i_4], m3_QE)
      ))


Applying remove assignments of findcond
  - Remove assignments on mac_CPU (definition removed, all usages removed)
  - Remove assignments on ma (definition removed, all usages removed)
yields

Game 14 is
      in(start, ());
      new r1: skeyseed;
      let spk1: spkey = spkgen(r1) in
      let ssk1: sskey = sskgen(r1) in
      new r2: keyseed;
      let pk2: pkey = pkgen(r2) in
      let sk2: skey = skgen(r2) in
      new r3_2: keyseed;
      new sym_key: key;
      new hk: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec(m1_Ch, sk2) in
        let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
        if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
        let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
        let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
        let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
        let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
        event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
        if x1_Ch = pkgen2_1(r3_2) then
        (
          new r2_1: enc_seed;
          let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
          new session_key: key;
          out(c23[i], m2)
        )
        else
          new r3_1: enc_seed;
          new session_key: key;
          let m_8: bitstring = key2bitstring(session_key) in
          let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_1) in
          out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        out(ch2[iH], hash(hk, x1_1))
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pkgen2_1(r3_2), rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        new tdi_TDXM: tdi_t;
        out(c6[i_2], tdi_t2bitstring(tdi_TDXM));
        in(c6[i_2], ());
        let rtyp_TDXM: rtyp_t = get_rtyp in
        let tdih_TDXM: hashoutput = hash(hk, tdi_t2bitstring(tdi_TDXM)) in
        let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, tdih_TDXM, rdata_TDXM) in
        new r_10: enc_seed_1;
        let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
        out(c7[i_2], m2_TDXM);
        in(c10[i_2], m3_TDXM: bitstring);
        let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
        let res4_TDXM: res_t = get_res in
        let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
        let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
        new r_11: enc_seed_1;
        let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
        out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        new csvn_CPU: csvn_t;
        new res1_CPU: res_t;
        new res2_CPU: res_t;
        new tcbi_CPU: tcbi_t;
        let tcbh_CPU: hashoutput = hash(hk, tcbi_t2bitstring(tcbi_CPU)) in
        let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU) in
        let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
        let ma2: macres_t = mac'(x_2, mkey) in
        let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
        let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
        event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
        let m_12: bitstring = smr_t2bitstring(smr_CPU) in
        new r_12: enc_seed_1;
        let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
        out(c9[i_3], m2_CPU);
        in(c16[i_3], m3_CPU: bitstring);
        let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
        let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
        let m_16: bitstring = rms_without_mac_t2bitstring(rms_without_mac_QE_to_CPU) in
 {377}  find u = ri <= qCPU suchthat defined(x_2[ri], ma2[ri]) && {380}((m_16 = x_2[ri]) && (mac_QE_to_CPU = ma2[ri])) then
        let resOfMac: bool = true in
        let m_13: bitstring = bool2bitstring(resOfMac) in
        new r_13: enc_seed_1;
        let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
        out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        let m_14: bitstring = rms_t2bitstring(rms_QE) in
        new r_14: enc_seed_1;
        let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
        out(c15[i_4], m1_QE);
        in(c18[i_4], m2_QE: bitstring);
        let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
        if resOfMac_QE then
        let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
        let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
        let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
        let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
        let m_15: bitstring = quote_t2bitstring(quote_QE) in
        new r3_3: enc_seed;
        let m3_QE: bitstring = enc_r(m_15, pk2, r3_3) in
        out(c19[i_4], m3_QE)
      ))


Applying simplify
  - Simplification pass
    - Replaced ((m_16 = x_2[ri]) && (mac_QE_to_CPU = ma2[ri])) with ((rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri])) at 380
    - Replaced defined condition x_2[ri], ma2[ri] with ma2[ri], rms_without_mac_CPU[ri] in find at 377
yields

Game 15 is
      in(start, ());
      new r1: skeyseed;
      let spk1: spkey = spkgen(r1) in
      let ssk1: sskey = sskgen(r1) in
      new r2: keyseed;
      let pk2: pkey = pkgen(r2) in
      let sk2: skey = skgen(r2) in
      new r3_2: keyseed;
      new sym_key: key;
      new hk: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec(m1_Ch, sk2) in
        let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
        if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
        let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
        let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
        let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
        let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
        event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
        if x1_Ch = pkgen2_1(r3_2) then
        (
          new r2_1: enc_seed;
          let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
          new session_key: key;
          out(c23[i], m2)
        )
        else
          new r3_1: enc_seed;
          new session_key: key;
          let m_8: bitstring = key2bitstring(session_key) in
          let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_1) in
          out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        out(ch2[iH], hash(hk, x1_1))
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pkgen2_1(r3_2), rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        new tdi_TDXM: tdi_t;
        out(c6[i_2], tdi_t2bitstring(tdi_TDXM));
        in(c6[i_2], ());
        let rtyp_TDXM: rtyp_t = get_rtyp in
        let tdih_TDXM: hashoutput = hash(hk, tdi_t2bitstring(tdi_TDXM)) in
        let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, tdih_TDXM, rdata_TDXM) in
        new r_10: enc_seed_1;
        let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
        out(c7[i_2], m2_TDXM);
        in(c10[i_2], m3_TDXM: bitstring);
        let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
        let res4_TDXM: res_t = get_res in
        let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
        let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
        new r_11: enc_seed_1;
        let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
        out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        new csvn_CPU: csvn_t;
        new res1_CPU: res_t;
        new res2_CPU: res_t;
        new tcbi_CPU: tcbi_t;
        let tcbh_CPU: hashoutput = hash(hk, tcbi_t2bitstring(tcbi_CPU)) in
        let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU) in
        let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
        let ma2: macres_t = mac'(x_2, mkey) in
        let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
        let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
        event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
        let m_12: bitstring = smr_t2bitstring(smr_CPU) in
        new r_12: enc_seed_1;
        let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
        out(c9[i_3], m2_CPU);
        in(c16[i_3], m3_CPU: bitstring);
        let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
        let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
        let m_16: bitstring = rms_without_mac_t2bitstring(rms_without_mac_QE_to_CPU) in
        find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
        let resOfMac: bool = true in
        let m_13: bitstring = bool2bitstring(resOfMac) in
        new r_13: enc_seed_1;
        let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
        out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        let m_14: bitstring = rms_t2bitstring(rms_QE) in
        new r_14: enc_seed_1;
        let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
        out(c15[i_4], m1_QE);
        in(c18[i_4], m2_QE: bitstring);
        let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
        if resOfMac_QE then
        let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
        let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
        let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
        let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
        let m_15: bitstring = quote_t2bitstring(quote_QE) in
        new r3_3: enc_seed;
        let m3_QE: bitstring = enc_r(m_15, pk2, r3_3) in
        out(c19[i_4], m3_QE)
      ))


Applying move all binders
  - Move assignment to m_16
yields

Game 16 is
      in(start, ());
      new r1: skeyseed;
      let spk1: spkey = spkgen(r1) in
      let ssk1: sskey = sskgen(r1) in
      new r2: keyseed;
      let pk2: pkey = pkgen(r2) in
      let sk2: skey = skgen(r2) in
      new r3_2: keyseed;
      new sym_key: key;
      new hk: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec(m1_Ch, sk2) in
        let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
        if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
        let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
        let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
        let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
        let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
        event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
        if x1_Ch = pkgen2_1(r3_2) then
        (
          new r2_1: enc_seed;
          let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
          new session_key: key;
          out(c23[i], m2)
        )
        else
          new r3_1: enc_seed;
          new session_key: key;
          let m_8: bitstring = key2bitstring(session_key) in
          let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_1) in
          out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        out(ch2[iH], hash(hk, x1_1))
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pkgen2_1(r3_2), rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        new tdi_TDXM: tdi_t;
        out(c6[i_2], tdi_t2bitstring(tdi_TDXM));
        in(c6[i_2], ());
        let rtyp_TDXM: rtyp_t = get_rtyp in
        let tdih_TDXM: hashoutput = hash(hk, tdi_t2bitstring(tdi_TDXM)) in
        let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, tdih_TDXM, rdata_TDXM) in
        new r_10: enc_seed_1;
        let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
        out(c7[i_2], m2_TDXM);
        in(c10[i_2], m3_TDXM: bitstring);
        let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
        let res4_TDXM: res_t = get_res in
        let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
        let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
        new r_11: enc_seed_1;
        let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
        out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        new csvn_CPU: csvn_t;
        new res1_CPU: res_t;
        new res2_CPU: res_t;
        new tcbi_CPU: tcbi_t;
        let tcbh_CPU: hashoutput = hash(hk, tcbi_t2bitstring(tcbi_CPU)) in
        let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU) in
        let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
        let ma2: macres_t = mac'(x_2, mkey) in
        let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
        let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
        event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
        let m_12: bitstring = smr_t2bitstring(smr_CPU) in
        new r_12: enc_seed_1;
        let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
        out(c9[i_3], m2_CPU);
        in(c16[i_3], m3_CPU: bitstring);
        let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
        let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
        find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
        let resOfMac: bool = true in
        let m_13: bitstring = bool2bitstring(resOfMac) in
        new r_13: enc_seed_1;
        let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
        out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        let m_14: bitstring = rms_t2bitstring(rms_QE) in
        new r_14: enc_seed_1;
        let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
        out(c15[i_4], m1_QE);
        in(c18[i_4], m2_QE: bitstring);
        let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
        if resOfMac_QE then
        let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
        let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
        let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
        let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
        let m_15: bitstring = quote_t2bitstring(quote_QE) in
        new r3_3: enc_seed;
        let m3_QE: bitstring = enc_r(m_15, pk2, r3_3) in
        out(c19[i_4], m3_QE)
      ))


Applying equivalence rom(hash)
  - Equivalence rom(hash) with variables: hk -> hk_1
yields

Game 17 is
      in(start, ());
      new r1: skeyseed;
      let spk1: spkey = spkgen(r1) in
      let ssk1: sskey = sskgen(r1) in
      new r2: keyseed;
      let pk2: pkey = pkgen(r2) in
      let sk2: skey = skgen(r2) in
      new r3_2: keyseed;
      new sym_key: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec(m1_Ch, sk2) in
        let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
        if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
        let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
        let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
        let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
        let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
        event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
        if x1_Ch = pkgen2_1(r3_2) then
        (
          new r2_1: enc_seed;
          let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
          new session_key: key;
          out(c23[i], m2)
        )
        else
          new r3_1: enc_seed;
          new session_key: key;
          let m_8: bitstring = key2bitstring(session_key) in
          let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_1) in
          out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        out(ch2[iH], (let x_O: bitstring = x1_1 in find [unique] u_9 = ri_9 <= qH suchthat defined(x_O[ri_9], r_16[ri_9]) && (x_O = x_O[ri_9]) then r_16[u_9] orfind u_8 = ri_8 <= qTDXM suchthat defined(x_O_1[ri_8], r_17[ri_8]) && (x_O = x_O_1[ri_8]) then r_17[u_8] orfind u_7 = ri_7 <= qCPU suchthat defined(x_O_2[ri_7], r_18[ri_7]) && (x_O = x_O_2[ri_7]) then r_18[u_7] else new r_16: hashoutput; r_16))
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pkgen2_1(r3_2), rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        new tdi_TDXM: tdi_t;
        out(c6[i_2], tdi_t2bitstring(tdi_TDXM));
        in(c6[i_2], ());
        let rtyp_TDXM: rtyp_t = get_rtyp in
        let tdih_TDXM: hashoutput = (let x_O_1: bitstring = tdi_t2bitstring(tdi_TDXM) in find [unique] u_6 = ri_6 <= qH suchthat defined(x_O[ri_6], r_16[ri_6]) && (x_O_1 = x_O[ri_6]) then r_16[u_6] orfind u_5 = ri_5 <= qTDXM suchthat defined(x_O_1[ri_5], r_17[ri_5]) && (x_O_1 = x_O_1[ri_5]) then r_17[u_5] orfind u_4 = ri_4 <= qCPU suchthat defined(x_O_2[ri_4], r_18[ri_4]) && (x_O_1 = x_O_2[ri_4]) then r_18[u_4] else new r_17: hashoutput; r_17) in
        let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, tdih_TDXM, rdata_TDXM) in
        new r_10: enc_seed_1;
        let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
        out(c7[i_2], m2_TDXM);
        in(c10[i_2], m3_TDXM: bitstring);
        let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
        let res4_TDXM: res_t = get_res in
        let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
        let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
        new r_11: enc_seed_1;
        let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
        out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        new csvn_CPU: csvn_t;
        new res1_CPU: res_t;
        new res2_CPU: res_t;
        new tcbi_CPU: tcbi_t;
        let tcbh_CPU: hashoutput = (let x_O_2: bitstring = tcbi_t2bitstring(tcbi_CPU) in find [unique] u_3 = ri_3 <= qH suchthat defined(x_O[ri_3], r_16[ri_3]) && (x_O_2 = x_O[ri_3]) then r_16[u_3] orfind u_2 = ri_2 <= qTDXM suchthat defined(x_O_1[ri_2], r_17[ri_2]) && (x_O_2 = x_O_1[ri_2]) then r_17[u_2] orfind u_1 = ri_1 <= qCPU suchthat defined(x_O_2[ri_1], r_18[ri_1]) && (x_O_2 = x_O_2[ri_1]) then r_18[u_1] else new r_18: hashoutput; r_18) in
        let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU) in
        let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
        let ma2: macres_t = mac'(x_2, mkey) in
        let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
        let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
        event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
        let m_12: bitstring = smr_t2bitstring(smr_CPU) in
        new r_12: enc_seed_1;
        let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
        out(c9[i_3], m2_CPU);
        in(c16[i_3], m3_CPU: bitstring);
        let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
        let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
        find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
        let resOfMac: bool = true in
        let m_13: bitstring = bool2bitstring(resOfMac) in
        new r_13: enc_seed_1;
        let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
        out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        let m_14: bitstring = rms_t2bitstring(rms_QE) in
        new r_14: enc_seed_1;
        let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
        out(c15[i_4], m1_QE);
        in(c18[i_4], m2_QE: bitstring);
        let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
        if resOfMac_QE then
        let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
        let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
        let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
        let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
        let m_15: bitstring = quote_t2bitstring(quote_QE) in
        new r3_3: enc_seed;
        let m3_QE: bitstring = enc_r(m_15, pk2, r3_3) in
        out(c19[i_4], m3_QE)
      ))


Applying expand
  - Expand if/find/let
yields

Game 18 is
      in(start, ());
      new r1: skeyseed;
      let spk1: spkey = spkgen(r1) in
      let ssk1: sskey = sskgen(r1) in
      new r2: keyseed;
      let pk2: pkey = pkgen(r2) in
      let sk2: skey = skgen(r2) in
      new r3_2: keyseed;
      new sym_key: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec(m1_Ch, sk2) in
        let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
        if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
        let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
        let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
        let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
        let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
        event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
        if x1_Ch = pkgen2_1(r3_2) then
        (
          new r2_1: enc_seed;
          let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
          new session_key: key;
          out(c23[i], m2)
        )
        else
          new r3_1: enc_seed;
          new session_key: key;
          let m_8: bitstring = key2bitstring(session_key) in
          let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_1) in
          out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        let x_O: bitstring = x1_1 in
        find [unique] u_9 = ri_9 <= qH suchthat defined(x_O[ri_9], r_16[ri_9]) && (x_O = x_O[ri_9]) then
          out(ch2[iH], r_16[u_9])
        orfind u_8 = ri_8 <= qTDXM suchthat defined(x_O_1[ri_8], r_17[ri_8]) && (x_O = x_O_1[ri_8]) then
          out(ch2[iH], r_17[u_8])
        orfind u_7 = ri_7 <= qCPU suchthat defined(x_O_2[ri_7], r_18[ri_7]) && (x_O = x_O_2[ri_7]) then
          out(ch2[iH], r_18[u_7])
        else
          new r_16: hashoutput;
          out(ch2[iH], r_16)
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pkgen2_1(r3_2), rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        new tdi_TDXM: tdi_t;
        out(c6[i_2], tdi_t2bitstring(tdi_TDXM));
        in(c6[i_2], ());
        let rtyp_TDXM: rtyp_t = get_rtyp in
        let x_O_1: bitstring = tdi_t2bitstring(tdi_TDXM) in
        find [unique] u_6 = ri_6 <= qH suchthat defined(x_O[ri_6], r_16[ri_6]) && (x_O_1 = x_O[ri_6]) then
        (
          let tdih_TDXM: hashoutput = r_16[u_6] in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, tdih_TDXM, rdata_TDXM) in
          new r_10: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_11: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_5 = ri_5 <= qTDXM suchthat defined(x_O_1[ri_5], r_17[ri_5]) && (x_O_1 = x_O_1[ri_5]) then
        (
          let tdih_TDXM: hashoutput = r_17[u_5] in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, tdih_TDXM, rdata_TDXM) in
          new r_10: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_11: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_4 = ri_4 <= qCPU suchthat defined(x_O_2[ri_4], r_18[ri_4]) && (x_O_1 = x_O_2[ri_4]) then
        (
          let tdih_TDXM: hashoutput = r_18[u_4] in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, tdih_TDXM, rdata_TDXM) in
          new r_10: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_11: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
          out(c11[i_2], m4_TDXM)
        )
        else
          new r_17: hashoutput;
          let tdih_TDXM: hashoutput = r_17 in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, tdih_TDXM, rdata_TDXM) in
          new r_10: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_11: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
          out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        new csvn_CPU: csvn_t;
        new res1_CPU: res_t;
        new res2_CPU: res_t;
        new tcbi_CPU: tcbi_t;
        let x_O_2: bitstring = tcbi_t2bitstring(tcbi_CPU) in
        find [unique] u_3 = ri_3 <= qH suchthat defined(x_O[ri_3], r_16[ri_3]) && (x_O_2 = x_O[ri_3]) then
        (
          let tcbh_CPU: hashoutput = r_16[u_3] in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_12: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_13: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_2 = ri_2 <= qTDXM suchthat defined(x_O_1[ri_2], r_17[ri_2]) && (x_O_2 = x_O_1[ri_2]) then
        (
          let tcbh_CPU: hashoutput = r_17[u_2] in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_12: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_13: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_1 = ri_1 <= qCPU suchthat defined(x_O_2[ri_1], r_18[ri_1]) && (x_O_2 = x_O_2[ri_1]) then
        (
          let tcbh_CPU: hashoutput = r_18[u_1] in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_12: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_13: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
          out(c17[i_3], m4_CPU)
        )
        else
          new r_18: hashoutput;
          let tcbh_CPU: hashoutput = r_18 in
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, tcbh_CPU, tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_12: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_13: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
          out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        let m_14: bitstring = rms_t2bitstring(rms_QE) in
        new r_14: enc_seed_1;
        let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
        out(c15[i_4], m1_QE);
        in(c18[i_4], m2_QE: bitstring);
        let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
        if resOfMac_QE then
        let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
        let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
        let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
        let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
        let m_15: bitstring = quote_t2bitstring(quote_QE) in
        new r3_3: enc_seed;
        let m3_QE: bitstring = enc_r(m_15, pk2, r3_3) in
        out(c19[i_4], m3_QE)
      ))


Applying remove assignments of findcond
  - Remove assignments on tcbh_CPU (definition removed, all usages removed)
  - Remove assignments on tcbh_CPU (definition removed, all usages removed)
  - Remove assignments on tcbh_CPU (definition removed, all usages removed)
  - Remove assignments on tcbh_CPU (definition removed, all usages removed)
  - Remove assignments on tdih_TDXM (definition removed, all usages removed)
  - Remove assignments on tdih_TDXM (definition removed, all usages removed)
  - Remove assignments on tdih_TDXM (definition removed, all usages removed)
  - Remove assignments on tdih_TDXM (definition removed, all usages removed)
  - Remove assignments on x_O (definition point kept, all usages removed)
yields

Game 19 is
      in(start, ());
      new r1: skeyseed;
      let spk1: spkey = spkgen(r1) in
      let ssk1: sskey = sskgen(r1) in
      new r2: keyseed;
      let pk2: pkey = pkgen(r2) in
      let sk2: skey = skgen(r2) in
      new r3_2: keyseed;
      new sym_key: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec(m1_Ch, sk2) in
        let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
        if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
        let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
        let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
        let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
        let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
        event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
        if x1_Ch = pkgen2_1(r3_2) then
        (
          new r2_1: enc_seed;
          let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
          new session_key: key;
          out(c23[i], m2)
        )
        else
          new r3_1: enc_seed;
          new session_key: key;
          let m_8: bitstring = key2bitstring(session_key) in
          let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_1) in
          out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        let x_O: bitstring = cst_bitstring in
 {134}  find [unique] u_9 = ri_9 <= qH suchthat defined(x1_1[ri_9], x_O[ri_9], r_16[ri_9]) && (x1_1 = x1_1[ri_9]) then
          out(ch2[iH], r_16[u_9])
        orfind u_8 = ri_8 <= qTDXM suchthat defined(x_O_1[ri_8], r_17[ri_8]) && (x1_1 = x_O_1[ri_8]) then
          out(ch2[iH], r_17[u_8])
        orfind u_7 = ri_7 <= qCPU suchthat defined(x_O_2[ri_7], r_18[ri_7]) && (x1_1 = x_O_2[ri_7]) then
          out(ch2[iH], r_18[u_7])
        else
          new r_16: hashoutput;
          out(ch2[iH], r_16)
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pkgen2_1(r3_2), rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        new tdi_TDXM: tdi_t;
        out(c6[i_2], tdi_t2bitstring(tdi_TDXM));
        in(c6[i_2], ());
        let rtyp_TDXM: rtyp_t = get_rtyp in
        let x_O_1: bitstring = tdi_t2bitstring(tdi_TDXM) in
 {246}  find [unique] u_6 = ri_6 <= qH suchthat defined(x1_1[ri_6], x_O[ri_6], r_16[ri_6]) && (x_O_1 = x1_1[ri_6]) then
        (
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_16[u_6], rdata_TDXM) in
          new r_10: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_11: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_5 = ri_5 <= qTDXM suchthat defined(x_O_1[ri_5], r_17[ri_5]) && {319}(x_O_1 = x_O_1[ri_5]) then
        (
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17[u_5], rdata_TDXM) in
          new r_10: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_11: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_4 = ri_4 <= qCPU suchthat defined(x_O_2[ri_4], r_18[ri_4]) && (x_O_1 = x_O_2[ri_4]) then
        (
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_18[u_4], rdata_TDXM) in
          new r_10: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_11: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
          out(c11[i_2], m4_TDXM)
        )
        else
          new r_17: hashoutput;
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17, rdata_TDXM) in
          new r_10: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_11: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
          out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        new csvn_CPU: csvn_t;
        new res1_CPU: res_t;
        new res2_CPU: res_t;
        new tcbi_CPU: tcbi_t;
        let x_O_2: bitstring = tcbi_t2bitstring(tcbi_CPU) in
 {536}  find [unique] u_3 = ri_3 <= qH suchthat defined(x1_1[ri_3], x_O[ri_3], r_16[ri_3]) && (x_O_2 = x1_1[ri_3]) then
        (
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_16[u_3], tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_16[u_3], tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_12: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_13: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_2 = ri_2 <= qTDXM suchthat defined(x_O_1[ri_2], r_17[ri_2]) && (x_O_2 = x_O_1[ri_2]) then
        (
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_17[u_2], tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_17[u_2], tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_12: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_13: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_1 = ri_1 <= qCPU suchthat defined(x_O_2[ri_1], r_18[ri_1]) && {820}(x_O_2 = x_O_2[ri_1]) then
        (
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_18[u_1], tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_18[u_1], tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_12: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_13: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
          out(c17[i_3], m4_CPU)
        )
        else
          new r_18: hashoutput;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_18, tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_18, tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_12: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_13: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
          out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        let m_14: bitstring = rms_t2bitstring(rms_QE) in
        new r_14: enc_seed_1;
        let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
        out(c15[i_4], m1_QE);
        in(c18[i_4], m2_QE: bitstring);
        let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
        if resOfMac_QE then
        let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
        let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
        let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
        let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
        let m_15: bitstring = quote_t2bitstring(quote_QE) in
        new r3_3: enc_seed;
        let m3_QE: bitstring = enc_r(m_15, pk2, r3_3) in
        out(c19[i_4], m3_QE)
      ))


Applying simplify
  - Simplification pass
    - Replaced (x_O_2 = x_O_2[ri_1]) with (tcbi_CPU = tcbi_CPU[ri_1]) at 820
    - Replaced defined condition x_O_2[ri_1], r_18[ri_1] with r_18[ri_1], tcbi_CPU[ri_1] in find at 536
    - Replaced defined condition x1_1[ri_3], x_O[ri_3], r_16[ri_3] with r_16[ri_3], x1_1[ri_3] in find at 536
    - Replaced (x_O_1 = x_O_1[ri_5]) with (tdi_TDXM = tdi_TDXM[ri_5]) at 319
    - Replaced defined condition x_O_1[ri_5], r_17[ri_5] with r_17[ri_5], tdi_TDXM[ri_5] in find at 246
    - Replaced defined condition x1_1[ri_6], x_O[ri_6], r_16[ri_6] with r_16[ri_6], x1_1[ri_6] in find at 246
    - Replaced defined condition x1_1[ri_9], x_O[ri_9], r_16[ri_9] with r_16[ri_9], x1_1[ri_9] in find at 134
yields

Game 20 is
      in(start, ());
      new r1: skeyseed;
      let spk1: spkey = spkgen(r1) in
      let ssk1: sskey = sskgen(r1) in
      new r2: keyseed;
      let pk2: pkey = pkgen(r2) in
      let sk2: skey = skgen(r2) in
      new r3_2: keyseed;
      new sym_key: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec(m1_Ch, sk2) in
        let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
        if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
        let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
        let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
        let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
        let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
        event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
        if x1_Ch = pkgen2_1(r3_2) then
        (
          new r2_1: enc_seed;
          let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
          new session_key: key;
          out(c23[i], m2)
        )
        else
          new r3_1: enc_seed;
          new session_key: key;
          let m_8: bitstring = key2bitstring(session_key) in
          let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_1) in
          out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        let x_O: bitstring = cst_bitstring in
        find [unique] u_9 = ri_9 <= qH suchthat defined(r_16[ri_9], x1_1[ri_9]) && (x1_1 = x1_1[ri_9]) then
          out(ch2[iH], r_16[u_9])
        orfind u_8 = ri_8 <= qTDXM suchthat defined(x_O_1[ri_8], r_17[ri_8]) && (x1_1 = x_O_1[ri_8]) then
          out(ch2[iH], r_17[u_8])
        orfind u_7 = ri_7 <= qCPU suchthat defined(x_O_2[ri_7], r_18[ri_7]) && (x1_1 = x_O_2[ri_7]) then
          out(ch2[iH], r_18[u_7])
        else
          new r_16: hashoutput;
          out(ch2[iH], r_16)
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pkgen2_1(r3_2), rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        new tdi_TDXM: tdi_t;
        out(c6[i_2], tdi_t2bitstring(tdi_TDXM));
        in(c6[i_2], ());
        let rtyp_TDXM: rtyp_t = get_rtyp in
        let x_O_1: bitstring = tdi_t2bitstring(tdi_TDXM) in
        find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_O_1 = x1_1[ri_6]) then
        (
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_16[u_6], rdata_TDXM) in
          new r_10: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_11: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_5 = ri_5 <= qTDXM suchthat defined(r_17[ri_5], tdi_TDXM[ri_5]) && (tdi_TDXM = tdi_TDXM[ri_5]) then
        (
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17[u_5], rdata_TDXM) in
          new r_10: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_11: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_4 = ri_4 <= qCPU suchthat defined(x_O_2[ri_4], r_18[ri_4]) && (x_O_1 = x_O_2[ri_4]) then
        (
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_18[u_4], rdata_TDXM) in
          new r_10: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_11: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
          out(c11[i_2], m4_TDXM)
        )
        else
          new r_17: hashoutput;
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17, rdata_TDXM) in
          new r_10: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_11: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
          out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        new csvn_CPU: csvn_t;
        new res1_CPU: res_t;
        new res2_CPU: res_t;
        new tcbi_CPU: tcbi_t;
        let x_O_2: bitstring = tcbi_t2bitstring(tcbi_CPU) in
        find [unique] u_3 = ri_3 <= qH suchthat defined(r_16[ri_3], x1_1[ri_3]) && (x_O_2 = x1_1[ri_3]) then
        (
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_16[u_3], tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_16[u_3], tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_12: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_13: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_2 = ri_2 <= qTDXM suchthat defined(x_O_1[ri_2], r_17[ri_2]) && (x_O_2 = x_O_1[ri_2]) then
        (
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_17[u_2], tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_17[u_2], tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_12: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_13: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_1 = ri_1 <= qCPU suchthat defined(r_18[ri_1], tcbi_CPU[ri_1]) && (tcbi_CPU = tcbi_CPU[ri_1]) then
        (
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_18[u_1], tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_18[u_1], tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_12: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_13: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
          out(c17[i_3], m4_CPU)
        )
        else
          new r_18: hashoutput;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_18, tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_18, tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_12: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_13: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
          out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        let m_14: bitstring = rms_t2bitstring(rms_QE) in
        new r_14: enc_seed_1;
        let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
        out(c15[i_4], m1_QE);
        in(c18[i_4], m2_QE: bitstring);
        let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
        if resOfMac_QE then
        let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
        let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
        let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
        let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
        let m_15: bitstring = quote_t2bitstring(quote_QE) in
        new r3_3: enc_seed;
        let m3_QE: bitstring = enc_r(m_15, pk2, r3_3) in
        out(c19[i_4], m3_QE)
      ))


Applying move all binders
  - Move random number generation res2_CPU
  - Move random number generation res1_CPU
  - Move random number generation csvn_CPU
  - Move assignment to rtyp_TDXM
  - Move assignment to x_O
yields

Game 21 is
      in(start, ());
      new r1: skeyseed;
      let spk1: spkey = spkgen(r1) in
      let ssk1: sskey = sskgen(r1) in
      new r2: keyseed;
      let pk2: pkey = pkgen(r2) in
      let sk2: skey = skgen(r2) in
      new r3_2: keyseed;
      new sym_key: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec(m1_Ch, sk2) in
        let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
        if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
        let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
        let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
        let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
        let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
        event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
        if x1_Ch = pkgen2_1(r3_2) then
        (
          new r2_1: enc_seed;
          let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
          new session_key: key;
          out(c23[i], m2)
        )
        else
          new r3_1: enc_seed;
          new session_key: key;
          let m_8: bitstring = key2bitstring(session_key) in
          let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_1) in
          out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        find [unique] u_9 = ri_9 <= qH suchthat defined(r_16[ri_9], x1_1[ri_9]) && (x1_1 = x1_1[ri_9]) then
          out(ch2[iH], r_16[u_9])
        orfind u_8 = ri_8 <= qTDXM suchthat defined(x_O_1[ri_8], r_17[ri_8]) && (x1_1 = x_O_1[ri_8]) then
          out(ch2[iH], r_17[u_8])
        orfind u_7 = ri_7 <= qCPU suchthat defined(x_O_2[ri_7], r_18[ri_7]) && (x1_1 = x_O_2[ri_7]) then
          out(ch2[iH], r_18[u_7])
        else
          new r_16: hashoutput;
          out(ch2[iH], r_16)
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pkgen2_1(r3_2), rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        new tdi_TDXM: tdi_t;
        out(c6[i_2], tdi_t2bitstring(tdi_TDXM));
        in(c6[i_2], ());
        let x_O_1: bitstring = tdi_t2bitstring(tdi_TDXM) in
        find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_O_1 = x1_1[ri_6]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_16[u_6], rdata_TDXM) in
          new r_10: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_11: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_5 = ri_5 <= qTDXM suchthat defined(r_17[ri_5], tdi_TDXM[ri_5]) && (tdi_TDXM = tdi_TDXM[ri_5]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17[u_5], rdata_TDXM) in
          new r_10: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_11: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_4 = ri_4 <= qCPU suchthat defined(x_O_2[ri_4], r_18[ri_4]) && (x_O_1 = x_O_2[ri_4]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_18[u_4], rdata_TDXM) in
          new r_10: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_11: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
          out(c11[i_2], m4_TDXM)
        )
        else
          new r_17: hashoutput;
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17, rdata_TDXM) in
          new r_10: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_10) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_11: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_11) in
          out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        new tcbi_CPU: tcbi_t;
        let x_O_2: bitstring = tcbi_t2bitstring(tcbi_CPU) in
        find [unique] u_3 = ri_3 <= qH suchthat defined(r_16[ri_3], x1_1[ri_3]) && (x_O_2 = x1_1[ri_3]) then
        (
          new res2_CPU: res_t;
          new res1_CPU: res_t;
          new csvn_CPU: csvn_t;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_16[u_3], tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_16[u_3], tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_12: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_13: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_2 = ri_2 <= qTDXM suchthat defined(x_O_1[ri_2], r_17[ri_2]) && (x_O_2 = x_O_1[ri_2]) then
        (
          new res2_CPU: res_t;
          new res1_CPU: res_t;
          new csvn_CPU: csvn_t;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_17[u_2], tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_17[u_2], tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_12: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_13: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_1 = ri_1 <= qCPU suchthat defined(r_18[ri_1], tcbi_CPU[ri_1]) && (tcbi_CPU = tcbi_CPU[ri_1]) then
        (
          new res2_CPU: res_t;
          new res1_CPU: res_t;
          new csvn_CPU: csvn_t;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_18[u_1], tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_18[u_1], tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_12: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_13: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
          out(c17[i_3], m4_CPU)
        )
        else
          new r_18: hashoutput;
          new res2_CPU: res_t;
          new res1_CPU: res_t;
          new csvn_CPU: csvn_t;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU, csvn_CPU, r_18, tdih_CPU, rdata_CPU, res2_CPU) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU, csvn_CPU, r_18, tdih_CPU, rdata_CPU, res2_CPU, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_12: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_12) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_13: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_13) in
          out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        let m_14: bitstring = rms_t2bitstring(rms_QE) in
        new r_14: enc_seed_1;
        let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
        out(c15[i_4], m1_QE);
        in(c18[i_4], m2_QE: bitstring);
        let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
        if resOfMac_QE then
        let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
        let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
        let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
        let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
        let m_15: bitstring = quote_t2bitstring(quote_QE) in
        new r3_3: enc_seed;
        let m3_QE: bitstring = enc_r(m_15, pk2, r3_3) in
        out(c19[i_4], m3_QE)
      ))


Applying remove assignments of findcond
  - Rename variable res2_CPU into res2_CPU_4, res2_CPU_3, res2_CPU_2, res2_CPU_1
  - Rename variable res1_CPU into res1_CPU_4, res1_CPU_3, res1_CPU_2, res1_CPU_1
  - Rename variable csvn_CPU into csvn_CPU_4, csvn_CPU_3, csvn_CPU_2, csvn_CPU_1
  - Rename variable r_12 into r_25, r_23, r_21, r_19
  - Rename variable r_13 into r_26, r_24, r_22, r_20
  - Rename variable r_10 into r_33, r_31, r_29, r_27
  - Rename variable r_11 into r_34, r_32, r_30, r_28
yields

Game 22 is
      in(start, ());
      new r1: skeyseed;
      let spk1: spkey = spkgen(r1) in
      let ssk1: sskey = sskgen(r1) in
      new r2: keyseed;
      let pk2: pkey = pkgen(r2) in
      let sk2: skey = skgen(r2) in
      new r3_2: keyseed;
      new sym_key: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec(m1_Ch, sk2) in
        let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
        if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
        let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
        let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
        let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
        let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
        event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
        if x1_Ch = pkgen2_1(r3_2) then
        (
          new r2_1: enc_seed;
          let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
          new session_key: key;
          out(c23[i], m2)
        )
        else
          new r3_1: enc_seed;
          new session_key: key;
          let m_8: bitstring = key2bitstring(session_key) in
          let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_1) in
          out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        find [unique] u_9 = ri_9 <= qH suchthat defined(r_16[ri_9], x1_1[ri_9]) && (x1_1 = x1_1[ri_9]) then
          out(ch2[iH], r_16[u_9])
        orfind u_8 = ri_8 <= qTDXM suchthat defined(x_O_1[ri_8], r_17[ri_8]) && (x1_1 = x_O_1[ri_8]) then
          out(ch2[iH], r_17[u_8])
        orfind u_7 = ri_7 <= qCPU suchthat defined(x_O_2[ri_7], r_18[ri_7]) && (x1_1 = x_O_2[ri_7]) then
          out(ch2[iH], r_18[u_7])
        else
          new r_16: hashoutput;
          out(ch2[iH], r_16)
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pkgen2_1(r3_2), rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        new tdi_TDXM: tdi_t;
        out(c6[i_2], tdi_t2bitstring(tdi_TDXM));
        in(c6[i_2], ());
        let x_O_1: bitstring = tdi_t2bitstring(tdi_TDXM) in
        find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_O_1 = x1_1[ri_6]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_16[u_6], rdata_TDXM) in
          new r_29: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_29) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_30: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_30) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_5 = ri_5 <= qTDXM suchthat defined(r_17[ri_5], tdi_TDXM[ri_5]) && (tdi_TDXM = tdi_TDXM[ri_5]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17[u_5], rdata_TDXM) in
          new r_31: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_31) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_32: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_32) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_4 = ri_4 <= qCPU suchthat defined(x_O_2[ri_4], r_18[ri_4]) && (x_O_1 = x_O_2[ri_4]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_18[u_4], rdata_TDXM) in
          new r_33: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_33) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_34: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_34) in
          out(c11[i_2], m4_TDXM)
        )
        else
          new r_17: hashoutput;
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17, rdata_TDXM) in
          new r_27: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_27) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_28: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_28) in
          out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        new tcbi_CPU: tcbi_t;
        let x_O_2: bitstring = tcbi_t2bitstring(tcbi_CPU) in
        find [unique] u_3 = ri_3 <= qH suchthat defined(r_16[ri_3], x1_1[ri_3]) && (x_O_2 = x1_1[ri_3]) then
        (
          new res2_CPU_2: res_t;
          new res1_CPU_2: res_t;
          new csvn_CPU_2: csvn_t;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU_2, csvn_CPU_2, r_16[u_3], tdih_CPU, rdata_CPU, res2_CPU_2) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU_2, csvn_CPU_2, r_16[u_3], tdih_CPU, rdata_CPU, res2_CPU_2, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_21: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_21) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_22: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_22) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_2 = ri_2 <= qTDXM suchthat defined(x_O_1[ri_2], r_17[ri_2]) && (x_O_2 = x_O_1[ri_2]) then
        (
          new res2_CPU_3: res_t;
          new res1_CPU_3: res_t;
          new csvn_CPU_3: csvn_t;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU_3, csvn_CPU_3, r_17[u_2], tdih_CPU, rdata_CPU, res2_CPU_3) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU_3, csvn_CPU_3, r_17[u_2], tdih_CPU, rdata_CPU, res2_CPU_3, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_23: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_23) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_24: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_24) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_1 = ri_1 <= qCPU suchthat defined(r_18[ri_1], tcbi_CPU[ri_1]) && (tcbi_CPU = tcbi_CPU[ri_1]) then
        (
          new res2_CPU_4: res_t;
          new res1_CPU_4: res_t;
          new csvn_CPU_4: csvn_t;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU_4, csvn_CPU_4, r_18[u_1], tdih_CPU, rdata_CPU, res2_CPU_4) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU_4, csvn_CPU_4, r_18[u_1], tdih_CPU, rdata_CPU, res2_CPU_4, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_25: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_25) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_26: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_26) in
          out(c17[i_3], m4_CPU)
        )
        else
          new r_18: hashoutput;
          new res2_CPU_1: res_t;
          new res1_CPU_1: res_t;
          new csvn_CPU_1: csvn_t;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU_1, csvn_CPU_1, r_18, tdih_CPU, rdata_CPU, res2_CPU_1) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU_1, csvn_CPU_1, r_18, tdih_CPU, rdata_CPU, res2_CPU_1, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_19: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_19) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_20: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_20) in
          out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        let m_14: bitstring = rms_t2bitstring(rms_QE) in
        new r_14: enc_seed_1;
        let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
        out(c15[i_4], m1_QE);
        in(c18[i_4], m2_QE: bitstring);
        let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
        if resOfMac_QE then
        let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
        let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
        let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
        let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
        let m_15: bitstring = quote_t2bitstring(quote_QE) in
        new r3_3: enc_seed;
        let m3_QE: bitstring = enc_r(m_15, pk2, r3_3) in
        out(c19[i_4], m3_QE)
      ))


Applying remove assignments of binder pk2
  - Remove assignments on pk2 (definition removed, all usages removed)
yields

Game 23 is
      in(start, ());
      new r1: skeyseed;
      let spk1: spkey = spkgen(r1) in
      let ssk1: sskey = sskgen(r1) in
      new r2: keyseed;
      let sk2: skey = skgen(r2) in
      new r3_2: keyseed;
      new sym_key: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec(m1_Ch, sk2) in
        let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
        if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
        let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
        let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
        let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
        let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
        event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
        if x1_Ch = pkgen2_1(r3_2) then
        (
          new r2_1: enc_seed;
          let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
          new session_key: key;
          out(c23[i], m2)
        )
        else
          new r3_1: enc_seed;
          new session_key: key;
          let m_8: bitstring = key2bitstring(session_key) in
          let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_1) in
          out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        find [unique] u_9 = ri_9 <= qH suchthat defined(r_16[ri_9], x1_1[ri_9]) && (x1_1 = x1_1[ri_9]) then
          out(ch2[iH], r_16[u_9])
        orfind u_8 = ri_8 <= qTDXM suchthat defined(x_O_1[ri_8], r_17[ri_8]) && (x1_1 = x_O_1[ri_8]) then
          out(ch2[iH], r_17[u_8])
        orfind u_7 = ri_7 <= qCPU suchthat defined(x_O_2[ri_7], r_18[ri_7]) && (x1_1 = x_O_2[ri_7]) then
          out(ch2[iH], r_18[u_7])
        else
          new r_16: hashoutput;
          out(ch2[iH], r_16)
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pkgen2_1(r3_2), rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        new tdi_TDXM: tdi_t;
        out(c6[i_2], tdi_t2bitstring(tdi_TDXM));
        in(c6[i_2], ());
        let x_O_1: bitstring = tdi_t2bitstring(tdi_TDXM) in
        find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_O_1 = x1_1[ri_6]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_16[u_6], rdata_TDXM) in
          new r_29: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_29) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_30: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_30) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_5 = ri_5 <= qTDXM suchthat defined(r_17[ri_5], tdi_TDXM[ri_5]) && (tdi_TDXM = tdi_TDXM[ri_5]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17[u_5], rdata_TDXM) in
          new r_31: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_31) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_32: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_32) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_4 = ri_4 <= qCPU suchthat defined(x_O_2[ri_4], r_18[ri_4]) && (x_O_1 = x_O_2[ri_4]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_18[u_4], rdata_TDXM) in
          new r_33: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_33) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_34: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_34) in
          out(c11[i_2], m4_TDXM)
        )
        else
          new r_17: hashoutput;
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17, rdata_TDXM) in
          new r_27: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_27) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_28: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_28) in
          out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        new tcbi_CPU: tcbi_t;
        let x_O_2: bitstring = tcbi_t2bitstring(tcbi_CPU) in
        find [unique] u_3 = ri_3 <= qH suchthat defined(r_16[ri_3], x1_1[ri_3]) && (x_O_2 = x1_1[ri_3]) then
        (
          new res2_CPU_2: res_t;
          new res1_CPU_2: res_t;
          new csvn_CPU_2: csvn_t;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU_2, csvn_CPU_2, r_16[u_3], tdih_CPU, rdata_CPU, res2_CPU_2) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU_2, csvn_CPU_2, r_16[u_3], tdih_CPU, rdata_CPU, res2_CPU_2, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_21: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_21) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_22: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_22) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_2 = ri_2 <= qTDXM suchthat defined(x_O_1[ri_2], r_17[ri_2]) && (x_O_2 = x_O_1[ri_2]) then
        (
          new res2_CPU_3: res_t;
          new res1_CPU_3: res_t;
          new csvn_CPU_3: csvn_t;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU_3, csvn_CPU_3, r_17[u_2], tdih_CPU, rdata_CPU, res2_CPU_3) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU_3, csvn_CPU_3, r_17[u_2], tdih_CPU, rdata_CPU, res2_CPU_3, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_23: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_23) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_24: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_24) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_1 = ri_1 <= qCPU suchthat defined(r_18[ri_1], tcbi_CPU[ri_1]) && (tcbi_CPU = tcbi_CPU[ri_1]) then
        (
          new res2_CPU_4: res_t;
          new res1_CPU_4: res_t;
          new csvn_CPU_4: csvn_t;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU_4, csvn_CPU_4, r_18[u_1], tdih_CPU, rdata_CPU, res2_CPU_4) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU_4, csvn_CPU_4, r_18[u_1], tdih_CPU, rdata_CPU, res2_CPU_4, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_25: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_25) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_26: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_26) in
          out(c17[i_3], m4_CPU)
        )
        else
          new r_18: hashoutput;
          new res2_CPU_1: res_t;
          new res1_CPU_1: res_t;
          new csvn_CPU_1: csvn_t;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU_1, csvn_CPU_1, r_18, tdih_CPU, rdata_CPU, res2_CPU_1) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU_1, csvn_CPU_1, r_18, tdih_CPU, rdata_CPU, res2_CPU_1, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_19: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_19) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_20: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_20) in
          out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        let m_14: bitstring = rms_t2bitstring(rms_QE) in
        new r_14: enc_seed_1;
        let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
        out(c15[i_4], m1_QE);
        in(c18[i_4], m2_QE: bitstring);
        let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
        if resOfMac_QE then
        let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
        let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
        let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
        let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
        let m_15: bitstring = quote_t2bitstring(quote_QE) in
        new r3_3: enc_seed;
        let m3_QE: bitstring = enc_r(m_15, pkgen(r2), r3_3) in
        out(c19[i_4], m3_QE)
      ))


Applying remove assignments of binder sk2
  - Remove assignments on sk2 (definition removed, all usages removed)
yields

Game 24 is
      in(start, ());
      new r1: skeyseed;
      let spk1: spkey = spkgen(r1) in
      let ssk1: sskey = sskgen(r1) in
      new r2: keyseed;
      new r3_2: keyseed;
      new sym_key: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec(m1_Ch, skgen(r2)) in
        let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
        if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
        let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
        let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
        let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
        let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
        event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
        if x1_Ch = pkgen2_1(r3_2) then
        (
          new r2_1: enc_seed;
          let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
          new session_key: key;
          out(c23[i], m2)
        )
        else
          new r3_1: enc_seed;
          new session_key: key;
          let m_8: bitstring = key2bitstring(session_key) in
          let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_1) in
          out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        find [unique] u_9 = ri_9 <= qH suchthat defined(r_16[ri_9], x1_1[ri_9]) && (x1_1 = x1_1[ri_9]) then
          out(ch2[iH], r_16[u_9])
        orfind u_8 = ri_8 <= qTDXM suchthat defined(x_O_1[ri_8], r_17[ri_8]) && (x1_1 = x_O_1[ri_8]) then
          out(ch2[iH], r_17[u_8])
        orfind u_7 = ri_7 <= qCPU suchthat defined(x_O_2[ri_7], r_18[ri_7]) && (x1_1 = x_O_2[ri_7]) then
          out(ch2[iH], r_18[u_7])
        else
          new r_16: hashoutput;
          out(ch2[iH], r_16)
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pkgen2_1(r3_2), rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        new tdi_TDXM: tdi_t;
        out(c6[i_2], tdi_t2bitstring(tdi_TDXM));
        in(c6[i_2], ());
        let x_O_1: bitstring = tdi_t2bitstring(tdi_TDXM) in
        find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_O_1 = x1_1[ri_6]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_16[u_6], rdata_TDXM) in
          new r_29: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_29) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_30: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_30) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_5 = ri_5 <= qTDXM suchthat defined(r_17[ri_5], tdi_TDXM[ri_5]) && (tdi_TDXM = tdi_TDXM[ri_5]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17[u_5], rdata_TDXM) in
          new r_31: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_31) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_32: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_32) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_4 = ri_4 <= qCPU suchthat defined(x_O_2[ri_4], r_18[ri_4]) && (x_O_1 = x_O_2[ri_4]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_18[u_4], rdata_TDXM) in
          new r_33: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_33) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_34: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_34) in
          out(c11[i_2], m4_TDXM)
        )
        else
          new r_17: hashoutput;
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17, rdata_TDXM) in
          new r_27: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_27) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_28: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_28) in
          out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        new tcbi_CPU: tcbi_t;
        let x_O_2: bitstring = tcbi_t2bitstring(tcbi_CPU) in
        find [unique] u_3 = ri_3 <= qH suchthat defined(r_16[ri_3], x1_1[ri_3]) && (x_O_2 = x1_1[ri_3]) then
        (
          new res2_CPU_2: res_t;
          new res1_CPU_2: res_t;
          new csvn_CPU_2: csvn_t;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU_2, csvn_CPU_2, r_16[u_3], tdih_CPU, rdata_CPU, res2_CPU_2) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU_2, csvn_CPU_2, r_16[u_3], tdih_CPU, rdata_CPU, res2_CPU_2, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_21: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_21) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_22: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_22) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_2 = ri_2 <= qTDXM suchthat defined(x_O_1[ri_2], r_17[ri_2]) && (x_O_2 = x_O_1[ri_2]) then
        (
          new res2_CPU_3: res_t;
          new res1_CPU_3: res_t;
          new csvn_CPU_3: csvn_t;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU_3, csvn_CPU_3, r_17[u_2], tdih_CPU, rdata_CPU, res2_CPU_3) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU_3, csvn_CPU_3, r_17[u_2], tdih_CPU, rdata_CPU, res2_CPU_3, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_23: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_23) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_24: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_24) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_1 = ri_1 <= qCPU suchthat defined(r_18[ri_1], tcbi_CPU[ri_1]) && (tcbi_CPU = tcbi_CPU[ri_1]) then
        (
          new res2_CPU_4: res_t;
          new res1_CPU_4: res_t;
          new csvn_CPU_4: csvn_t;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU_4, csvn_CPU_4, r_18[u_1], tdih_CPU, rdata_CPU, res2_CPU_4) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU_4, csvn_CPU_4, r_18[u_1], tdih_CPU, rdata_CPU, res2_CPU_4, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_25: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_25) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_26: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_26) in
          out(c17[i_3], m4_CPU)
        )
        else
          new r_18: hashoutput;
          new res2_CPU_1: res_t;
          new res1_CPU_1: res_t;
          new csvn_CPU_1: csvn_t;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU_1, csvn_CPU_1, r_18, tdih_CPU, rdata_CPU, res2_CPU_1) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU_1, csvn_CPU_1, r_18, tdih_CPU, rdata_CPU, res2_CPU_1, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_19: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_19) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_20: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_20) in
          out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        let m_14: bitstring = rms_t2bitstring(rms_QE) in
        new r_14: enc_seed_1;
        let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
        out(c15[i_4], m1_QE);
        in(c18[i_4], m2_QE: bitstring);
        let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
        if resOfMac_QE then
        let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
        let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
        let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
        let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
        let m_15: bitstring = quote_t2bitstring(quote_QE) in
        new r3_3: enc_seed;
        let m3_QE: bitstring = enc_r(m_15, pkgen(r2), r3_3) in
        out(c19[i_4], m3_QE)
      ))


Applying equivalence ind_cca2(enc) with r3_3, r3_1, r2 [probability (qQE + qChallenger) * Penc(time(context for game 24) + time + (-1 + qChallenger + qQE) * time(enc_r, max(maxlength(game 24: m_8), maxlength(game 24: m_15))), qChallenger)]
  - Equivalence ind_cca2(enc) with variables: r3_3 -> r1_1, r3_1 -> r2_1, r2 -> r
yields

Game 25 is
      in(start, ());
      new r1: skeyseed;
      let spk1: spkey = spkgen(r1) in
      let ssk1: sskey = sskgen(r1) in
      new r2_3: keyseed;
      new r3_2: keyseed;
      new sym_key: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
  {28}  let injbot(quote_t2bitstring(quote_Ch: quote_t)) = (let m_17: bitstring = m1_Ch in {32}find u_11 = ri_11 <= qChallenger suchthat defined(m2_2[ri_11], y_2[ri_11], x_3[ri_11]) && (y_2[ri_11] = pkgen2_1(r2_3)) && (m_17 = m2_2[ri_11]) then injbot(x_3[u_11]) orfind u_10 = ri_10 <= qQE suchthat defined(m1[ri_10], x1[ri_10]) && (m_17 = m1[ri_10]) then injbot(x1[u_10]) else dec2(m_17, skgen2_1(r2_3))) in
  {67}  let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
  {70}  if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
  {78}  let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
  {81}  let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
  {84}  let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
        let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
        event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
        if x1_Ch = pkgen2_1(r3_2) then
        (
          new r2_1: enc_seed;
          let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
          new session_key: key;
          out(c23[i], m2)
        )
        else
          new r3_4: enc_seed;
          new r2_4: enc_seed;
          new session_key: key;
          let m_8: bitstring = key2bitstring(session_key) in
          let m2_Ch: bitstring = (let x_3: bitstring = m_8 in (let y_2: pkey = x1_Ch in {143}if defined(r2_3) && (y_2 = pkgen2_1(r2_3)) then (let m2_2: bitstring = enc_r2(Z(x_3), y_2, r2_4) in m2_2) else enc_r(x_3, y_2, r3_4))) in
          out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        find [unique] u_9 = ri_9 <= qH suchthat defined(r_16[ri_9], x1_1[ri_9]) && (x1_1 = x1_1[ri_9]) then
          out(ch2[iH], r_16[u_9])
        orfind u_8 = ri_8 <= qTDXM suchthat defined(x_O_1[ri_8], r_17[ri_8]) && (x1_1 = x_O_1[ri_8]) then
          out(ch2[iH], r_17[u_8])
        orfind u_7 = ri_7 <= qCPU suchthat defined(x_O_2[ri_7], r_18[ri_7]) && (x1_1 = x_O_2[ri_7]) then
          out(ch2[iH], r_18[u_7])
        else
          new r_16: hashoutput;
          out(ch2[iH], r_16)
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pkgen2_1(r3_2), rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        new tdi_TDXM: tdi_t;
        out(c6[i_2], tdi_t2bitstring(tdi_TDXM));
        in(c6[i_2], ());
        let x_O_1: bitstring = tdi_t2bitstring(tdi_TDXM) in
        find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_O_1 = x1_1[ri_6]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_16[u_6], rdata_TDXM) in
          new r_29: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_29) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_30: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_30) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_5 = ri_5 <= qTDXM suchthat defined(r_17[ri_5], tdi_TDXM[ri_5]) && (tdi_TDXM = tdi_TDXM[ri_5]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17[u_5], rdata_TDXM) in
          new r_31: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_31) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_32: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_32) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_4 = ri_4 <= qCPU suchthat defined(x_O_2[ri_4], r_18[ri_4]) && (x_O_1 = x_O_2[ri_4]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_18[u_4], rdata_TDXM) in
          new r_33: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_33) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_34: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_34) in
          out(c11[i_2], m4_TDXM)
        )
        else
          new r_17: hashoutput;
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17, rdata_TDXM) in
          new r_27: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_27) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_28: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_28) in
          out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        new tcbi_CPU: tcbi_t;
        let x_O_2: bitstring = tcbi_t2bitstring(tcbi_CPU) in
        find [unique] u_3 = ri_3 <= qH suchthat defined(r_16[ri_3], x1_1[ri_3]) && (x_O_2 = x1_1[ri_3]) then
        (
          new res2_CPU_2: res_t;
          new res1_CPU_2: res_t;
          new csvn_CPU_2: csvn_t;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU_2, csvn_CPU_2, r_16[u_3], tdih_CPU, rdata_CPU, res2_CPU_2) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU_2, csvn_CPU_2, r_16[u_3], tdih_CPU, rdata_CPU, res2_CPU_2, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_21: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_21) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_22: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_22) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_2 = ri_2 <= qTDXM suchthat defined(x_O_1[ri_2], r_17[ri_2]) && (x_O_2 = x_O_1[ri_2]) then
        (
          new res2_CPU_3: res_t;
          new res1_CPU_3: res_t;
          new csvn_CPU_3: csvn_t;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU_3, csvn_CPU_3, r_17[u_2], tdih_CPU, rdata_CPU, res2_CPU_3) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU_3, csvn_CPU_3, r_17[u_2], tdih_CPU, rdata_CPU, res2_CPU_3, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_23: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_23) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_24: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_24) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_1 = ri_1 <= qCPU suchthat defined(r_18[ri_1], tcbi_CPU[ri_1]) && (tcbi_CPU = tcbi_CPU[ri_1]) then
        (
          new res2_CPU_4: res_t;
          new res1_CPU_4: res_t;
          new csvn_CPU_4: csvn_t;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU_4, csvn_CPU_4, r_18[u_1], tdih_CPU, rdata_CPU, res2_CPU_4) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU_4, csvn_CPU_4, r_18[u_1], tdih_CPU, rdata_CPU, res2_CPU_4, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_25: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_25) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_26: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_26) in
          out(c17[i_3], m4_CPU)
        )
        else
          new r_18: hashoutput;
          new res2_CPU_1: res_t;
          new res1_CPU_1: res_t;
          new csvn_CPU_1: csvn_t;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU_1, csvn_CPU_1, r_18, tdih_CPU, rdata_CPU, res2_CPU_1) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU_1, csvn_CPU_1, r_18, tdih_CPU, rdata_CPU, res2_CPU_1, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_19: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_19) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_20: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_20) in
          out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        let m_14: bitstring = rms_t2bitstring(rms_QE) in
        new r_14: enc_seed_1;
        let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
        out(c15[i_4], m1_QE);
        in(c18[i_4], m2_QE: bitstring);
        let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
        if resOfMac_QE then
        let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
        let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
        let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
        let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
        let m_15: bitstring = quote_t2bitstring(quote_QE) in
        new r3_5: enc_seed;
        let m3_QE: bitstring = (let x1: bitstring = m_15 in (let m1: bitstring = enc_r2(Z(x1), pkgen2_1(r2_3), r3_5) in m1)) in
        out(c19[i_4], m3_QE)
      ))


Applying expand
  - Expand if/find/let
    - Transformed find at 143 into a test
    - Simplify pattern quote_t2bitstring(quote_Ch: quote_t) (tuple expanded), pattern injbot(quote_t2bitstring(quote_Ch: quote_t)) (tuple expanded) at 28
    - Simplify pattern quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) (tuple expanded) at 67
    - Test at 70 always true
    - Simplify pattern tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) (tuple expanded) at 78
    - Simplify pattern smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) (tuple expanded) at 81
    - Simplify pattern rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) (tuple expanded) at 84
    - Transformed find at 143 into a test
    - Replaced defined condition m1[ri_10], x1[ri_10] with rtyp_QE[ri_10], res1_QE[ri_10], csvn_QE[ri_10], tcbh_QE[ri_10], tdih_QE[ri_10], rdata_QE[ri_10], res2_QE[ri_10], rms_without_mac_QE[ri_10], tcbi_QE[ri_10], smr_without_mac_QE[ri_10], res4_QE[ri_10], tdi_QE[ri_10], tdr_without_mac_QE[ri_10], sig_QE[ri_10], quote_QE[ri_10], m1[ri_10] in find at 32
    - Simplify pattern injbot(quote_t2bitstring(quote_Ch: quote_t)) (tuple expanded) at 28
    - Transformed find at 143 into a test
yields

Game 26 is
      in(start, ());
      new r1: skeyseed;
      let spk1: spkey = spkgen(r1) in
      let ssk1: sskey = sskgen(r1) in
      new r2_3: keyseed;
      new r3_2: keyseed;
      new sym_key: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        let m_17: bitstring = m1_Ch in
        find u_11 = ri_11 <= qChallenger suchthat defined(m2_2[ri_11], y_2[ri_11], x_3[ri_11]) && (y_2[ri_11] = pkgen2_1(r2_3)) && (m_17 = m2_2[ri_11]) then
        (
          let quote_t2bitstring(quote_Ch: quote_t) = x_3[u_11] in
          let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
          if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
          let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
          let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
          let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
          event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_1: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            new r3_4: enc_seed;
            new r2_4: enc_seed;
            new session_key: key;
            let m_8: bitstring = key2bitstring(session_key) in
            let x_3: bitstring = m_8 in
            let y_2: pkey = x1_Ch in
            if y_2 = pkgen2_1(r2_3) then
            (
              let m2_2: bitstring = enc_r2(Z(x_3), y_2, r2_4) in
              let m2_Ch: bitstring = m2_2 in
              out(c23[i], m2_Ch)
            )
            else
              let m2_Ch: bitstring = enc_r(x_3, y_2, r3_4) in
              out(c23[i], m2_Ch)
        )
        orfind u_10 = ri_10 <= qQE suchthat defined(rtyp_QE[ri_10], res1_QE[ri_10], csvn_QE[ri_10], tcbh_QE[ri_10], tdih_QE[ri_10], rdata_QE[ri_10], res2_QE[ri_10], rms_without_mac_QE[ri_10], tcbi_QE[ri_10], smr_without_mac_QE[ri_10], res4_QE[ri_10], tdi_QE[ri_10], tdr_without_mac_QE[ri_10], sig_QE[ri_10], quote_QE[ri_10], m1[ri_10]) && (m_17 = m1[ri_10]) then
        (
          let quote_Ch: quote_t = quote_QE[u_10] in
          let sig_Ch: signature = sig_QE[u_10] in
          let tdr_without_mac_Ch: tdr_without_mac_t = tdr_without_mac_QE[u_10] in
          let tdi_Ch: tdi_t = tdi_QE[u_10] in
          let res4_Ch: res_t = res4_QE[u_10] in
          let smr_without_mac_Ch: smr_without_mac_t = smr_without_mac_QE[u_10] in
          let tcbi_Ch: tcbi_t = tcbi_QE[u_10] in
          let rms_without_mac_Ch: rms_without_mac_t = rms_without_mac_QE[u_10] in
          let res2_Ch: res_t = res2_QE[u_10] in
          let rdata_Ch: rdata_t = rdata_QE[u_10] in
          let tdih_Ch: hashoutput = tdih_QE[u_10] in
          let tcbh_Ch: hashoutput = tcbh_QE[u_10] in
          let csvn_Ch: csvn_t = csvn_QE[u_10] in
          let res1_Ch: res_t = res1_QE[u_10] in
          let rtyp_Ch: rtyp_t = rtyp_QE[u_10] in
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
          event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_1: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            new r3_4: enc_seed;
            new r2_4: enc_seed;
            new session_key: key;
            let m_8: bitstring = key2bitstring(session_key) in
            let x_3: bitstring = m_8 in
            let y_2: pkey = x1_Ch in
            if y_2 = pkgen2_1(r2_3) then
            (
              let m2_2: bitstring = enc_r2(Z(x_3), y_2, r2_4) in
              let m2_Ch: bitstring = m2_2 in
              out(c23[i], m2_Ch)
            )
            else
              let m2_Ch: bitstring = enc_r(x_3, y_2, r3_4) in
              out(c23[i], m2_Ch)
        )
        else
          let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec2(m_17, skgen2_1(r2_3)) in
          let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
          if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
          let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
          let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
          let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
          event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_1: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            new r3_4: enc_seed;
            new r2_4: enc_seed;
            new session_key: key;
            let m_8: bitstring = key2bitstring(session_key) in
            let x_3: bitstring = m_8 in
            let y_2: pkey = x1_Ch in
            if y_2 = pkgen2_1(r2_3) then
            (
              let m2_2: bitstring = enc_r2(Z(x_3), y_2, r2_4) in
              let m2_Ch: bitstring = m2_2 in
              out(c23[i], m2_Ch)
            )
            else
              let m2_Ch: bitstring = enc_r(x_3, y_2, r3_4) in
              out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        find [unique] u_9 = ri_9 <= qH suchthat defined(r_16[ri_9], x1_1[ri_9]) && (x1_1 = x1_1[ri_9]) then
          out(ch2[iH], r_16[u_9])
        orfind u_8 = ri_8 <= qTDXM suchthat defined(x_O_1[ri_8], r_17[ri_8]) && (x1_1 = x_O_1[ri_8]) then
          out(ch2[iH], r_17[u_8])
        orfind u_7 = ri_7 <= qCPU suchthat defined(x_O_2[ri_7], r_18[ri_7]) && (x1_1 = x_O_2[ri_7]) then
          out(ch2[iH], r_18[u_7])
        else
          new r_16: hashoutput;
          out(ch2[iH], r_16)
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pkgen2_1(r3_2), rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        new tdi_TDXM: tdi_t;
        out(c6[i_2], tdi_t2bitstring(tdi_TDXM));
        in(c6[i_2], ());
        let x_O_1: bitstring = tdi_t2bitstring(tdi_TDXM) in
        find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_O_1 = x1_1[ri_6]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_16[u_6], rdata_TDXM) in
          new r_29: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_29) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_30: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_30) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_5 = ri_5 <= qTDXM suchthat defined(r_17[ri_5], tdi_TDXM[ri_5]) && (tdi_TDXM = tdi_TDXM[ri_5]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17[u_5], rdata_TDXM) in
          new r_31: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_31) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_32: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_32) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_4 = ri_4 <= qCPU suchthat defined(x_O_2[ri_4], r_18[ri_4]) && (x_O_1 = x_O_2[ri_4]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_18[u_4], rdata_TDXM) in
          new r_33: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_33) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_34: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_34) in
          out(c11[i_2], m4_TDXM)
        )
        else
          new r_17: hashoutput;
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17, rdata_TDXM) in
          new r_27: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_27) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_28: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_28) in
          out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        new tcbi_CPU: tcbi_t;
        let x_O_2: bitstring = tcbi_t2bitstring(tcbi_CPU) in
        find [unique] u_3 = ri_3 <= qH suchthat defined(r_16[ri_3], x1_1[ri_3]) && (x_O_2 = x1_1[ri_3]) then
        (
          new res2_CPU_2: res_t;
          new res1_CPU_2: res_t;
          new csvn_CPU_2: csvn_t;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU_2, csvn_CPU_2, r_16[u_3], tdih_CPU, rdata_CPU, res2_CPU_2) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU_2, csvn_CPU_2, r_16[u_3], tdih_CPU, rdata_CPU, res2_CPU_2, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_21: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_21) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_22: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_22) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_2 = ri_2 <= qTDXM suchthat defined(x_O_1[ri_2], r_17[ri_2]) && (x_O_2 = x_O_1[ri_2]) then
        (
          new res2_CPU_3: res_t;
          new res1_CPU_3: res_t;
          new csvn_CPU_3: csvn_t;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU_3, csvn_CPU_3, r_17[u_2], tdih_CPU, rdata_CPU, res2_CPU_3) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU_3, csvn_CPU_3, r_17[u_2], tdih_CPU, rdata_CPU, res2_CPU_3, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_23: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_23) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_24: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_24) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_1 = ri_1 <= qCPU suchthat defined(r_18[ri_1], tcbi_CPU[ri_1]) && (tcbi_CPU = tcbi_CPU[ri_1]) then
        (
          new res2_CPU_4: res_t;
          new res1_CPU_4: res_t;
          new csvn_CPU_4: csvn_t;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU_4, csvn_CPU_4, r_18[u_1], tdih_CPU, rdata_CPU, res2_CPU_4) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU_4, csvn_CPU_4, r_18[u_1], tdih_CPU, rdata_CPU, res2_CPU_4, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_25: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_25) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_26: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_26) in
          out(c17[i_3], m4_CPU)
        )
        else
          new r_18: hashoutput;
          new res2_CPU_1: res_t;
          new res1_CPU_1: res_t;
          new csvn_CPU_1: csvn_t;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU_1, csvn_CPU_1, r_18, tdih_CPU, rdata_CPU, res2_CPU_1) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU_1, csvn_CPU_1, r_18, tdih_CPU, rdata_CPU, res2_CPU_1, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_19: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_19) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_20: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_20) in
          out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        let m_14: bitstring = rms_t2bitstring(rms_QE) in
        new r_14: enc_seed_1;
        let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
        out(c15[i_4], m1_QE);
        in(c18[i_4], m2_QE: bitstring);
        let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
        if resOfMac_QE then
        let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
        let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
        let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
        let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
        let m_15: bitstring = quote_t2bitstring(quote_QE) in
        new r3_5: enc_seed;
        let x1: bitstring = m_15 in
        let m1: bitstring = enc_r2(Z(x1), pkgen2_1(r2_3), r3_5) in
        let m3_QE: bitstring = m1 in
        out(c19[i_4], m3_QE)
      ))


Applying remove assignments of findcond
  - Remove assignments on x1 (definition removed, all usages removed)
  - Remove assignments on m3_QE (definition removed, all usages removed)
  - Remove assignments on m_17 (definition removed, all usages removed)
  - Remove assignments on m2_Ch (definition removed, all usages removed)
  - Remove assignments on y_2 (definition kept, array references kept)
  - Remove assignments on x_3 (definition kept, array references kept)
  - Remove assignments on m2_Ch (definition removed, all usages removed)
  - Remove assignments on y_2 (definition kept, array references kept)
  - Remove assignments on x_3 (definition kept, array references kept)
  - Remove assignments on quote_Ch (definition removed, all usages removed)
  - Remove assignments on sig_Ch (definition removed, all usages removed)
  - Remove assignments on tdr_without_mac_Ch (definition removed, all usages removed)
  - Remove assignments on tdi_Ch (definition removed, all usages removed)
  - Remove assignments on res4_Ch (definition removed, all usages removed)
  - Remove assignments on smr_without_mac_Ch (definition removed, all usages removed)
  - Remove assignments on tcbi_Ch (definition removed, all usages removed)
  - Remove assignments on rms_without_mac_Ch (definition removed, all usages removed)
  - Remove assignments on res2_Ch (definition removed, all usages removed)
  - Remove assignments on rdata_Ch (definition removed, all usages removed)
  - Remove assignments on tdih_Ch (definition removed, all usages removed)
  - Remove assignments on tcbh_Ch (definition removed, all usages removed)
  - Remove assignments on csvn_Ch (definition removed, all usages removed)
  - Remove assignments on res1_Ch (definition removed, all usages removed)
  - Remove assignments on rtyp_Ch (definition removed, all usages removed)
  - Remove assignments on m2_Ch (definition removed, all usages removed)
  - Remove assignments on y_2 (definition kept, array references kept)
  - Remove assignments on x_3 (definition kept, array references kept)
yields

Game 27 is
      in(start, ());
      new r1: skeyseed;
      let spk1: spkey = spkgen(r1) in
      let ssk1: sskey = sskgen(r1) in
      new r2_3: keyseed;
      new r3_2: keyseed;
      new sym_key: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
  {28}  find u_11 = ri_11 <= qChallenger suchthat defined(m2_2[ri_11], y_2[ri_11], x_3[ri_11]) && {32}((y_2[ri_11] = pkgen2_1(r2_3)) && (m1_Ch = m2_2[ri_11])) then
        (
          let quote_t2bitstring(quote_Ch: quote_t) = {44}x_3[u_11] in
          let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
          if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
          let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
          let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
          let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
          event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_1: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            new r3_4: enc_seed;
            new r2_4: enc_seed;
            new session_key: key;
            let m_8: bitstring = key2bitstring(session_key) in
            let x_3: bitstring = m_8 in
            let y_2: pkey = x1_Ch in
            if x1_Ch = pkgen2_1(r2_3) then
            (
              let m2_2: bitstring = {129}enc_r2(Z(m_8), x1_Ch, r2_4) in
              out(c23[i], m2_2)
            )
            else
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_4) in
              out(c23[i], m2_Ch)
        )
        orfind u_10 = ri_10 <= qQE suchthat defined(rtyp_QE[ri_10], res1_QE[ri_10], csvn_QE[ri_10], tcbh_QE[ri_10], tdih_QE[ri_10], rdata_QE[ri_10], res2_QE[ri_10], rms_without_mac_QE[ri_10], tcbi_QE[ri_10], smr_without_mac_QE[ri_10], res4_QE[ri_10], tdi_QE[ri_10], tdr_without_mac_QE[ri_10], sig_QE[ri_10], quote_QE[ri_10], m1[ri_10]) && (m1_Ch = m1[ri_10]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_10] in
          event QuoteVerified(rtyp_QE[u_10], res1_QE[u_10], csvn_QE[u_10], tcbh_QE[u_10], tdih_QE[u_10], rdata_QE[u_10], res2_QE[u_10]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_1: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            new r3_4: enc_seed;
            new r2_4: enc_seed;
            new session_key: key;
            let m_8: bitstring = key2bitstring(session_key) in
            let x_3: bitstring = m_8 in
            let y_2: pkey = x1_Ch in
            if x1_Ch = pkgen2_1(r2_3) then
            (
              let m2_2: bitstring = {258}enc_r2(Z(m_8), x1_Ch, r2_4) in
              out(c23[i], m2_2)
            )
            else
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_4) in
              out(c23[i], m2_Ch)
        )
        else
          let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec2(m1_Ch, skgen2_1(r2_3)) in
          let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
          if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
          let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
          let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
          let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
          event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_1: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            new r3_4: enc_seed;
            new r2_4: enc_seed;
            new session_key: key;
            let m_8: bitstring = key2bitstring(session_key) in
            let x_3: bitstring = m_8 in
            let y_2: pkey = x1_Ch in
            if x1_Ch = pkgen2_1(r2_3) then
            (
              let m2_2: bitstring = {378}enc_r2(Z(m_8), x1_Ch, r2_4) in
              out(c23[i], m2_2)
            )
            else
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_4) in
              out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        find [unique] u_9 = ri_9 <= qH suchthat defined(r_16[ri_9], x1_1[ri_9]) && (x1_1 = x1_1[ri_9]) then
          out(ch2[iH], r_16[u_9])
        orfind u_8 = ri_8 <= qTDXM suchthat defined(x_O_1[ri_8], r_17[ri_8]) && (x1_1 = x_O_1[ri_8]) then
          out(ch2[iH], r_17[u_8])
        orfind u_7 = ri_7 <= qCPU suchthat defined(x_O_2[ri_7], r_18[ri_7]) && (x1_1 = x_O_2[ri_7]) then
          out(ch2[iH], r_18[u_7])
        else
          new r_16: hashoutput;
          out(ch2[iH], r_16)
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pkgen2_1(r3_2), rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        new tdi_TDXM: tdi_t;
        out(c6[i_2], tdi_t2bitstring(tdi_TDXM));
        in(c6[i_2], ());
        let x_O_1: bitstring = tdi_t2bitstring(tdi_TDXM) in
        find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_O_1 = x1_1[ri_6]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_16[u_6], rdata_TDXM) in
          new r_29: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_29) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_30: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_30) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_5 = ri_5 <= qTDXM suchthat defined(r_17[ri_5], tdi_TDXM[ri_5]) && (tdi_TDXM = tdi_TDXM[ri_5]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17[u_5], rdata_TDXM) in
          new r_31: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_31) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_32: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_32) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_4 = ri_4 <= qCPU suchthat defined(x_O_2[ri_4], r_18[ri_4]) && (x_O_1 = x_O_2[ri_4]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_18[u_4], rdata_TDXM) in
          new r_33: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_33) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_34: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_34) in
          out(c11[i_2], m4_TDXM)
        )
        else
          new r_17: hashoutput;
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17, rdata_TDXM) in
          new r_27: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_27) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_28: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_28) in
          out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        new tcbi_CPU: tcbi_t;
        let x_O_2: bitstring = tcbi_t2bitstring(tcbi_CPU) in
        find [unique] u_3 = ri_3 <= qH suchthat defined(r_16[ri_3], x1_1[ri_3]) && (x_O_2 = x1_1[ri_3]) then
        (
          new res2_CPU_2: res_t;
          new res1_CPU_2: res_t;
          new csvn_CPU_2: csvn_t;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU_2, csvn_CPU_2, r_16[u_3], tdih_CPU, rdata_CPU, res2_CPU_2) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU_2, csvn_CPU_2, r_16[u_3], tdih_CPU, rdata_CPU, res2_CPU_2, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_21: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_21) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_22: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_22) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_2 = ri_2 <= qTDXM suchthat defined(x_O_1[ri_2], r_17[ri_2]) && (x_O_2 = x_O_1[ri_2]) then
        (
          new res2_CPU_3: res_t;
          new res1_CPU_3: res_t;
          new csvn_CPU_3: csvn_t;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU_3, csvn_CPU_3, r_17[u_2], tdih_CPU, rdata_CPU, res2_CPU_3) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU_3, csvn_CPU_3, r_17[u_2], tdih_CPU, rdata_CPU, res2_CPU_3, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_23: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_23) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_24: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_24) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_1 = ri_1 <= qCPU suchthat defined(r_18[ri_1], tcbi_CPU[ri_1]) && (tcbi_CPU = tcbi_CPU[ri_1]) then
        (
          new res2_CPU_4: res_t;
          new res1_CPU_4: res_t;
          new csvn_CPU_4: csvn_t;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU_4, csvn_CPU_4, r_18[u_1], tdih_CPU, rdata_CPU, res2_CPU_4) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU_4, csvn_CPU_4, r_18[u_1], tdih_CPU, rdata_CPU, res2_CPU_4, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_25: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_25) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_26: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_26) in
          out(c17[i_3], m4_CPU)
        )
        else
          new r_18: hashoutput;
          new res2_CPU_1: res_t;
          new res1_CPU_1: res_t;
          new csvn_CPU_1: csvn_t;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU_1, csvn_CPU_1, r_18, tdih_CPU, rdata_CPU, res2_CPU_1) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU_1, csvn_CPU_1, r_18, tdih_CPU, rdata_CPU, res2_CPU_1, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_19: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_19) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_20: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_20) in
          out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        let m_14: bitstring = rms_t2bitstring(rms_QE) in
        new r_14: enc_seed_1;
        let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
        out(c15[i_4], m1_QE);
        in(c18[i_4], m2_QE: bitstring);
        let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
        if resOfMac_QE then
        let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
        let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
        let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
        let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
        let m_15: bitstring = quote_t2bitstring(quote_QE) in
        new r3_5: enc_seed;
        let m1: bitstring = {1464}enc_r2(Z(m_15), pkgen2_1(r2_3), r3_5) in
        out(c19[i_4], m1)
      ))


Applying simplify
  - Simplification pass
    - Replaced enc_r2(Z(m_15), pkgen2_1(r2_3), r3_5) with enc_r2(Zkey1, pkgen2_1(r2_3), r3_5) at 1464
    - Replaced enc_r2(Z(m_8), x1_Ch, r2_4) with enc_r2(Zkey1, x1_Ch, r2_4) at 378
    - Replaced enc_r2(Z(m_8), x1_Ch, r2_4) with enc_r2(Zkey1, x1_Ch, r2_4) at 258
    - Replaced defined condition rtyp_QE[ri_10], res1_QE[ri_10], csvn_QE[ri_10], tcbh_QE[ri_10], tdih_QE[ri_10], rdata_QE[ri_10], res2_QE[ri_10], rms_without_mac_QE[ri_10], tcbi_QE[ri_10], smr_without_mac_QE[ri_10], res4_QE[ri_10], tdi_QE[ri_10], tdr_without_mac_QE[ri_10], sig_QE[ri_10], quote_QE[ri_10], m1[ri_10] with res2_QE[ri_10], tdih_QE[ri_10], tcbh_QE[ri_10], csvn_QE[ri_10], res1_QE[ri_10], rtyp_QE[ri_10], rdata_QE[ri_10], m1[ri_10] in find at 28
    - Replaced ((y_2[ri_11] = pkgen2_1(r2_3)) && (m1_Ch = m2_2[ri_11])) with (m1_Ch = m2_2[ri_11]) at 32
    - Replaced x_3[u_11] with key2bitstring(session_key[u_11]) at 44
    - Replaced enc_r2(Z(m_8), x1_Ch, r2_4) with enc_r2(Zkey1, x1_Ch, r2_4) at 129
    - Replaced defined condition m2_2[ri_11], y_2[ri_11], x_3[ri_11] with session_key[ri_11], m2_2[ri_11] in find at 28
yields

Game 28 is
      in(start, ());
      new r1: skeyseed;
      let spk1: spkey = spkgen(r1) in
      let ssk1: sskey = sskgen(r1) in
      new r2_3: keyseed;
      new r3_2: keyseed;
      new sym_key: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        find u_11 = ri_11 <= qChallenger suchthat defined(session_key[ri_11], m2_2[ri_11]) && (m1_Ch = m2_2[ri_11]) then
        (
          let quote_t2bitstring(quote_Ch: quote_t) = key2bitstring(session_key[u_11]) in
          let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
          if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
          let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
          let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
          let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
          event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_1: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            new r3_4: enc_seed;
            new r2_4: enc_seed;
            new session_key: key;
            let m_8: bitstring = key2bitstring(session_key) in
            let x_3: bitstring = m_8 in
            let y_2: pkey = x1_Ch in
            if x1_Ch = pkgen2_1(r2_3) then
            (
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_4) in
              out(c23[i], m2_2)
            )
            else
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_4) in
              out(c23[i], m2_Ch)
        )
        orfind u_10 = ri_10 <= qQE suchthat defined(res2_QE[ri_10], tdih_QE[ri_10], tcbh_QE[ri_10], csvn_QE[ri_10], res1_QE[ri_10], rtyp_QE[ri_10], rdata_QE[ri_10], m1[ri_10]) && (m1_Ch = m1[ri_10]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_10] in
          event QuoteVerified(rtyp_QE[u_10], res1_QE[u_10], csvn_QE[u_10], tcbh_QE[u_10], tdih_QE[u_10], rdata_QE[u_10], res2_QE[u_10]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_1: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            new r3_4: enc_seed;
            new r2_4: enc_seed;
            new session_key: key;
            let m_8: bitstring = key2bitstring(session_key) in
            let x_3: bitstring = m_8 in
            let y_2: pkey = x1_Ch in
            if x1_Ch = pkgen2_1(r2_3) then
            (
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_4) in
              out(c23[i], m2_2)
            )
            else
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_4) in
              out(c23[i], m2_Ch)
        )
        else
          let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec2(m1_Ch, skgen2_1(r2_3)) in
          let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
          if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
          let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
          let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
          let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
          event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_1: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            new r3_4: enc_seed;
            new r2_4: enc_seed;
            new session_key: key;
            let m_8: bitstring = key2bitstring(session_key) in
            let x_3: bitstring = m_8 in
            let y_2: pkey = x1_Ch in
            if x1_Ch = pkgen2_1(r2_3) then
            (
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_4) in
              out(c23[i], m2_2)
            )
            else
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_4) in
              out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        find [unique] u_9 = ri_9 <= qH suchthat defined(r_16[ri_9], x1_1[ri_9]) && (x1_1 = x1_1[ri_9]) then
          out(ch2[iH], r_16[u_9])
        orfind u_8 = ri_8 <= qTDXM suchthat defined(x_O_1[ri_8], r_17[ri_8]) && (x1_1 = x_O_1[ri_8]) then
          out(ch2[iH], r_17[u_8])
        orfind u_7 = ri_7 <= qCPU suchthat defined(x_O_2[ri_7], r_18[ri_7]) && (x1_1 = x_O_2[ri_7]) then
          out(ch2[iH], r_18[u_7])
        else
          new r_16: hashoutput;
          out(ch2[iH], r_16)
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pkgen2_1(r3_2), rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        new tdi_TDXM: tdi_t;
        out(c6[i_2], tdi_t2bitstring(tdi_TDXM));
        in(c6[i_2], ());
        let x_O_1: bitstring = tdi_t2bitstring(tdi_TDXM) in
        find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_O_1 = x1_1[ri_6]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_16[u_6], rdata_TDXM) in
          new r_29: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_29) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_30: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_30) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_5 = ri_5 <= qTDXM suchthat defined(r_17[ri_5], tdi_TDXM[ri_5]) && (tdi_TDXM = tdi_TDXM[ri_5]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17[u_5], rdata_TDXM) in
          new r_31: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_31) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_32: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_32) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_4 = ri_4 <= qCPU suchthat defined(x_O_2[ri_4], r_18[ri_4]) && (x_O_1 = x_O_2[ri_4]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_18[u_4], rdata_TDXM) in
          new r_33: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_33) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_34: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_34) in
          out(c11[i_2], m4_TDXM)
        )
        else
          new r_17: hashoutput;
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17, rdata_TDXM) in
          new r_27: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_27) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_28: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_28) in
          out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        new tcbi_CPU: tcbi_t;
        let x_O_2: bitstring = tcbi_t2bitstring(tcbi_CPU) in
        find [unique] u_3 = ri_3 <= qH suchthat defined(r_16[ri_3], x1_1[ri_3]) && (x_O_2 = x1_1[ri_3]) then
        (
          new res2_CPU_2: res_t;
          new res1_CPU_2: res_t;
          new csvn_CPU_2: csvn_t;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU_2, csvn_CPU_2, r_16[u_3], tdih_CPU, rdata_CPU, res2_CPU_2) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU_2, csvn_CPU_2, r_16[u_3], tdih_CPU, rdata_CPU, res2_CPU_2, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_21: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_21) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_22: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_22) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_2 = ri_2 <= qTDXM suchthat defined(x_O_1[ri_2], r_17[ri_2]) && (x_O_2 = x_O_1[ri_2]) then
        (
          new res2_CPU_3: res_t;
          new res1_CPU_3: res_t;
          new csvn_CPU_3: csvn_t;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU_3, csvn_CPU_3, r_17[u_2], tdih_CPU, rdata_CPU, res2_CPU_3) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU_3, csvn_CPU_3, r_17[u_2], tdih_CPU, rdata_CPU, res2_CPU_3, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_23: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_23) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_24: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_24) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_1 = ri_1 <= qCPU suchthat defined(r_18[ri_1], tcbi_CPU[ri_1]) && (tcbi_CPU = tcbi_CPU[ri_1]) then
        (
          new res2_CPU_4: res_t;
          new res1_CPU_4: res_t;
          new csvn_CPU_4: csvn_t;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU_4, csvn_CPU_4, r_18[u_1], tdih_CPU, rdata_CPU, res2_CPU_4) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU_4, csvn_CPU_4, r_18[u_1], tdih_CPU, rdata_CPU, res2_CPU_4, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_25: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_25) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_26: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_26) in
          out(c17[i_3], m4_CPU)
        )
        else
          new r_18: hashoutput;
          new res2_CPU_1: res_t;
          new res1_CPU_1: res_t;
          new csvn_CPU_1: csvn_t;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU_1, csvn_CPU_1, r_18, tdih_CPU, rdata_CPU, res2_CPU_1) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU_1, csvn_CPU_1, r_18, tdih_CPU, rdata_CPU, res2_CPU_1, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_19: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_19) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_20: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_20) in
          out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        let m_14: bitstring = rms_t2bitstring(rms_QE) in
        new r_14: enc_seed_1;
        let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
        out(c15[i_4], m1_QE);
        in(c18[i_4], m2_QE: bitstring);
        let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
        if resOfMac_QE then
        let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
        let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
        let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
        let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
        let m_15: bitstring = quote_t2bitstring(quote_QE) in
        new r3_5: enc_seed;
        let m1: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_5) in
        out(c19[i_4], m1)
      ))


Applying move all binders
  - Move assignment to y_2
  - Move assignment to x_3
  - Move assignment to m_8
  - Move random number generation session_key
  - Move random number generation r2_4
  - Move random number generation r3_4
  - Move assignment to y_2
  - Move assignment to x_3
  - Move assignment to m_8
  - Move random number generation session_key
  - Move random number generation r2_4
  - Move random number generation r3_4
  - Move assignment to y_2
  - Move assignment to x_3
  - Move assignment to m_8
  - Move random number generation session_key
  - Move random number generation r2_4
  - Move random number generation r3_4
yields

Game 29 is
      in(start, ());
      new r1: skeyseed;
      let spk1: spkey = spkgen(r1) in
      let ssk1: sskey = sskgen(r1) in
      new r2_3: keyseed;
      new r3_2: keyseed;
      new sym_key: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        find u_11 = ri_11 <= qChallenger suchthat defined(session_key[ri_11], m2_2[ri_11]) && (m1_Ch = m2_2[ri_11]) then
        (
          let quote_t2bitstring(quote_Ch: quote_t) = key2bitstring(session_key[u_11]) in
          let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
          if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
          let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
          let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
          let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
          event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_1: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_4: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_4) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_4: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_4) in
              out(c23[i], m2_Ch)
        )
        orfind u_10 = ri_10 <= qQE suchthat defined(res2_QE[ri_10], tdih_QE[ri_10], tcbh_QE[ri_10], csvn_QE[ri_10], res1_QE[ri_10], rtyp_QE[ri_10], rdata_QE[ri_10], m1[ri_10]) && (m1_Ch = m1[ri_10]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_10] in
          event QuoteVerified(rtyp_QE[u_10], res1_QE[u_10], csvn_QE[u_10], tcbh_QE[u_10], tdih_QE[u_10], rdata_QE[u_10], res2_QE[u_10]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_1: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_4: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_4) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_4: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_4) in
              out(c23[i], m2_Ch)
        )
        else
          let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec2(m1_Ch, skgen2_1(r2_3)) in
          let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
          if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
          let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
          let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
          let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
          event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_1: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_1) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_4: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_4) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_4: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_4) in
              out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        find [unique] u_9 = ri_9 <= qH suchthat defined(r_16[ri_9], x1_1[ri_9]) && (x1_1 = x1_1[ri_9]) then
          out(ch2[iH], r_16[u_9])
        orfind u_8 = ri_8 <= qTDXM suchthat defined(x_O_1[ri_8], r_17[ri_8]) && (x1_1 = x_O_1[ri_8]) then
          out(ch2[iH], r_17[u_8])
        orfind u_7 = ri_7 <= qCPU suchthat defined(x_O_2[ri_7], r_18[ri_7]) && (x1_1 = x_O_2[ri_7]) then
          out(ch2[iH], r_18[u_7])
        else
          new r_16: hashoutput;
          out(ch2[iH], r_16)
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pkgen2_1(r3_2), rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        new tdi_TDXM: tdi_t;
        out(c6[i_2], tdi_t2bitstring(tdi_TDXM));
        in(c6[i_2], ());
        let x_O_1: bitstring = tdi_t2bitstring(tdi_TDXM) in
        find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_O_1 = x1_1[ri_6]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_16[u_6], rdata_TDXM) in
          new r_29: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_29) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_30: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_30) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_5 = ri_5 <= qTDXM suchthat defined(r_17[ri_5], tdi_TDXM[ri_5]) && (tdi_TDXM = tdi_TDXM[ri_5]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17[u_5], rdata_TDXM) in
          new r_31: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_31) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_32: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_32) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_4 = ri_4 <= qCPU suchthat defined(x_O_2[ri_4], r_18[ri_4]) && (x_O_1 = x_O_2[ri_4]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_18[u_4], rdata_TDXM) in
          new r_33: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_33) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_34: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_34) in
          out(c11[i_2], m4_TDXM)
        )
        else
          new r_17: hashoutput;
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17, rdata_TDXM) in
          new r_27: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_27) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_28: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_28) in
          out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        new tcbi_CPU: tcbi_t;
        let x_O_2: bitstring = tcbi_t2bitstring(tcbi_CPU) in
        find [unique] u_3 = ri_3 <= qH suchthat defined(r_16[ri_3], x1_1[ri_3]) && (x_O_2 = x1_1[ri_3]) then
        (
          new res2_CPU_2: res_t;
          new res1_CPU_2: res_t;
          new csvn_CPU_2: csvn_t;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU_2, csvn_CPU_2, r_16[u_3], tdih_CPU, rdata_CPU, res2_CPU_2) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU_2, csvn_CPU_2, r_16[u_3], tdih_CPU, rdata_CPU, res2_CPU_2, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_21: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_21) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_22: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_22) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_2 = ri_2 <= qTDXM suchthat defined(x_O_1[ri_2], r_17[ri_2]) && (x_O_2 = x_O_1[ri_2]) then
        (
          new res2_CPU_3: res_t;
          new res1_CPU_3: res_t;
          new csvn_CPU_3: csvn_t;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU_3, csvn_CPU_3, r_17[u_2], tdih_CPU, rdata_CPU, res2_CPU_3) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU_3, csvn_CPU_3, r_17[u_2], tdih_CPU, rdata_CPU, res2_CPU_3, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_23: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_23) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_24: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_24) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_1 = ri_1 <= qCPU suchthat defined(r_18[ri_1], tcbi_CPU[ri_1]) && (tcbi_CPU = tcbi_CPU[ri_1]) then
        (
          new res2_CPU_4: res_t;
          new res1_CPU_4: res_t;
          new csvn_CPU_4: csvn_t;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU_4, csvn_CPU_4, r_18[u_1], tdih_CPU, rdata_CPU, res2_CPU_4) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU_4, csvn_CPU_4, r_18[u_1], tdih_CPU, rdata_CPU, res2_CPU_4, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_25: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_25) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_26: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_26) in
          out(c17[i_3], m4_CPU)
        )
        else
          new r_18: hashoutput;
          new res2_CPU_1: res_t;
          new res1_CPU_1: res_t;
          new csvn_CPU_1: csvn_t;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU_1, csvn_CPU_1, r_18, tdih_CPU, rdata_CPU, res2_CPU_1) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU_1, csvn_CPU_1, r_18, tdih_CPU, rdata_CPU, res2_CPU_1, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_19: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_19) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_20: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_20) in
          out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        let m_14: bitstring = rms_t2bitstring(rms_QE) in
        new r_14: enc_seed_1;
        let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
        out(c15[i_4], m1_QE);
        in(c18[i_4], m2_QE: bitstring);
        let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
        if resOfMac_QE then
        let smr_without_mac_QE: smr_without_mac_t = smr_without_mac_f(rms_without_mac_QE, tcbi_QE) in
        let tdr_without_mac_QE: tdr_without_mac_t = tdr_without_mac_f(smr_without_mac_QE, res4_QE, tdi_QE) in
        let sig_QE: signature = sign(tdr_without_mac_t2bitstring(tdr_without_mac_QE), ssk1) in
        let quote_QE: quote_t = quote_f(tdr_without_mac_QE, sig_QE) in
        let m_15: bitstring = quote_t2bitstring(quote_QE) in
        new r3_5: enc_seed;
        let m1: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_5) in
        out(c19[i_4], m1)
      ))


Applying remove assignments of findcond
  - Remove assignments on m_15 (definition removed, all usages removed)
  - Rename variable r3_4 into r3_8, r3_7, r3_6
  - Rename variable r2_4 into r2_9, r2_7, r2_5
  - Rename variable r2_1 into r2_10, r2_8, r2_6
  - Remove assignments on quote_QE (definition removed, all usages removed)
  - Remove assignments on sig_QE (definition removed, all usages removed)
  - Remove assignments on ssk1 (definition removed, all usages removed)
  - Remove assignments on tdr_without_mac_QE (definition removed, all usages removed)
  - Remove assignments on smr_without_mac_QE (definition removed, all usages removed)
yields

Game 30 is
      in(start, ());
      new r1: skeyseed;
      let spk1: spkey = spkgen(r1) in
      new r2_3: keyseed;
      new r3_2: keyseed;
      new sym_key: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        find u_11 = ri_11 <= qChallenger suchthat defined(session_key[ri_11], m2_2[ri_11]) && (m1_Ch = m2_2[ri_11]) then
        (
          let quote_t2bitstring(quote_Ch: quote_t) = key2bitstring(session_key[u_11]) in
          let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
          if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
          let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
          let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
          let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
          event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_8: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_8) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_7: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_7) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_7: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_7) in
              out(c23[i], m2_Ch)
        )
        orfind u_10 = ri_10 <= qQE suchthat defined(res2_QE[ri_10], tdih_QE[ri_10], tcbh_QE[ri_10], csvn_QE[ri_10], res1_QE[ri_10], rtyp_QE[ri_10], rdata_QE[ri_10], m1[ri_10]) && (m1_Ch = m1[ri_10]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_10] in
          event QuoteVerified(rtyp_QE[u_10], res1_QE[u_10], csvn_QE[u_10], tcbh_QE[u_10], tdih_QE[u_10], rdata_QE[u_10], res2_QE[u_10]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_10: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_10) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_9: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_9) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_8: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_8) in
              out(c23[i], m2_Ch)
        )
        else
          let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec2(m1_Ch, skgen2_1(r2_3)) in
          let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
          if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spk1, sig_Ch) then
          let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
          let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
          let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
          event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_6: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_6) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_5: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_5) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_6: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_6) in
              out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        find [unique] u_9 = ri_9 <= qH suchthat defined(r_16[ri_9], x1_1[ri_9]) && (x1_1 = x1_1[ri_9]) then
          out(ch2[iH], r_16[u_9])
        orfind u_8 = ri_8 <= qTDXM suchthat defined(x_O_1[ri_8], r_17[ri_8]) && (x1_1 = x_O_1[ri_8]) then
          out(ch2[iH], r_17[u_8])
        orfind u_7 = ri_7 <= qCPU suchthat defined(x_O_2[ri_7], r_18[ri_7]) && (x1_1 = x_O_2[ri_7]) then
          out(ch2[iH], r_18[u_7])
        else
          new r_16: hashoutput;
          out(ch2[iH], r_16)
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pkgen2_1(r3_2), rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        new tdi_TDXM: tdi_t;
        out(c6[i_2], tdi_t2bitstring(tdi_TDXM));
        in(c6[i_2], ());
        let x_O_1: bitstring = tdi_t2bitstring(tdi_TDXM) in
        find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_O_1 = x1_1[ri_6]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_16[u_6], rdata_TDXM) in
          new r_29: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_29) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_30: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_30) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_5 = ri_5 <= qTDXM suchthat defined(r_17[ri_5], tdi_TDXM[ri_5]) && (tdi_TDXM = tdi_TDXM[ri_5]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17[u_5], rdata_TDXM) in
          new r_31: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_31) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_32: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_32) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_4 = ri_4 <= qCPU suchthat defined(x_O_2[ri_4], r_18[ri_4]) && (x_O_1 = x_O_2[ri_4]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_18[u_4], rdata_TDXM) in
          new r_33: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_33) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_34: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_34) in
          out(c11[i_2], m4_TDXM)
        )
        else
          new r_17: hashoutput;
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17, rdata_TDXM) in
          new r_27: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_27) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_28: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_28) in
          out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        new tcbi_CPU: tcbi_t;
        let x_O_2: bitstring = tcbi_t2bitstring(tcbi_CPU) in
        find [unique] u_3 = ri_3 <= qH suchthat defined(r_16[ri_3], x1_1[ri_3]) && (x_O_2 = x1_1[ri_3]) then
        (
          new res2_CPU_2: res_t;
          new res1_CPU_2: res_t;
          new csvn_CPU_2: csvn_t;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU_2, csvn_CPU_2, r_16[u_3], tdih_CPU, rdata_CPU, res2_CPU_2) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU_2, csvn_CPU_2, r_16[u_3], tdih_CPU, rdata_CPU, res2_CPU_2, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_21: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_21) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_22: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_22) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_2 = ri_2 <= qTDXM suchthat defined(x_O_1[ri_2], r_17[ri_2]) && (x_O_2 = x_O_1[ri_2]) then
        (
          new res2_CPU_3: res_t;
          new res1_CPU_3: res_t;
          new csvn_CPU_3: csvn_t;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU_3, csvn_CPU_3, r_17[u_2], tdih_CPU, rdata_CPU, res2_CPU_3) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU_3, csvn_CPU_3, r_17[u_2], tdih_CPU, rdata_CPU, res2_CPU_3, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_23: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_23) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_24: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_24) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_1 = ri_1 <= qCPU suchthat defined(r_18[ri_1], tcbi_CPU[ri_1]) && (tcbi_CPU = tcbi_CPU[ri_1]) then
        (
          new res2_CPU_4: res_t;
          new res1_CPU_4: res_t;
          new csvn_CPU_4: csvn_t;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU_4, csvn_CPU_4, r_18[u_1], tdih_CPU, rdata_CPU, res2_CPU_4) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU_4, csvn_CPU_4, r_18[u_1], tdih_CPU, rdata_CPU, res2_CPU_4, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_25: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_25) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_26: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_26) in
          out(c17[i_3], m4_CPU)
        )
        else
          new r_18: hashoutput;
          new res2_CPU_1: res_t;
          new res1_CPU_1: res_t;
          new csvn_CPU_1: csvn_t;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU_1, csvn_CPU_1, r_18, tdih_CPU, rdata_CPU, res2_CPU_1) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU_1, csvn_CPU_1, r_18, tdih_CPU, rdata_CPU, res2_CPU_1, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_19: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_19) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_20: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_20) in
          out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        let m_14: bitstring = rms_t2bitstring(rms_QE) in
        new r_14: enc_seed_1;
        let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
        out(c15[i_4], m1_QE);
        in(c18[i_4], m2_QE: bitstring);
        let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
        if resOfMac_QE then
        new r3_5: enc_seed;
        let m1: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_5) in
        out(c19[i_4], m1)
      ))


Applying remove assignments of binder spk1
  - Remove assignments on spk1 (definition removed, all usages removed)
yields

Game 31 is
      in(start, ());
      new r1: skeyseed;
      new r2_3: keyseed;
      new r3_2: keyseed;
      new sym_key: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        find u_11 = ri_11 <= qChallenger suchthat defined(session_key[ri_11], m2_2[ri_11]) && (m1_Ch = m2_2[ri_11]) then
        (
          let quote_t2bitstring(quote_Ch: quote_t) = key2bitstring(session_key[u_11]) in
          let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
          if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spkgen(r1), sig_Ch) then
          let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
          let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
          let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
          event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_8: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_8) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_7: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_7) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_7: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_7) in
              out(c23[i], m2_Ch)
        )
        orfind u_10 = ri_10 <= qQE suchthat defined(res2_QE[ri_10], tdih_QE[ri_10], tcbh_QE[ri_10], csvn_QE[ri_10], res1_QE[ri_10], rtyp_QE[ri_10], rdata_QE[ri_10], m1[ri_10]) && (m1_Ch = m1[ri_10]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_10] in
          event QuoteVerified(rtyp_QE[u_10], res1_QE[u_10], csvn_QE[u_10], tcbh_QE[u_10], tdih_QE[u_10], rdata_QE[u_10], res2_QE[u_10]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_10: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_10) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_9: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_9) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_8: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_8) in
              out(c23[i], m2_Ch)
        )
        else
          let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec2(m1_Ch, skgen2_1(r2_3)) in
          let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
          if verify(tdr_without_mac_t2bitstring(tdr_without_mac_Ch), spkgen(r1), sig_Ch) then
          let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
          let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
          let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
          event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_6: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_6) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_5: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_5) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_6: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_6) in
              out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        find [unique] u_9 = ri_9 <= qH suchthat defined(r_16[ri_9], x1_1[ri_9]) && (x1_1 = x1_1[ri_9]) then
          out(ch2[iH], r_16[u_9])
        orfind u_8 = ri_8 <= qTDXM suchthat defined(x_O_1[ri_8], r_17[ri_8]) && (x1_1 = x_O_1[ri_8]) then
          out(ch2[iH], r_17[u_8])
        orfind u_7 = ri_7 <= qCPU suchthat defined(x_O_2[ri_7], r_18[ri_7]) && (x1_1 = x_O_2[ri_7]) then
          out(ch2[iH], r_18[u_7])
        else
          new r_16: hashoutput;
          out(ch2[iH], r_16)
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pkgen2_1(r3_2), rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        new tdi_TDXM: tdi_t;
        out(c6[i_2], tdi_t2bitstring(tdi_TDXM));
        in(c6[i_2], ());
        let x_O_1: bitstring = tdi_t2bitstring(tdi_TDXM) in
        find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_O_1 = x1_1[ri_6]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_16[u_6], rdata_TDXM) in
          new r_29: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_29) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_30: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_30) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_5 = ri_5 <= qTDXM suchthat defined(r_17[ri_5], tdi_TDXM[ri_5]) && (tdi_TDXM = tdi_TDXM[ri_5]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17[u_5], rdata_TDXM) in
          new r_31: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_31) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_32: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_32) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_4 = ri_4 <= qCPU suchthat defined(x_O_2[ri_4], r_18[ri_4]) && (x_O_1 = x_O_2[ri_4]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_18[u_4], rdata_TDXM) in
          new r_33: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_33) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_34: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_34) in
          out(c11[i_2], m4_TDXM)
        )
        else
          new r_17: hashoutput;
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17, rdata_TDXM) in
          new r_27: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_27) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_28: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_28) in
          out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        new tcbi_CPU: tcbi_t;
        let x_O_2: bitstring = tcbi_t2bitstring(tcbi_CPU) in
        find [unique] u_3 = ri_3 <= qH suchthat defined(r_16[ri_3], x1_1[ri_3]) && (x_O_2 = x1_1[ri_3]) then
        (
          new res2_CPU_2: res_t;
          new res1_CPU_2: res_t;
          new csvn_CPU_2: csvn_t;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU_2, csvn_CPU_2, r_16[u_3], tdih_CPU, rdata_CPU, res2_CPU_2) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU_2, csvn_CPU_2, r_16[u_3], tdih_CPU, rdata_CPU, res2_CPU_2, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_21: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_21) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_22: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_22) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_2 = ri_2 <= qTDXM suchthat defined(x_O_1[ri_2], r_17[ri_2]) && (x_O_2 = x_O_1[ri_2]) then
        (
          new res2_CPU_3: res_t;
          new res1_CPU_3: res_t;
          new csvn_CPU_3: csvn_t;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU_3, csvn_CPU_3, r_17[u_2], tdih_CPU, rdata_CPU, res2_CPU_3) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU_3, csvn_CPU_3, r_17[u_2], tdih_CPU, rdata_CPU, res2_CPU_3, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_23: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_23) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_24: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_24) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_1 = ri_1 <= qCPU suchthat defined(r_18[ri_1], tcbi_CPU[ri_1]) && (tcbi_CPU = tcbi_CPU[ri_1]) then
        (
          new res2_CPU_4: res_t;
          new res1_CPU_4: res_t;
          new csvn_CPU_4: csvn_t;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU_4, csvn_CPU_4, r_18[u_1], tdih_CPU, rdata_CPU, res2_CPU_4) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU_4, csvn_CPU_4, r_18[u_1], tdih_CPU, rdata_CPU, res2_CPU_4, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_25: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_25) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_26: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_26) in
          out(c17[i_3], m4_CPU)
        )
        else
          new r_18: hashoutput;
          new res2_CPU_1: res_t;
          new res1_CPU_1: res_t;
          new csvn_CPU_1: csvn_t;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU_1, csvn_CPU_1, r_18, tdih_CPU, rdata_CPU, res2_CPU_1) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU_1, csvn_CPU_1, r_18, tdih_CPU, rdata_CPU, res2_CPU_1, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_19: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_19) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_20: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_20) in
          out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        let m_14: bitstring = rms_t2bitstring(rms_QE) in
        new r_14: enc_seed_1;
        let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
        out(c15[i_4], m1_QE);
        in(c18[i_4], m2_QE: bitstring);
        let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
        if resOfMac_QE then
        new r3_5: enc_seed;
        let m1: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_5) in
        out(c19[i_4], m1)
      ))


Applying equivalence uf_cma(sign) with r1 [probability Psign(time(context for game 31) + time + (-1 + qChallenger) * time(verify, length(tdr_without_mac_t2bitstring)), 0, -inf)]
  - Equivalence uf_cma(sign) with variables: r1 -> r
yields

Game 32 is
      in(start, ());
      new r1: skeyseed;
      new r2_3: keyseed;
      new r3_2: keyseed;
      new sym_key: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        find u_11 = ri_11 <= qChallenger suchthat defined(session_key[ri_11], m2_2[ri_11]) && (m1_Ch = m2_2[ri_11]) then
        (
          let quote_t2bitstring(quote_Ch: quote_t) = key2bitstring(session_key[u_11]) in
          let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
          if (let m1_2: bitstring = tdr_without_mac_t2bitstring(tdr_without_mac_Ch) in (let si1_1: signature = sig_Ch in {46}find  else false)) then
          let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
          let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
          let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
          event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_8: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_8) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_7: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_7) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_7: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_7) in
              out(c23[i], m2_Ch)
        )
        orfind u_10 = ri_10 <= qQE suchthat defined(res2_QE[ri_10], tdih_QE[ri_10], tcbh_QE[ri_10], csvn_QE[ri_10], res1_QE[ri_10], rtyp_QE[ri_10], rdata_QE[ri_10], m1[ri_10]) && (m1_Ch = m1[ri_10]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_10] in
          event QuoteVerified(rtyp_QE[u_10], res1_QE[u_10], csvn_QE[u_10], tcbh_QE[u_10], tdih_QE[u_10], rdata_QE[u_10], res2_QE[u_10]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_10: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_10) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_9: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_9) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_8: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_8) in
              out(c23[i], m2_Ch)
        )
        else
          let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec2(m1_Ch, skgen2_1(r2_3)) in
          let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
          if (let m1_1: bitstring = tdr_without_mac_t2bitstring(tdr_without_mac_Ch) in (let si1: signature = sig_Ch in {271}find  else false)) then
          let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
          let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
          let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
          event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_6: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_6) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_5: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_5) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_6: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_6) in
              out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        find [unique] u_9 = ri_9 <= qH suchthat defined(r_16[ri_9], x1_1[ri_9]) && (x1_1 = x1_1[ri_9]) then
          out(ch2[iH], r_16[u_9])
        orfind u_8 = ri_8 <= qTDXM suchthat defined(x_O_1[ri_8], r_17[ri_8]) && (x1_1 = x_O_1[ri_8]) then
          out(ch2[iH], r_17[u_8])
        orfind u_7 = ri_7 <= qCPU suchthat defined(x_O_2[ri_7], r_18[ri_7]) && (x1_1 = x_O_2[ri_7]) then
          out(ch2[iH], r_18[u_7])
        else
          new r_16: hashoutput;
          out(ch2[iH], r_16)
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pkgen2_1(r3_2), rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        new tdi_TDXM: tdi_t;
        out(c6[i_2], tdi_t2bitstring(tdi_TDXM));
        in(c6[i_2], ());
        let x_O_1: bitstring = tdi_t2bitstring(tdi_TDXM) in
        find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_O_1 = x1_1[ri_6]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_16[u_6], rdata_TDXM) in
          new r_29: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_29) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_30: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_30) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_5 = ri_5 <= qTDXM suchthat defined(r_17[ri_5], tdi_TDXM[ri_5]) && (tdi_TDXM = tdi_TDXM[ri_5]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17[u_5], rdata_TDXM) in
          new r_31: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_31) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_32: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_32) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_4 = ri_4 <= qCPU suchthat defined(x_O_2[ri_4], r_18[ri_4]) && (x_O_1 = x_O_2[ri_4]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_18[u_4], rdata_TDXM) in
          new r_33: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_33) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_34: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_34) in
          out(c11[i_2], m4_TDXM)
        )
        else
          new r_17: hashoutput;
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17, rdata_TDXM) in
          new r_27: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_27) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_28: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_28) in
          out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        new tcbi_CPU: tcbi_t;
        let x_O_2: bitstring = tcbi_t2bitstring(tcbi_CPU) in
        find [unique] u_3 = ri_3 <= qH suchthat defined(r_16[ri_3], x1_1[ri_3]) && (x_O_2 = x1_1[ri_3]) then
        (
          new res2_CPU_2: res_t;
          new res1_CPU_2: res_t;
          new csvn_CPU_2: csvn_t;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU_2, csvn_CPU_2, r_16[u_3], tdih_CPU, rdata_CPU, res2_CPU_2) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU_2, csvn_CPU_2, r_16[u_3], tdih_CPU, rdata_CPU, res2_CPU_2, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_21: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_21) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_22: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_22) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_2 = ri_2 <= qTDXM suchthat defined(x_O_1[ri_2], r_17[ri_2]) && (x_O_2 = x_O_1[ri_2]) then
        (
          new res2_CPU_3: res_t;
          new res1_CPU_3: res_t;
          new csvn_CPU_3: csvn_t;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU_3, csvn_CPU_3, r_17[u_2], tdih_CPU, rdata_CPU, res2_CPU_3) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU_3, csvn_CPU_3, r_17[u_2], tdih_CPU, rdata_CPU, res2_CPU_3, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_23: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_23) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_24: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_24) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_1 = ri_1 <= qCPU suchthat defined(r_18[ri_1], tcbi_CPU[ri_1]) && (tcbi_CPU = tcbi_CPU[ri_1]) then
        (
          new res2_CPU_4: res_t;
          new res1_CPU_4: res_t;
          new csvn_CPU_4: csvn_t;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU_4, csvn_CPU_4, r_18[u_1], tdih_CPU, rdata_CPU, res2_CPU_4) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU_4, csvn_CPU_4, r_18[u_1], tdih_CPU, rdata_CPU, res2_CPU_4, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_25: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_25) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_26: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_26) in
          out(c17[i_3], m4_CPU)
        )
        else
          new r_18: hashoutput;
          new res2_CPU_1: res_t;
          new res1_CPU_1: res_t;
          new csvn_CPU_1: csvn_t;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU_1, csvn_CPU_1, r_18, tdih_CPU, rdata_CPU, res2_CPU_1) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU_1, csvn_CPU_1, r_18, tdih_CPU, rdata_CPU, res2_CPU_1, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_19: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_19) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_20: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_20) in
          out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        let m_14: bitstring = rms_t2bitstring(rms_QE) in
        new r_14: enc_seed_1;
        let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
        out(c15[i_4], m1_QE);
        in(c18[i_4], m2_QE: bitstring);
        let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
        if resOfMac_QE then
        new r3_5: enc_seed;
        let m1: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_5) in
        out(c19[i_4], m1)
      ))


Applying simplify (non-expanded game)
  - Simplification pass
    - Find at 46 removed (else branch kept if any)
    - Find at 271 removed (else branch kept if any)
yields

Game 33 is
      in(start, ());
      new r1: skeyseed;
      new r2_3: keyseed;
      new r3_2: keyseed;
      new sym_key: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        find u_11 = ri_11 <= qChallenger suchthat defined(session_key[ri_11], m2_2[ri_11]) && (m1_Ch = m2_2[ri_11]) then
        (
  {30}    let quote_t2bitstring(quote_Ch: quote_t) = key2bitstring(session_key[u_11]) in
  {35}    let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
  {38}    if {39}(let m1_2: bitstring = tdr_without_mac_t2bitstring(tdr_without_mac_Ch) in {43}(let si1_1: signature = sig_Ch in false)) then
          let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
          let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
          let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
          event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_8: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_8) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_7: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_7) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_7: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_7) in
              out(c23[i], m2_Ch)
        )
        orfind u_10 = ri_10 <= qQE suchthat defined(res2_QE[ri_10], tdih_QE[ri_10], tcbh_QE[ri_10], csvn_QE[ri_10], res1_QE[ri_10], rtyp_QE[ri_10], rdata_QE[ri_10], m1[ri_10]) && (m1_Ch = m1[ri_10]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_10] in
          event QuoteVerified(rtyp_QE[u_10], res1_QE[u_10], csvn_QE[u_10], tcbh_QE[u_10], tdih_QE[u_10], rdata_QE[u_10], res2_QE[u_10]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_10: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_10) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_9: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_9) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_8: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_8) in
              out(c23[i], m2_Ch)
        )
        else
 {253}    let injbot(quote_t2bitstring(quote_Ch: quote_t)) = dec2(m1_Ch, skgen2_1(r2_3)) in
 {259}    let quote_f(tdr_without_mac_Ch: tdr_without_mac_t, sig_Ch: signature) = quote_Ch in
 {262}    if {263}(let m1_1: bitstring = tdr_without_mac_t2bitstring(tdr_without_mac_Ch) in {267}(let si1: signature = sig_Ch in false)) then
          let tdr_without_mac_f(smr_without_mac_Ch: smr_without_mac_t, res4_Ch: res_t, tdi_Ch: tdi_t) = tdr_without_mac_Ch in
          let smr_without_mac_f(rms_without_mac_Ch: rms_without_mac_t, tcbi_Ch: tcbi_t) = smr_without_mac_Ch in
          let rms_without_mac_f(rtyp_Ch: rtyp_t, res1_Ch: res_t, csvn_Ch: csvn_t, tcbh_Ch: hashoutput, tdih_Ch: hashoutput, rdata_Ch: rdata_t, res2_Ch: res_t) = rms_without_mac_Ch in
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_Ch in
          event QuoteVerified(rtyp_Ch, res1_Ch, csvn_Ch, tcbh_Ch, tdih_Ch, rdata_Ch, res2_Ch);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_6: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_6) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_5: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_5) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_6: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_6) in
              out(c23[i], m2_Ch)
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        find [unique] u_9 = ri_9 <= qH suchthat defined(r_16[ri_9], x1_1[ri_9]) && (x1_1 = x1_1[ri_9]) then
          out(ch2[iH], r_16[u_9])
        orfind u_8 = ri_8 <= qTDXM suchthat defined(x_O_1[ri_8], r_17[ri_8]) && (x1_1 = x_O_1[ri_8]) then
          out(ch2[iH], r_17[u_8])
        orfind u_7 = ri_7 <= qCPU suchthat defined(x_O_2[ri_7], r_18[ri_7]) && (x1_1 = x_O_2[ri_7]) then
          out(ch2[iH], r_18[u_7])
        else
          new r_16: hashoutput;
          out(ch2[iH], r_16)
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pkgen2_1(r3_2), rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        new tdi_TDXM: tdi_t;
        out(c6[i_2], tdi_t2bitstring(tdi_TDXM));
        in(c6[i_2], ());
        let x_O_1: bitstring = tdi_t2bitstring(tdi_TDXM) in
        find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_O_1 = x1_1[ri_6]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_16[u_6], rdata_TDXM) in
          new r_29: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_29) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_30: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_30) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_5 = ri_5 <= qTDXM suchthat defined(r_17[ri_5], tdi_TDXM[ri_5]) && (tdi_TDXM = tdi_TDXM[ri_5]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17[u_5], rdata_TDXM) in
          new r_31: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_31) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_32: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_32) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_4 = ri_4 <= qCPU suchthat defined(x_O_2[ri_4], r_18[ri_4]) && (x_O_1 = x_O_2[ri_4]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_18[u_4], rdata_TDXM) in
          new r_33: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_33) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_34: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_34) in
          out(c11[i_2], m4_TDXM)
        )
        else
          new r_17: hashoutput;
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17, rdata_TDXM) in
          new r_27: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_27) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_28: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_28) in
          out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        new tcbi_CPU: tcbi_t;
        let x_O_2: bitstring = tcbi_t2bitstring(tcbi_CPU) in
        find [unique] u_3 = ri_3 <= qH suchthat defined(r_16[ri_3], x1_1[ri_3]) && (x_O_2 = x1_1[ri_3]) then
        (
          new res2_CPU_2: res_t;
          new res1_CPU_2: res_t;
          new csvn_CPU_2: csvn_t;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU_2, csvn_CPU_2, r_16[u_3], tdih_CPU, rdata_CPU, res2_CPU_2) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU_2, csvn_CPU_2, r_16[u_3], tdih_CPU, rdata_CPU, res2_CPU_2, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_21: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_21) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_22: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_22) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_2 = ri_2 <= qTDXM suchthat defined(x_O_1[ri_2], r_17[ri_2]) && (x_O_2 = x_O_1[ri_2]) then
        (
          new res2_CPU_3: res_t;
          new res1_CPU_3: res_t;
          new csvn_CPU_3: csvn_t;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU_3, csvn_CPU_3, r_17[u_2], tdih_CPU, rdata_CPU, res2_CPU_3) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU_3, csvn_CPU_3, r_17[u_2], tdih_CPU, rdata_CPU, res2_CPU_3, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_23: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_23) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_24: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_24) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_1 = ri_1 <= qCPU suchthat defined(r_18[ri_1], tcbi_CPU[ri_1]) && (tcbi_CPU = tcbi_CPU[ri_1]) then
        (
          new res2_CPU_4: res_t;
          new res1_CPU_4: res_t;
          new csvn_CPU_4: csvn_t;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU_4, csvn_CPU_4, r_18[u_1], tdih_CPU, rdata_CPU, res2_CPU_4) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU_4, csvn_CPU_4, r_18[u_1], tdih_CPU, rdata_CPU, res2_CPU_4, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_25: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_25) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_26: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_26) in
          out(c17[i_3], m4_CPU)
        )
        else
          new r_18: hashoutput;
          new res2_CPU_1: res_t;
          new res1_CPU_1: res_t;
          new csvn_CPU_1: csvn_t;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU_1, csvn_CPU_1, r_18, tdih_CPU, rdata_CPU, res2_CPU_1) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU_1, csvn_CPU_1, r_18, tdih_CPU, rdata_CPU, res2_CPU_1, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_19: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_19) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_20: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_20) in
          out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        let m_14: bitstring = rms_t2bitstring(rms_QE) in
        new r_14: enc_seed_1;
        let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
        out(c15[i_4], m1_QE);
        in(c18[i_4], m2_QE: bitstring);
        let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
        if resOfMac_QE then
        new r3_5: enc_seed;
        let m1: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_5) in
        out(c19[i_4], m1)
      ))


Applying expand
  - Expand if/find/let
    - Test at 262 always false
    - Remove let at 267
    - Remove let at 263
    - Remove let at 259
    - Remove let at 253
    - Test at 38 always false
    - Remove let at 43
    - Remove let at 39
    - Remove let at 35
    - Remove let at 30
yields

Game 34 is
      in(start, ());
   {2}new r1: skeyseed;
      new r2_3: keyseed;
      new r3_2: keyseed;
      new sym_key: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        find u_11 = ri_11 <= qChallenger suchthat defined(session_key[ri_11], m2_2[ri_11]) && (m1_Ch = m2_2[ri_11]) then
          yield
        orfind u_10 = ri_10 <= qQE suchthat defined(res2_QE[ri_10], tdih_QE[ri_10], tcbh_QE[ri_10], csvn_QE[ri_10], res1_QE[ri_10], rtyp_QE[ri_10], rdata_QE[ri_10], m1[ri_10]) && (m1_Ch = m1[ri_10]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_10] in
          event QuoteVerified(rtyp_QE[u_10], res1_QE[u_10], csvn_QE[u_10], tcbh_QE[u_10], tdih_QE[u_10], rdata_QE[u_10], res2_QE[u_10]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_10: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_10) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_9: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_9) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_8: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_8) in
              out(c23[i], m2_Ch)
        )
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        find [unique] u_9 = ri_9 <= qH suchthat defined(r_16[ri_9], x1_1[ri_9]) && (x1_1 = x1_1[ri_9]) then
          out(ch2[iH], r_16[u_9])
        orfind u_8 = ri_8 <= qTDXM suchthat defined(x_O_1[ri_8], r_17[ri_8]) && (x1_1 = x_O_1[ri_8]) then
          out(ch2[iH], r_17[u_8])
        orfind u_7 = ri_7 <= qCPU suchthat defined(x_O_2[ri_7], r_18[ri_7]) && (x1_1 = x_O_2[ri_7]) then
          out(ch2[iH], r_18[u_7])
        else
          new r_16: hashoutput;
          out(ch2[iH], r_16)
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pkgen2_1(r3_2), rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        new tdi_TDXM: tdi_t;
        out(c6[i_2], tdi_t2bitstring(tdi_TDXM));
        in(c6[i_2], ());
        let x_O_1: bitstring = tdi_t2bitstring(tdi_TDXM) in
        find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_O_1 = x1_1[ri_6]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_16[u_6], rdata_TDXM) in
          new r_29: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_29) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_30: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_30) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_5 = ri_5 <= qTDXM suchthat defined(r_17[ri_5], tdi_TDXM[ri_5]) && (tdi_TDXM = tdi_TDXM[ri_5]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17[u_5], rdata_TDXM) in
          new r_31: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_31) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_32: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_32) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_4 = ri_4 <= qCPU suchthat defined(x_O_2[ri_4], r_18[ri_4]) && (x_O_1 = x_O_2[ri_4]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_18[u_4], rdata_TDXM) in
          new r_33: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_33) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_34: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_34) in
          out(c11[i_2], m4_TDXM)
        )
        else
          new r_17: hashoutput;
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17, rdata_TDXM) in
          new r_27: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_27) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_28: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_28) in
          out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        new tcbi_CPU: tcbi_t;
        let x_O_2: bitstring = tcbi_t2bitstring(tcbi_CPU) in
        find [unique] u_3 = ri_3 <= qH suchthat defined(r_16[ri_3], x1_1[ri_3]) && (x_O_2 = x1_1[ri_3]) then
        (
          new res2_CPU_2: res_t;
          new res1_CPU_2: res_t;
          new csvn_CPU_2: csvn_t;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU_2, csvn_CPU_2, r_16[u_3], tdih_CPU, rdata_CPU, res2_CPU_2) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU_2, csvn_CPU_2, r_16[u_3], tdih_CPU, rdata_CPU, res2_CPU_2, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_21: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_21) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_22: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_22) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_2 = ri_2 <= qTDXM suchthat defined(x_O_1[ri_2], r_17[ri_2]) && (x_O_2 = x_O_1[ri_2]) then
        (
          new res2_CPU_3: res_t;
          new res1_CPU_3: res_t;
          new csvn_CPU_3: csvn_t;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU_3, csvn_CPU_3, r_17[u_2], tdih_CPU, rdata_CPU, res2_CPU_3) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU_3, csvn_CPU_3, r_17[u_2], tdih_CPU, rdata_CPU, res2_CPU_3, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_23: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_23) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_24: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_24) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_1 = ri_1 <= qCPU suchthat defined(r_18[ri_1], tcbi_CPU[ri_1]) && (tcbi_CPU = tcbi_CPU[ri_1]) then
        (
          new res2_CPU_4: res_t;
          new res1_CPU_4: res_t;
          new csvn_CPU_4: csvn_t;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU_4, csvn_CPU_4, r_18[u_1], tdih_CPU, rdata_CPU, res2_CPU_4) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU_4, csvn_CPU_4, r_18[u_1], tdih_CPU, rdata_CPU, res2_CPU_4, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_25: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_25) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_26: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_26) in
          out(c17[i_3], m4_CPU)
        )
        else
          new r_18: hashoutput;
          new res2_CPU_1: res_t;
          new res1_CPU_1: res_t;
          new csvn_CPU_1: csvn_t;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU_1, csvn_CPU_1, r_18, tdih_CPU, rdata_CPU, res2_CPU_1) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU_1, csvn_CPU_1, r_18, tdih_CPU, rdata_CPU, res2_CPU_1, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_19: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_19) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_20: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_20) in
          out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        let m_14: bitstring = rms_t2bitstring(rms_QE) in
        new r_14: enc_seed_1;
        let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
        out(c15[i_4], m1_QE);
        in(c18[i_4], m2_QE: bitstring);
        let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
        if resOfMac_QE then
        new r3_5: enc_seed;
        let m1: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_5) in
        out(c19[i_4], m1)
      ))


Applying simplify
  - Simplification pass
    - Remove random number generation at 2
yields

Game 35 is
      in(start, ());
      new r2_3: keyseed;
      new r3_2: keyseed;
      new sym_key: key;
      new mkey: key;
      out(c1, ());
      ((
        ! i <= qChallenger
        in(c22[i], ());
        out(c23[i], ());
        in(c22[i], m1_Ch: bitstring);
        find u_11 = ri_11 <= qChallenger suchthat defined(session_key[ri_11], m2_2[ri_11]) && (m1_Ch = m2_2[ri_11]) then
          yield
        orfind u_10 = ri_10 <= qQE suchthat defined(res2_QE[ri_10], tdih_QE[ri_10], tcbh_QE[ri_10], csvn_QE[ri_10], res1_QE[ri_10], rtyp_QE[ri_10], rdata_QE[ri_10], m1[ri_10]) && (m1_Ch = m1[ri_10]) then
        (
          let rdata_f(x1_Ch: pkey, y1_Ch: user_data_t) = rdata_QE[u_10] in
          event QuoteVerified(rtyp_QE[u_10], res1_QE[u_10], csvn_QE[u_10], tcbh_QE[u_10], tdih_QE[u_10], rdata_QE[u_10], res2_QE[u_10]);
          if x1_Ch = pkgen2_1(r3_2) then
          (
            new r2_10: enc_seed;
            let m2: bitstring = enc_r2(Zkey1, x1_Ch, r2_10) in
            new session_key: key;
            out(c23[i], m2)
          )
          else
            if x1_Ch = pkgen2_1(r2_3) then
            (
              new r2_9: enc_seed;
              let m2_2: bitstring = enc_r2(Zkey1, x1_Ch, r2_9) in
              new session_key: key;
              out(c23[i], m2_2)
            )
            else
              new session_key: key;
              let m_8: bitstring = key2bitstring(session_key) in
              new r3_8: enc_seed;
              let m2_Ch: bitstring = enc_r(m_8, x1_Ch, r3_8) in
              out(c23[i], m2_Ch)
        )
      ) | (
        ! iH <= qH
        in(ch1[iH], x1_1: bitstring);
        find [unique] u_9 = ri_9 <= qH suchthat defined(r_16[ri_9], x1_1[ri_9]) && (x1_1 = x1_1[ri_9]) then
          out(ch2[iH], r_16[u_9])
        orfind u_8 = ri_8 <= qTDXM suchthat defined(x_O_1[ri_8], r_17[ri_8]) && (x1_1 = x_O_1[ri_8]) then
          out(ch2[iH], r_17[u_8])
        orfind u_7 = ri_7 <= qCPU suchthat defined(x_O_2[ri_7], r_18[ri_7]) && (x1_1 = x_O_2[ri_7]) then
          out(ch2[iH], r_18[u_7])
        else
          new r_16: hashoutput;
          out(ch2[iH], r_16)
      ) | (
        ! i_1 <= qTD
        in(c4[i_1], ());
        new rdata_other: user_data_t;
        let rdata_TD: rdata_t = rdata_f(pkgen2_1(r3_2), rdata_other) in
        let m_9: bitstring = rdata_t2bitstring(rdata_TD) in
        new r_9: enc_seed_1;
        let m1_TD: bitstring = enc_r_1(m_9, sym_key, r_9) in
        out(c5[i_1], m1_TD);
        in(c12[i_1], m2_TD: bitstring);
        let sym_injbot(tdr_t2bitstring(tdr_TD: tdr_t)) = sym_dec(m2_TD, sym_key) in
        out(c13[i_1], tdr_TD)
      ) | (
        ! i_2 <= qTDXM
        in(c6[i_2], m1_TDXM: bitstring);
        let sym_injbot(rdata_t2bitstring(rdata_TDXM: rdata_t)) = sym_dec(m1_TDXM, sym_key) in
        new tdi_TDXM: tdi_t;
        out(c6[i_2], tdi_t2bitstring(tdi_TDXM));
        in(c6[i_2], ());
        let x_O_1: bitstring = tdi_t2bitstring(tdi_TDXM) in
        find [unique] u_6 = ri_6 <= qH suchthat defined(r_16[ri_6], x1_1[ri_6]) && (x_O_1 = x1_1[ri_6]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_16[u_6], rdata_TDXM) in
          new r_29: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_29) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_30: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_30) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_5 = ri_5 <= qTDXM suchthat defined(r_17[ri_5], tdi_TDXM[ri_5]) && (tdi_TDXM = tdi_TDXM[ri_5]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17[u_5], rdata_TDXM) in
          new r_31: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_31) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_32: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_32) in
          out(c11[i_2], m4_TDXM)
        )
        orfind u_4 = ri_4 <= qCPU suchthat defined(x_O_2[ri_4], r_18[ri_4]) && (x_O_1 = x_O_2[ri_4]) then
        (
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_18[u_4], rdata_TDXM) in
          new r_33: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_33) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_34: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_34) in
          out(c11[i_2], m4_TDXM)
        )
        else
          new r_17: hashoutput;
          let rtyp_TDXM: rtyp_t = get_rtyp in
          let m_10: bitstring = arg_TDXM_CPU(rtyp_TDXM, r_17, rdata_TDXM) in
          new r_27: enc_seed_1;
          let m2_TDXM: bitstring = enc_r_1(m_10, sym_key, r_27) in
          out(c7[i_2], m2_TDXM);
          in(c10[i_2], m3_TDXM: bitstring);
          let sym_injbot(smr_t2bitstring(smr_TDXM: smr_t)) = sym_dec(m3_TDXM, sym_key) in
          let res4_TDXM: res_t = get_res in
          let tdr_TDXM: tdr_t = tdr_f(smr_TDXM, res4_TDXM, tdi_TDXM) in
          let m_11: bitstring = tdr_t2bitstring(tdr_TDXM) in
          new r_28: enc_seed_1;
          let m4_TDXM: bitstring = enc_r_1(m_11, sym_key, r_28) in
          out(c11[i_2], m4_TDXM)
      ) | (
        ! i_3 <= qCPU
        in(c8[i_3], m1_CPU: bitstring);
        let sym_injbot(arg_TDXM_CPU(rtyp_CPU: rtyp_t, tdih_CPU: hashoutput, rdata_CPU: rdata_t)) = sym_dec(m1_CPU, sym_key) in
        new tcbi_CPU: tcbi_t;
        let x_O_2: bitstring = tcbi_t2bitstring(tcbi_CPU) in
        find [unique] u_3 = ri_3 <= qH suchthat defined(r_16[ri_3], x1_1[ri_3]) && (x_O_2 = x1_1[ri_3]) then
        (
          new res2_CPU_2: res_t;
          new res1_CPU_2: res_t;
          new csvn_CPU_2: csvn_t;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU_2, csvn_CPU_2, r_16[u_3], tdih_CPU, rdata_CPU, res2_CPU_2) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU_2, csvn_CPU_2, r_16[u_3], tdih_CPU, rdata_CPU, res2_CPU_2, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_21: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_21) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_22: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_22) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_2 = ri_2 <= qTDXM suchthat defined(x_O_1[ri_2], r_17[ri_2]) && (x_O_2 = x_O_1[ri_2]) then
        (
          new res2_CPU_3: res_t;
          new res1_CPU_3: res_t;
          new csvn_CPU_3: csvn_t;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU_3, csvn_CPU_3, r_17[u_2], tdih_CPU, rdata_CPU, res2_CPU_3) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU_3, csvn_CPU_3, r_17[u_2], tdih_CPU, rdata_CPU, res2_CPU_3, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_23: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_23) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_24: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_24) in
          out(c17[i_3], m4_CPU)
        )
        orfind u_1 = ri_1 <= qCPU suchthat defined(r_18[ri_1], tcbi_CPU[ri_1]) && (tcbi_CPU = tcbi_CPU[ri_1]) then
        (
          new res2_CPU_4: res_t;
          new res1_CPU_4: res_t;
          new csvn_CPU_4: csvn_t;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU_4, csvn_CPU_4, r_18[u_1], tdih_CPU, rdata_CPU, res2_CPU_4) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU_4, csvn_CPU_4, r_18[u_1], tdih_CPU, rdata_CPU, res2_CPU_4, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_25: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_25) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_26: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_26) in
          out(c17[i_3], m4_CPU)
        )
        else
          new r_18: hashoutput;
          new res2_CPU_1: res_t;
          new res1_CPU_1: res_t;
          new csvn_CPU_1: csvn_t;
          let rms_without_mac_CPU: rms_without_mac_t = rms_without_mac_f(rtyp_CPU, res1_CPU_1, csvn_CPU_1, r_18, tdih_CPU, rdata_CPU, res2_CPU_1) in
          let x_2: bitstring = rms_without_mac_t2bitstring(rms_without_mac_CPU) in
          let ma2: macres_t = mac'(x_2, mkey) in
          let rms_CPU: rms_t = rms_f(rms_without_mac_CPU, ma2) in
          let smr_CPU: smr_t = smr_f(rms_CPU, tcbi_CPU) in
          event CPUsentSMR(rtyp_CPU, res1_CPU_1, csvn_CPU_1, r_18, tdih_CPU, rdata_CPU, res2_CPU_1, ma2, tcbi_CPU);
          let m_12: bitstring = smr_t2bitstring(smr_CPU) in
          new r_19: enc_seed_1;
          let m2_CPU: bitstring = enc_r_1(m_12, sym_key, r_19) in
          out(c9[i_3], m2_CPU);
          in(c16[i_3], m3_CPU: bitstring);
          let sym_injbot(rms_t2bitstring(rms_QE_to_CPU: rms_t)) = sym_dec(m3_CPU, sym_key) in
          let rms_f(rms_without_mac_QE_to_CPU: rms_without_mac_t, mac_QE_to_CPU: macres_t) = rms_QE_to_CPU in
          find u = ri <= qCPU suchthat defined(ma2[ri], rms_without_mac_CPU[ri]) && (rms_without_mac_QE_to_CPU = rms_without_mac_CPU[ri]) && (mac_QE_to_CPU = ma2[ri]) then
          let resOfMac: bool = true in
          let m_13: bitstring = bool2bitstring(resOfMac) in
          new r_20: enc_seed_1;
          let m4_CPU: bitstring = enc_r_1(m_13, sym_key, r_20) in
          out(c17[i_3], m4_CPU)
      ) | (
        ! i_4 <= qQE
        in(c14[i_4], tdr_QE: tdr_t);
        let tdr_f(smr_QE: smr_t, res4_QE: res_t, tdi_QE: tdi_t) = tdr_QE in
        let smr_f(rms_QE: rms_t, tcbi_QE: tcbi_t) = smr_QE in
        let rms_f(rms_without_mac_QE: rms_without_mac_t, macres_QE: macres_t) = rms_QE in
        let rms_without_mac_f(rtyp_QE: rtyp_t, res1_QE: res_t, csvn_QE: csvn_t, tcbh_QE: hashoutput, tdih_QE: hashoutput, rdata_QE: rdata_t, res2_QE: res_t) = rms_without_mac_QE in
        let m_14: bitstring = rms_t2bitstring(rms_QE) in
        new r_14: enc_seed_1;
        let m1_QE: bitstring = enc_r_1(m_14, sym_key, r_14) in
        out(c15[i_4], m1_QE);
        in(c18[i_4], m2_QE: bitstring);
        let sym_injbot(bool2bitstring(resOfMac_QE: bool)) = sym_dec(m2_QE, sym_key) in
        if resOfMac_QE then
        new r3_5: enc_seed;
        let m1: bitstring = enc_r2(Zkey1, pkgen2_1(r2_3), r3_5) in
        out(c19[i_4], m1)
      ))

Adv[Game 1: event(QEaccepted2_14(x1, x2)) ==> event(TDXMsentTDR_8(x1, x2))] <= Penccoll + (qChallenger + qQE) * Penc(time_1, 0) + Adv[Game 11: event(QEaccepted2_14(x1, x2)) ==> event(TDXMsentTDR_8(x1, x2))]
Adv[Game 11: event(QEaccepted2_14(x1, x2)) ==> event(TDXMsentTDR_8(x1, x2))] <= 0
RESULT Proved event(QEaccepted2_14(x1, x2)) ==> event(TDXMsentTDR_8(x1, x2)) up to probability Penccoll + (qChallenger + qQE) * Penc(time_1, 0)
Adv[Game 1: event(eve_QE(x1, x2, x3, x4, x5, x6, x7)) ==> event(CPUsentSMR(x1, x2, x3, x4, x5, x6, x7, x8, x9))] <= Penccoll + (qChallenger + qQE) * Penc(time_1, 0) + Adv[Game 11: event(eve_QE(x1, x2, x3, x4, x5, x6, x7)) ==> event(CPUsentSMR(x1, x2, x3, x4, x5, x6, x7, x8, x9))]
Adv[Game 11: event(eve_QE(x1, x2, x3, x4, x5, x6, x7)) ==> event(CPUsentSMR(x1, x2, x3, x4, x5, x6, x7, x8, x9))] <= 0
RESULT Proved event(eve_QE(x1, x2, x3, x4, x5, x6, x7)) ==> event(CPUsentSMR(x1, x2, x3, x4, x5, x6, x7, x8, x9)) up to probability Penccoll + (qChallenger + qQE) * Penc(time_1, 0)
RESULT time_1 = time(context for game 5) + time + (-1 + qChallenger + qQE) * time(enc_r, max(maxlength(game 5: m_15), maxlength(game 5: m_8)))
RESULT time(context for game 5) = time(spkgen) + time(sskgen) + time(pkgen) + time(skgen) + qChallenger * time(dec, maxlength(game 5: m1_Ch)) + qChallenger * time(let injbot, length(quote_t2bitstring)) + qChallenger * time(let quote_t2bitstring) + qChallenger * time(let quote_f) + qChallenger * time(verify, length(tdr_without_mac_t2bitstring)) + (qChallenger + qQE) * time(tdr_without_mac_t2bitstring) + qChallenger * time(let tdr_without_mac_f) + qChallenger * time(let smr_without_mac_f) + (qChallenger + qQE) * time(let rms_without_mac_f) + qChallenger * time(let rdata_f) + qChallenger * time(([1,qChallenger])) + qChallenger * time(key2bitstring) + qH * time(hash, maxlength(game 5: x1_1)) + qTD * time(rdata_f) + qTD * time(rdata_t2bitstring) + qTD * time(enc_r_1, maxlength(game 5: m_9)) + qTD * time(sym_dec, maxlength(game 5: m2_TD)) + qTD * time(let sym_injbot, length(tdr_t2bitstring)) + qTD * time(let tdr_t2bitstring) + qTDXM * time(sym_dec, maxlength(game 5: m1_TDXM)) + qTDXM * time(let sym_injbot, length(rdata_t2bitstring)) + qTDXM * time(let rdata_t2bitstring) + qTDXM * time(hash, length(tdi_t2bitstring)) + 2 * qTDXM * time(tdi_t2bitstring) + qTDXM * time(arg_TDXM_CPU) + qTDXM * time(enc_r_1, maxlength(game 5: m_10)) + qTDXM * time(sym_dec, maxlength(game 5: m3_TDXM)) + qTDXM * time(let sym_injbot, length(smr_t2bitstring)) + qTDXM * time(let smr_t2bitstring) + qTDXM * time(tdr_f) + qTDXM * time(([1,qTDXM])) + qTDXM * time(tdr_t2bitstring) + qTDXM * time(enc_r_1, maxlength(game 5: m_11)) + qCPU * time(sym_dec, maxlength(game 5: m1_CPU)) + qCPU * time(let sym_injbot, length(arg_TDXM_CPU)) + qCPU * time(let arg_TDXM_CPU) + qCPU * time(hash, length(tcbi_t2bitstring)) + qCPU * time(tcbi_t2bitstring) + qCPU * time(rms_without_mac_f) + qCPU * time(mac, length(rms_without_mac_t2bitstring)) + qCPU * time(rms_f) + qCPU * time(smr_f) + qCPU * time(([1,qCPU])) + qCPU * time(smr_t2bitstring) + qCPU * time(enc_r_1, maxlength(game 5: m_12)) + qCPU * time(sym_dec, maxlength(game 5: m3_CPU)) + qCPU * time(let sym_injbot, length(rms_t2bitstring)) + qCPU * time(let rms_t2bitstring) + (qCPU + qQE) * time(let rms_f) + qCPU * time(check, length(rms_without_mac_t2bitstring)) + 2 * qCPU * time(rms_without_mac_t2bitstring) + qCPU * time(bool2bitstring) + qCPU * time(enc_r_1, maxlength(game 5: m_13)) + qQE * time(let tdr_f) + qQE * time(let smr_f) + qQE * time(rms_t2bitstring) + qQE * time(enc_r_1, maxlength(game 5: m_14)) + qQE * time(sym_dec, maxlength(game 5: m2_QE)) + qQE * time(let sym_injbot, length(bool2bitstring)) + qQE * time(let bool2bitstring) + qQE * time(smr_without_mac_f) + qQE * time(tdr_without_mac_f) + qQE * time(sign, length(tdr_without_mac_t2bitstring)) + qQE * time(quote_f) + qQE * time(quote_t2bitstring)
RESULT time(context for game 11) = time(spkgen) + time(sskgen) + time(pkgen) + time(skgen) + qChallenger * time(dec, maxlength(game 11: m1_Ch)) + qChallenger * time(let injbot, length(quote_t2bitstring)) + qChallenger * time(let quote_t2bitstring) + qChallenger * time(let quote_f) + qChallenger * time(verify, length(tdr_without_mac_t2bitstring)) + (qChallenger + qQE) * time(tdr_without_mac_t2bitstring) + qChallenger * time(let tdr_without_mac_f) + qChallenger * time(let smr_without_mac_f) + (qChallenger + qQE) * time(let rms_without_mac_f) + qChallenger * time(let rdata_f) + qChallenger * time(([1,qChallenger])) + (qChallenger + qTD) * time(pkgen2_1) + qChallenger * time(enc_r2, length(Zkey1)) + qChallenger * time(key2bitstring) + qChallenger * time(enc_r, maxlength(game 11: m_8)) + qH * time(hash, maxlength(game 11: x1_1)) + qTD * time(rdata_f) + qTD * time(rdata_t2bitstring) + qTD * time(enc_r_1, maxlength(game 11: m_9)) + qTD * time(sym_dec, maxlength(game 11: m2_TD)) + qTD * time(let sym_injbot, length(tdr_t2bitstring)) + qTD * time(let tdr_t2bitstring) + qTDXM * time(sym_dec, maxlength(game 11: m1_TDXM)) + qTDXM * time(let sym_injbot, length(rdata_t2bitstring)) + qTDXM * time(let rdata_t2bitstring) + qTDXM * time(hash, length(tdi_t2bitstring)) + 2 * qTDXM * time(tdi_t2bitstring) + qTDXM * time(arg_TDXM_CPU) + qTDXM * time(enc_r_1, maxlength(game 11: m_10)) + qTDXM * time(sym_dec, maxlength(game 11: m3_TDXM)) + qTDXM * time(let sym_injbot, length(smr_t2bitstring)) + qTDXM * time(let smr_t2bitstring) + qTDXM * time(tdr_f) + qTDXM * time(([1,qTDXM])) + qTDXM * time(tdr_t2bitstring) + qTDXM * time(enc_r_1, maxlength(game 11: m_11)) + qCPU * time(sym_dec, maxlength(game 11: m1_CPU)) + qCPU * time(let sym_injbot, length(arg_TDXM_CPU)) + qCPU * time(let arg_TDXM_CPU) + qCPU * time(hash, length(tcbi_t2bitstring)) + qCPU * time(tcbi_t2bitstring) + qCPU * time(rms_without_mac_f) + qCPU * time(rms_f) + qCPU * time(smr_f) + qCPU * time(([1,qCPU])) + qCPU * time(smr_t2bitstring) + qCPU * time(enc_r_1, maxlength(game 11: m_12)) + qCPU * time(sym_dec, maxlength(game 11: m3_CPU)) + qCPU * time(let sym_injbot, length(rms_t2bitstring)) + qCPU * time(let rms_t2bitstring) + (qCPU + qQE) * time(let rms_f) + 2 * qCPU * time(rms_without_mac_t2bitstring) + qCPU * time(bool2bitstring) + qCPU * time(enc_r_1, maxlength(game 11: m_13)) + qQE * time(let tdr_f) + qQE * time(let smr_f) + qQE * time(rms_t2bitstring) + qQE * time(enc_r_1, maxlength(game 11: m_14)) + qQE * time(sym_dec, maxlength(game 11: m2_QE)) + qQE * time(let sym_injbot, length(bool2bitstring)) + qQE * time(let bool2bitstring) + qQE * time(smr_without_mac_f) + qQE * time(tdr_without_mac_f) + qQE * time(sign, length(tdr_without_mac_t2bitstring)) + qQE * time(quote_f) + qQE * time(quote_t2bitstring) + qQE * time(enc_r, maxlength(game 11: m_15))
RESULT time(context for game 24) = time(spkgen) + time(sskgen) + qChallenger * time(let injbot, length(quote_t2bitstring)) + qChallenger * time(let quote_t2bitstring) + qChallenger * time(let quote_f) + qChallenger * time(verify, length(tdr_without_mac_t2bitstring)) + (qChallenger + qQE) * time(tdr_without_mac_t2bitstring) + qChallenger * time(let tdr_without_mac_f) + qChallenger * time(let smr_without_mac_f) + (qChallenger + qQE) * time(let rms_without_mac_f) + qChallenger * time(let rdata_f) + qChallenger * time(([1,qChallenger])) + (qChallenger + qTD) * time(pkgen2_1) + qChallenger * time(enc_r2, length(Zkey1)) + qChallenger * time(key2bitstring) + qH * qH * time(= bitstring, maxlength(game 24: x1_1), maxlength(game 24: x1_1)) + qH * qTDXM * time(= bitstring, maxlength(game 24: x1_1), maxlength(game 24: x_O_1)) + qH * qCPU * time(= bitstring, maxlength(game 24: x1_1), maxlength(game 24: x_O_2)) + qTD * time(rdata_f) + qTD * time(rdata_t2bitstring) + qTD * time(enc_r_1, maxlength(game 24: m_9)) + qTD * time(sym_dec, maxlength(game 24: m2_TD)) + qTD * time(let sym_injbot, length(tdr_t2bitstring)) + qTD * time(let tdr_t2bitstring) + qTDXM * time(sym_dec, maxlength(game 24: m1_TDXM)) + qTDXM * time(let sym_injbot, length(rdata_t2bitstring)) + qTDXM * time(let rdata_t2bitstring) + 2 * qTDXM * time(tdi_t2bitstring) + qTDXM * qH * time(= bitstring, maxlength(game 24: x_O_1), maxlength(game 24: x1_1)) + qTDXM * qCPU * time(= bitstring, maxlength(game 24: x_O_1), maxlength(game 24: x_O_2)) + qTDXM * time(arg_TDXM_CPU) + qTDXM * time(enc_r_1, maxlength(game 24: m_10)) + qTDXM * time(sym_dec, maxlength(game 24: m3_TDXM)) + qTDXM * time(let sym_injbot, length(smr_t2bitstring)) + qTDXM * time(let smr_t2bitstring) + qTDXM * time(tdr_f) + qTDXM * time(tdr_t2bitstring) + qTDXM * time(enc_r_1, maxlength(game 24: m_11)) + qCPU * time(sym_dec, maxlength(game 24: m1_CPU)) + qCPU * time(let sym_injbot, length(arg_TDXM_CPU)) + qCPU * time(let arg_TDXM_CPU) + qCPU * time(tcbi_t2bitstring) + qCPU * qH * time(= bitstring, maxlength(game 24: x_O_2), maxlength(game 24: x1_1)) + qCPU * qTDXM * time(= bitstring, maxlength(game 24: x_O_2), maxlength(game 24: x_O_1)) + qCPU * time(rms_without_mac_f) + qCPU * time(rms_without_mac_t2bitstring) + qCPU * time(mac', maxlength(game 24: x_2)) + qCPU * time(rms_f) + qCPU * time(smr_f) + qCPU * time(([1,qCPU])) + qCPU * time(smr_t2bitstring) + qCPU * time(enc_r_1, maxlength(game 24: m_12)) + qCPU * time(sym_dec, maxlength(game 24: m3_CPU)) + qCPU * time(let sym_injbot, length(rms_t2bitstring)) + qCPU * time(let rms_t2bitstring) + (qCPU + qQE) * time(let rms_f) + qCPU * time(bool2bitstring) + qCPU * time(enc_r_1, maxlength(game 24: m_13)) + qQE * time(let tdr_f) + qQE * time(let smr_f) + qQE * time(rms_t2bitstring) + qQE * time(enc_r_1, maxlength(game 24: m_14)) + qQE * time(sym_dec, maxlength(game 24: m2_QE)) + qQE * time(let sym_injbot, length(bool2bitstring)) + qQE * time(let bool2bitstring) + qQE * time(smr_without_mac_f) + qQE * time(tdr_without_mac_f) + qQE * time(sign, length(tdr_without_mac_t2bitstring)) + qQE * time(quote_f) + qQE * time(quote_t2bitstring)
RESULT time(context for game 31) = qChallenger * qChallenger * time(= bitstring, maxlength(game 31: m1_Ch), maxlength(game 31: m2_2)) + qChallenger * qQE * time(= bitstring, maxlength(game 31: m1_Ch), maxlength(game 31: m1)) + qChallenger * time(dec2, maxlength(game 31: m1_Ch)) + qChallenger * time(skgen2_1) + qChallenger * time(let injbot, length(quote_t2bitstring)) + qChallenger * time(let quote_t2bitstring) + qChallenger * time(let quote_f) + qChallenger * time(tdr_without_mac_t2bitstring) + qChallenger * time(let tdr_without_mac_f) + qChallenger * time(let smr_without_mac_f) + (qChallenger + qQE) * time(let rms_without_mac_f) + qChallenger * time(let rdata_f) + qChallenger * time(([1,qChallenger])) + (2 * qChallenger + qTD + qQE) * time(pkgen2_1) + (qChallenger + qQE) * time(enc_r2, length(Zkey1)) + 2 * qChallenger * time(key2bitstring) + qChallenger * time(enc_r, maxlength(game 31: m_8)) + qH * qH * time(= bitstring, maxlength(game 31: x1_1), maxlength(game 31: x1_1)) + qH * qTDXM * time(= bitstring, maxlength(game 31: x1_1), maxlength(game 31: x_O_1)) + qH * qCPU * time(= bitstring, maxlength(game 31: x1_1), maxlength(game 31: x_O_2)) + qTD * time(rdata_f) + qTD * time(rdata_t2bitstring) + qTD * time(enc_r_1, maxlength(game 31: m_9)) + qTD * time(sym_dec, maxlength(game 31: m2_TD)) + qTD * time(let sym_injbot, length(tdr_t2bitstring)) + qTD * time(let tdr_t2bitstring) + qTDXM * time(sym_dec, maxlength(game 31: m1_TDXM)) + qTDXM * time(let sym_injbot, length(rdata_t2bitstring)) + qTDXM * time(let rdata_t2bitstring) + 2 * qTDXM * time(tdi_t2bitstring) + qTDXM * qH * time(= bitstring, maxlength(game 31: x_O_1), maxlength(game 31: x1_1)) + qTDXM * qCPU * time(= bitstring, maxlength(game 31: x_O_1), maxlength(game 31: x_O_2)) + qTDXM * time(arg_TDXM_CPU) + qTDXM * time(enc_r_1, maxlength(game 31: m_10)) + qTDXM * time(sym_dec, maxlength(game 31: m3_TDXM)) + qTDXM * time(let sym_injbot, length(smr_t2bitstring)) + qTDXM * time(let smr_t2bitstring) + qTDXM * time(tdr_f) + qTDXM * time(tdr_t2bitstring) + qTDXM * time(enc_r_1, maxlength(game 31: m_11)) + qCPU * time(sym_dec, maxlength(game 31: m1_CPU)) + qCPU * time(let sym_injbot, length(arg_TDXM_CPU)) + qCPU * time(let arg_TDXM_CPU) + qCPU * time(tcbi_t2bitstring) + qCPU * qH * time(= bitstring, maxlength(game 31: x_O_2), maxlength(game 31: x1_1)) + qCPU * qTDXM * time(= bitstring, maxlength(game 31: x_O_2), maxlength(game 31: x_O_1)) + qCPU * time(rms_without_mac_f) + qCPU * time(rms_without_mac_t2bitstring) + qCPU * time(mac', maxlength(game 31: x_2)) + qCPU * time(rms_f) + qCPU * time(smr_f) + qCPU * time(([1,qCPU])) + qCPU * time(smr_t2bitstring) + qCPU * time(enc_r_1, maxlength(game 31: m_12)) + qCPU * time(sym_dec, maxlength(game 31: m3_CPU)) + qCPU * time(let sym_injbot, length(rms_t2bitstring)) + qCPU * time(let rms_t2bitstring) + (qCPU + qQE) * time(let rms_f) + qCPU * time(bool2bitstring) + qCPU * time(enc_r_1, maxlength(game 31: m_13)) + qQE * time(let tdr_f) + qQE * time(let smr_f) + qQE * time(rms_t2bitstring) + qQE * time(enc_r_1, maxlength(game 31: m_14)) + qQE * time(sym_dec, maxlength(game 31: m2_QE)) + qQE * time(let sym_injbot, length(bool2bitstring)) + qQE * time(let bool2bitstring)
RESULT Could not prove secrecy of session_key; event(QuoteVerified(x1, x2, x3, x4, x5, x6, x7)) ==> event(CPUsentSMR(x1, x2, x3, x4, x5, x6, x7, x8, x9)); event(QuoteVerified(x1, x2, x3, x4, x5, x6, x7)) ==> event(eve_QE(x1, x2, x3, x4, x5, x6, x7)).
