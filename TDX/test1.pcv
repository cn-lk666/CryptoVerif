(*
    TDX protocol
    six entities: Challenger, CPU, TDXM, TD, VMM, QE.
    Steps:
    1. Challenger->TD: Attestation requirements
    2. TD generate rdata and TD->TDXM: request TD report
    3.  Assemble tdi from TDCS and compute its hash tdih
    4. TDXM->CPU: rtyp, tdi, rdata and request SEAMREPORT
    5. CPU genarate SEAMREPORT
    6. CPU->TDXM: SEAMREPORT
    7. TDXM create TDREPORT
    8. TDXM->TD: TDREPORT
    9. TD->VMM: TDREPORT and request Quote
    10. VMM->QE: TDREPORT
    11. QE check hashes
    12. QE ->CPU: report mac struct
    13. CPU verify the MAC in the report
    14. CPU->QE: Verification result
    15. QE sign to form Quote
    16. QE->VMM: Quote
    17. VMM->TD: TD: Quote
    18. TD->Challenger: Quote
*)


(*replication numbers*)
param qChallenger, qTD, qTDXM, qCPU, qQE, qIAS.


proof{
    crypto ind_cca2(enc) r3;
    auto
}
(*
    bounded means that the type is a set of bitstrings of bounded length or perhaps ⊥. In other
        words, the type is a finite subset of bitstrings plus ⊥.
    fixed means that the type is the set of all bitstrings of a certain length n. In particular, the
        type is a finite set, so fixed implies bounded.
    large: By default, large means that the type T is large enough so that all collisions with ran-
        dom elements of T can be eliminated
*)
(*These three types are used in the macro IND_CCA2_public_key_enc and UF_CMA_det_signature*)
type skey [bounded].
type pkey [bounded].

type keypair [bounded].
type keyseed [large,fixed].
fun kp(pkey,skey):keypair [data].
type signature [bounded].
type sskey [bounded].
type spkey [bounded].
type skeypair [bounded].
type skeyseed [large,fixed].
fun skp(spkey,sskey):skeypair [data].
type macres_t [bounded].
(*channel name*)
channel c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14,c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, c26, c27, c28, c29, c30, c31, c32, c33, start.

(*session key*)
type key [large,fixed].
type hashoutput [large, fixed].

(* Hash *)
expand ROM_hash_large(
    key,                 (**)
    bitstring,         (*hashinput is the type of the input of the hash function.*)
    hashoutput,        (*hashoutput is the type of the output of the hash function, 
                                    must be bounded or nonuniform (typically fixed)*)
                                (*如果这里这里说了fixed，那么我们还可以用bitstring吗?还是定义一个type*)    
    hash,               (*hash (key ,hashinput ) : hashoutput is the hash function.*)
    hashoracle,  (*hashoracle is a process that allows the adversary to call the hash function*)
    qH                      (*qH is the number of queries to the hash oracle*)
).

(* MAC *)
proba Pmac.
expand SUF_CMA_det_mac(
    key,            (*mkey is the type of keys, must be bounded*)
    bitstring , (*macinput is the type of inputs of MACs*)
    macres_t,  (*macres_t is the type of MACs.*)
    mac,          (*mac(macinput ,mkey ) : macres_t is the MAC function.*)
    check,      (*check (macinput ,mkey ,macres_t ) : bool is the verification function*)
    Pmac        (*Pmac(t,N,N′,Nu′,l) is the probability of breaking the SUF-CMA property in time t for one key,
                N MAC queries, N′ verification queries modified by the transformation and Nu verification queries
                left unchanged by the transformation for messages of length at most l.*)
).


(* Signature *)
proba Psign.
proba Psigncoll.
expand UF_CMA_det_signature(
        skeyseed,
        spkey,                  (*pkey is the type of public keys, must be bounded.*)
        sskey,                  (*skey is the type of secret keys, must be bounded.*)
        bitstring,            (*signinput*)
        signature,            (*signature*)
       	sskgen,                  (*skgen(keyseed ) : skey is the secret key generation function.*)
        spkgen,                 (*pkgen (keyseed ) : pkey is the public key generation function.*)
        sign,                     (*sign (signinput ,skey ) : signature is the signature function.*)
        verify,                  (*check (signinput ,pkey ,signature) : bool is the verification function.*)
        Psign,                  (*Psign (t,N,l) is the probability of breaking the UF-CMA property 
                                        in time t, for one key, N signature queries with messages of length at most l.*)
        Psigncoll           (*Psigncoll is the probability of collision between independently generated keys.*)
).


(* Asymmetric encryption *)
proba Penc.
proba Penccoll.
expand IND_CCA2_public_key_enc(
        keyseed, 
        pkey,                       (*pkey is the type of public keys, must be bounded*)
        skey,                        (*skey is the type of secret keys, must be bounded*) 
        bitstring,                (*cleartext is the type of cleartexts.*)
        bitstring,             (*ciphertext is the type of ciphertexts.*)
        skgen,                      (*skgen(keyseed ) : skey is the secret key generation function.*)
        pkgen,                      (*pkgen (keyseed ) : pkey is the public key generation function.*)
        enc,                            (*enc(cleartext ,pkey ) : ciphertext is the encryption function. 
                                                Internally, it generates random coins, so that it is probabilistic*)
        dec,                            (*dec(ciphertext ,skey ) : bitstringbot is the decryption function; it returns bottom 
                                                when decryption fails*)
        injbot,                         (*injbot (cleartext ) : bitstringbot is the natural injection from cleartext to bitstringbot*)
        Z,                                  (*Z (cleartext ) : cleartext is the function that returns for each cleartext a cleartext of 
                                                the same length consisting only of zeroes.*)
        Penc,                           (*Penc(t,N) is the probability of breaking the IND-CCA2 property
                                                (indistinguishable under adaptive chosen ciphertext attacks)
                                                in time t for one key and N decryption queries.*)
        Penccoll                    (*Penccoll is the probability of collision between independently generated keys.*)
).



letfun kgen3() =  r3 <-R keyseed;  kp (pkgen(r3) ,skgen(r3) ).
letfun kgen2() =  r2 <-R keyseed;  kp (pkgen(r2) ,skgen(r2) ).
letfun kgen_s1() =  r1 <-R skeyseed;  skp (spkgen(r1) ,sskgen(r1) ).


type rtyp_t[bounded].
type res_t[fixed].
type csvn_t[fixed].
type user_data_t [bounded, nonuniform].
type tcbi_t[fixed].
type tdi_t[fixed].

type rdata_t[bounded].
type rms_without_mac_t[bounded].
type rms_t[bounded].
type smr_t[bounded].
type smr_without_mac_t[bounded].
type tdr_t[bounded].
type tdr_without_mac_t[bounded].
type quote_t[bounded].

type hostname[bounded].
set diffConstants = false.
const hostname_TD:hostname.
const hostname_TDXM:hostname.
const hostname_CPU:hostname.
const hostname_QE:hostname.
const hostname_Ch:hostname.
const hostname_IAS:hostname.

set casesInCorresp = false.
    (* Distinguishing cases in the proof of correspondences
       is too slow with the "unique channel id" property,
       and not necessary *)

fun get_rtyp():rtyp_t.
fun get_tdi():tdi_t.
fun get_tcbi():tcbi_t.
fun get_csvn():csvn_t.
fun get_res():res_t.

fun rdata_f(pkey, user_data_t):rdata_t[data].
fun rms_without_mac_f(rtyp_t, res_t, csvn_t, hashoutput, hashoutput, rdata_t, res_t): rms_without_mac_t[data].
fun rms_f(rms_without_mac_t, macres_t):rms_t[data].
fun smr_f(rms_t, tcbi_t):smr_t[data].
fun smr_without_mac_f(rms_without_mac_t, tcbi_t):smr_without_mac_t[data].
fun tdr_f(smr_t, res_t, tdi_t):tdr_t[data].
fun tdr_without_mac_f(smr_without_mac_t, res_t, tdi_t):tdr_without_mac_t[data].

fun quote_f(tdr_without_mac_t, signature):quote_t[data].
fun tdi_t2bitstring(tdi_t): bitstring [data].
fun tcbi_t2bitstring(tcbi_t):bitstring[data].
fun rms_without_mac_t2bitstring(rms_without_mac_t):bitstring[data].
fun key2bitstring(key):bitstring[data].
fun tdr_without_mac_t2bitstring(tdr_without_mac_t):bitstring[data].
fun quote_t2bitstring(quote_t):bitstring[data].
fun tdr_without_mac_t2bitstring(tdr_without_mac_t):bitstring[data].
fun Ch_TD(bitstring):bitstring[data].
fun QE_Ch(bitstring):bitstring[data].

table TD_TDXM_2(hostname, hostname, rdata_t).
implementation table TD_TDXM_2="TD_TDXM_2".
table TDXM_CPU_4(hostname, hostname, rtyp_t, hashoutput, rdata_t).
implementation table TDXM_CPU_4="TDXM_CPU_4".
table CPU_TDXM_6(hostname, hostname, smr_t).
implementation table CPU_TDXM_6="CPU_TDXM_6".
table TDXM_TD_8(hostname, hostname, tdr_t).
implementation table TDXM_TD_8="TDXM_TD_8".
table QE_CPU_12(hostname, hostname, rms_t).
implementation table QE_CPU_12="QE_CPU_12".
table CPU_QE_14(hostname, hostname, bool).
implementation table CPU_QE_14="CPU_QE_14".
table Ch_IAS_19(hostname, hostname, bitstring).
implementation table Ch_IAS_19="Ch_IAS_19".
table IAS_Ch_20(hostname, hostname, pkey).
implementation table IAS_Ch_20="IAS_Ch_20".

const Zkey : bitstring.
equation forall y:bitstring;
	Z(y) = Zkey.

implementation
    type skeyseed=64;
    type keyseed=64;
    type key = 128;
    type user_data_t=1024;
    type macres_t = "string";
    fun tdi_t2bitstring="tdi_t2bitstring" [inverse = "bitstring2tdi_t"];
    fun tcbi_t2bitstring="tdi_t2bitstring" [inverse = "bitstring2tcbi_t"]; 
    type pkey="pkey" [serial = "pkey_to","pkey_from"];
    type skey="skey" [serial = "skey_to","skey_from"];                  
    fun pkgen = "(pk_kgen 1024)";
    fun skgen = "(pk_kgen 1024)";
    fun kgen_s1 = "(pk_kgen 1024)";
    fun kgen2 = "(pk_kgen 1024)";
    fun kgen3 = "(pk_kgen 1024)";

    fun kp="id" [inverse="id"];
    fun skp="id" [inverse="id"];

    fun hostname_TD="get_TD";
    fun hostname_TDXM="get_TDXM";
    fun hostname_CPU="get_CPU";
    fun hostname_QE="get_QE";
    fun enc="pk_enc";
    fun dec="pk_dec";
    fun sign="(rsassa_pss_sign 8)";
    fun injbot="injbot" [inverse =  "injbot_inv"];
    fun hash = "Ssh_crypto.hash";
    fun get_rtyp="get_rtyp";
    fun get_tdi="get_tdi";
    fun get_csvn="get_csvn";
    fun get_tcbi="get_tcbi";
    fun get_res="get_res";
    fun rdata_f="rdata_f"[inverse = "inv_rdata_f"];
    type signature="string";
    type hashoutput=160;
    type hostname="string" [serial = "id", "id"];
    type rdata_t="string" [serial = "id", "id"];
    type tdr_t="string" [serial = "id", "id"];
    type rtyp_t="string" [serial = "id", "id"];
    type smr_t="string" [serial = "id", "id"];
    type spkey="pkey" [serial = "pkey_to","pkey_from"];
    type sskey="skey" [serial = "skey_to","skey_from"].


query secret session_key.


let TD(pk_TD:pkey, sk_TD:skey)=

    TDX_TD{
        in(c4, ());
        new rdata_other:user_data_t;
        let rdata_TD=rdata_f(pk_TD, rdata_other) in
        (*
        insert TD_TDXM_2(hostname_TD, hostname_TDXM, rdata_TD);
        *)
        out(c5, ());
        in(c12, ());
        (*
        get TDXM_TD_8(x,y,tdr) suchthat x=hostname_TDXM && y=hostname_TD in
        *)
        out(c13, tdr);
        (*in(c24, m1:bitstring);
        out(c25, m1);*)
        in(c32, Ch_TD(m2));
        let injbot(session_key1)=dec(m2, sk_TD) in
        out(c33,())
    }.

let TDXM(hk_TDXM:key)=
    TDX_TDXM{
        in(c6, ());
        (*
        
        get TD_TDXM_2(x, y, rdata_TDXM) suchthat x=hostname_TD && y=hostname_TDXM in
        *)
        let tdi=get_tdi() in
        let rtyp=get_rtyp() in
        let tdih=hash(hk_TDXM, tdi_t2bitstring(tdi)) in
        
        (*
        
        insert TDXM_CPU_4(hostname_TDXM, hostname_CPU, rtyp, tdih, rdata_TDXM);
        *)
        
        out(c7, ());
        in(c10, ());
        (*
        get CPU_TDXM_6(x1,y1,smr) suchthat x1=hostname_CPU && y1=hostname_TDXM in
        
        *)
        let res4=get_res() in
        let tdr=tdr_f(smr, res4, tdi) in

        (*
        insert TDXM_TD_8(hostname_TDXM, hostname_TD, tdr);
        
        *)
        out(c11, ())

    }.

let CPU(hk_CPU:key, mkey_CPU:key)=
    TDX_CPU{
        in(c8, ());
        let csvn =get_csvn() in
(*

        get TDXM_CPU_4(x,y, rtyp, tdih, rdata) suchthat x=hostname_TDXM && y=hostname_CPU in
*)

        let res1=get_res() in
        let res2=get_res() in
        let tcbi=get_tcbi() in
        let tcbh=hash(hk_CPU, tcbi_t2bitstring(tcbi)) in
        let rms_without_mac=rms_without_mac_f(rtyp, res1, csvn, tcbh, tdih, rdata, res2 ) in
        let mac_CPU=mac(rms_without_mac_t2bitstring(rms_without_mac), mkey_CPU) in
        let rms=rms_f(rms_without_mac, mac_CPU) in
        let smr=smr_f(rms, tcbi) in
        (*
        
        insert CPU_TDXM_6(hostname_CPU, hostname_TDXM, smr);
        *)
        out(c9, ());
        in(c18, ());
        (*
        
        get QE_CPU_12(x1, y1, rms1) suchthat x1=hostname_QE && y1=hostname_CPU in
        *)

        let rms_f(rms_without_mac1, mac_CPU1)=rms1 in
        let resOfMac=check(rms_without_mac_t2bitstring(rms_without_mac1), mkey_CPU, mac_CPU1) in
        (*
        
        insert CPU_QE_14(hostname_CPU, hostname_QE, resOfMac);
        *)
        out(c19, ())
    }.

(*
let VMM()=
    TDX_VMM{
        in(c14, (tdr:tdr_t));
        out(c15, (tdr));
        in(c22, m1:bitstring);
        out(c23, m1)
    }.
*)

let QE(hk_QE:key, ssk:sskey, pk: pkey)=
    TDX_QE{

        in(c16, (tdr:tdr_t));
        let tdr_f(smr, res4, tdi)=tdr in
        let smr_f(rms, tcbi)=smr in
        let rms_f(rms_without_mac, macres)=rms in
        let rms_without_mac_f(rtyp, res1, csvn, tcbh, tdih, rdata, res2)=rms_without_mac in
        let resOfHash=
            if(hash(hk_QE, tcbi_t2bitstring(tcbi))=tcbh && hash(hk_QE,tdi_t2bitstring( tdi))=tdih)then
                true
            else
                false
        in
        
        if(resOfHash) then
            (*
            
            insert QE_CPU_12(hostname_QE, hostname_CPU, rms);
            *)
        out(c17, ());
        in (c20, ());
        
        (*
        get CPU_QE_14(x1, y1, resOfMac) suchthat x1=hostname_CPU && y1=hostname_QE in
        
        *)
        
        if resOfMac then
            let smr_without_mac=smr_without_mac_f(rms_without_mac, tcbi) in
            let tdr_without_mac=tdr_without_mac_f(smr_without_mac, res4, tdi) in
            let sig=sign(tdr_without_mac_t2bitstring(tdr_without_mac), ssk) in
            let quote =quote_f(tdr_without_mac, sig) in
            let m1=enc(quote_t2bitstring(quote), pk) in
            out(c21, QE_Ch(m1))
        
    }.


let Challenger(spk:spkey, sk:skey)=
    in(c2, ());
    out(c3, ());
    in(c26, QE_Ch(m1));
    let injbot(quote_t2bitstring(quote))=dec(m1, sk) in
    let quote_f(tdr_without_mac, sig) =quote in
    if(verify(tdr_without_mac_t2bitstring(tdr_without_mac), spk, sig)) then(
        let tdr_without_mac_f(smr_without_mac, res4, tdi)=tdr_without_mac in
        let smr_without_mac_f(rms_without_mac, tcbi)=smr_without_mac in
        let rms_without_mac_f(rtyp, res1, csvn, tcbh, tdih, rdata, res2)=rms_without_mac in
        let rdata_f(x1, y1)=rdata in
        new session_key:key;
        let m2=enc(key2bitstring(session_key), x1) in

        out(c29, (Ch_TD(m2)))
    ).




let Application(ssk:sskey, pk:pkey) =
TDX_keygen_App[pk3>pk3, sk3>sk3, hk>hk, mkey>mkey]{
    in(c21, ());
    new r3:keyseed;
    let pk3:pkey=pkgen(r3) in
    let sk3:skey=skgen(r3) in
    new hk:key;(*key for hash*)
    new mkey:key;(*key for mac*)
    out(c22, ())
};
(
    (hashoracle(hk) ) |
    (!i<=qTD TD(pk3, sk3) ) |
    (!i<=qTDXM TDXM(hk) ) |    
    (!i<=qCPU CPU(hk, mkey) ) |
    
    (!i<=qQE QE(hk, ssk, pk) )   
).
(*
let IAS(spk:spkey, sk:skey)=
    in(c28, ());
    get Ch_IAS_19(x, y, m1) suchthat x=hostname_Ch && y=hostname_IAS in
    let injbot(quote_t2bitstring(quote))=dec(m1, sk) in
    let quote_f(tdr_without_mac, sig) =quote in
    if(verify(tdr_without_mac_t2bitstring(tdr_without_mac), spk, sig)) then(
        let tdr_without_mac_f(smr_without_mac, res4, tdi)=tdr_without_mac in
        let smr_without_mac_f(rms_without_mac, tcbi)=smr_without_mac in
        let rms_without_mac_f(rtyp, res1, csvn, tcbh, tdih, rdata, res2)=rms_without_mac in
        let rdata_f(x1, y1)=rdata in
        insert IAS_Ch_20(hostname_IAS, hostname_Ch, x1);
        out(c29, ())
    ).
*)


process
    TDX_Keygen [spk1 > spk_IAS, ssk1 > ssk_QE, pk2 > pk_QE, sk2 > sk_IAS ]{
        in(start, ());
        let skp (spk1:spkey,ssk1:sskey) = kgen_s1 () in
        let kp (pk2:pkey,sk2:skey) = kgen2 () in
        out (c1, ())
    };
	(
        (!i<= qChallenger Challenger(spk1, sk2)) | 
        (Application(ssk1, pk2)) 
    )