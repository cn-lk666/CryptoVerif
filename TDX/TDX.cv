(*
    TDX protocol
    six entities: Challenger, CPU, TDXM, TD, VMM, QE.
    Steps:
    1. Challenger->TD: Attestation requirements
    2. TD generate rdata and TD->TDXM: request TD report
    3.  Assemble tdi from TDCS and compute its hash tdih
    4. TDXM->CPU: rtyp, tdi, rdata and request SEAMREPORT
    5. CPU genarate SEAMREPORT
    6. CPU->TDXM: SEAMREPORT
    7. TDXM create TDREPORT
    8. TDXM->TD: TDREPORT
    9. TD->VMM: TDREPORT and request Quote
    10. VMM->QE: TDREPORT
    11. QE check hashes
    12. QE ->CPU: report mac struct
    13. CPU verify the MAC in the report
    14. CPU->QE: Verification result
    15. QE sign to form Quote
    16. QE->VMM: Quote
    17. VMM->TD: TD: Quote
    18. TD->Challenger: Quote
*)

(*replication numbers*)
param qChallenger, qTD, qTDXM, qCPU, qQE, qVMM.

(*
    bounded means that the type is a set of bitstrings of bounded length or perhaps ⊥. In other
        words, the type is a finite subset of bitstrings plus ⊥.
    fixed means that the type is the set of all bitstrings of a certain length n. In particular, the
        type is a finite set, so fixed implies bounded.
    large: By default, large means that the type T is large enough so that all collisions with ran-
        dom elements of T can be eliminated
*)
(*These three types are used in the macro IND_CCA2_public_key_enc and UF_CMA_det_signature*)
type keyseed [large, bounded].
type skey [bounded].
type pkey [bounded].

(*channel name*)
channel c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14,c15, c16, c17, c18, c19, c20, 
                    c21, c22, c23, c24, c25, c26, c27, c28, c29, c30, start.

type key [large,fixed].
type hashoutput [large, fixed].

expand ROM_hash_large(
    key,                 (**)
    bitstring,         (*hashinput is the type of the input of the hash function.*)
    hashoutput,        (*hashoutput is the type of the output of the hash function, 
                                    must be bounded or nonuniform (typically fixed)*)
                                (*如果这里这里说了fixed，那么我们还可以用bitstring吗?还是定义一个type*)    
    hash,               (*hash (key ,hashinput ) : hashoutput is the hash function.*)
    hashoracle,  (*hashoracle is a process that allows the adversary to call the hash function*)
    qH                      (*qH is the number of queries to the hash oracle*)
).

(* MAC *)
proba Pmac.
expand SUF_CMA_det_mac(
    key,            (*mkey is the type of keys, must be bounded*)
    bitstring , (*macinput is the type of inputs of MACs*)
    bitstring,  (*macres is the type of MACs.*)
    mac,          (*mac(macinput ,mkey ) : macres is the MAC function.*)
    check,      (*check (macinput ,mkey ,macres ) : bool is the verification function*)
    Pmac        (*Pmac(t,N,N′,Nu′,l) is the probability of breaking the SUF-CMA property in time t for one key,
                            N MAC queries, N′ verification queries modified by the transformation and Nu verification queries
                            left unchanged by the transformation for messages of length at most l.*)
).

(* Signature *)
proba Psign.
proba Psigncoll.
expand UF_CMA_det_signature(
        keyseed,
        pkey,                  (*pkey is the type of public keys, must be bounded.*)
        skey,                  (*skey is the type of secret keys, must be bounded.*)
        bitstring,            (*signinput*)
        bitstring,            (*signature*)
       	sskgen,                  (*skgen(keyseed ) : skey is the secret key generation function.*)
        spkgen,                 (*pkgen (keyseed ) : pkey is the public key generation function.*)
        sign,                     (*sign (signinput ,skey ) : signature is the signature function.*)
        verify,                  (*check (signinput ,pkey ,signature) : bool is the verification function.*)
        Psign,                  (*Psign (t,N,l) is the probability of breaking the UF-CMA property 
                                        in time t, for one key, N signature queries with messages of length at most l.*)
        Psigncoll           (*Psigncoll is the probability of collision between independently generated keys.*)
).

(* Asymmetric encryption *)
proba Penc.
proba Penccoll.
expand IND_CCA2_public_key_enc(
        keyseed, 
        pkey,                       (*pkey is the type of public keys, must be bounded*)
        skey,                        (*skey is the type of secret keys, must be bounded*) 
        bitstring,                (*cleartext is the type of cleartexts.*)
        bitstring,             (*ciphertext is the type of ciphertexts.*)
        skgen,                      (*skgen(keyseed ) : skey is the secret key generation function.*)
        pkgen,                      (*pkgen (keyseed ) : pkey is the public key generation function.*)
        enc,                            (*enc(cleartext ,pkey ) : ciphertext is the encryption function. 
                                                Internally, it generates random coins, so that it is probabilistic*)
        dec,                            (*dec(ciphertext ,skey ) : bitstringbot is the decryption function; it returns bottom 
                                                when decryption fails*)
        injbot,                         (*injbot (cleartext ) : bitstringbot is the natural injection from cleartext to bitstringbot*)
        Z,                                  (*Z (cleartext ) : cleartext is the function that returns for each cleartext a cleartext of 
                                                the same length consisting only of zeroes.*)
        Penc,                           (*Penc(t,N) is the probability of breaking the IND-CCA2 property
                                                (indistinguishable under adaptive chosen ciphertext attacks)
                                                in time t for one key and N decryption queries.*)
        Penccoll                    (*Penccoll is the probability of collision between independently generated keys.*)
).

(*Symmetric encryption*)
proba sym_Penc.
expand IND_CPA_sym_enc(
        key, 
        bitstring,      (*cleartext is the type of cleartexts.*)
        bitstring,       (*ciphertext is the type of ciphertexts.*)
        sym_enc,       (*enc(cleartext ,key ) : ciphertext is the encryption function. *)
        sym_dec,       (*dec(ciphertext ,key ) : bitstringbot is the decryption function; 
                                      it returns bottom when decryption fails.*)
        sym_injbot ,            (*injbot (cleartext ) : bitstringbot is the natural injection from cleartext to bitstringbot.*)
        sym_Z,                      (*Z (cleartext ) : cleartext is the function that 
                                    returns for each cleartext a cleartext of the same length consisting only of zeroes.*)
        sym_Penc      (*Penc(t,N,l) is the probability of breaking the IND-CPA property in time t 
                                      for one key and N encryption queries with cleartexts of length at most l.*)
).


(*
    random_split_N(input _t ,part1 _t ,...,partN _t ,tuple_t ,tuple,split )
    input _t : type of the input value
    part1 _t ,...,partN _t : types of the output parts.
    tuple_t : type of a tuple of the output parts
    tuple(part1 _t ,...,partN _t ) : tuple_t : builds a tuple from N parts.
    split (input _t ) : tuple_t splits the input into N parts and returns a tuple of these parts
        let tuple(x1,...,xN) = split (y) in...
*)
type rdata_t [large,fixed].
type rdata_other_t [large, bounded, nonuniform].
(*这里两个相同rdata可能会有bug*)

(*There are 4 reserved fragments in the tdr*)
type reserved_string_t [bounded].
type rtyp_t [bounded].
type tdi_t [bounded].
type tcbi_t [bounded].
type csvn_t [fixed].

fun tdi_t2bitstring(tdi_t): bitstring [data].
fun tcbi_t2bitstring(tcbi_t):bitstring[data].

fun rdata_f(pkey, rdata_other_t):rdata_t[data].
fun rms_except_mac_f(rtyp_t, reserved_string_t, csvn_t, hashoutput, hashoutput, rdata_t, reserved_string_t): bitstring [data].
fun request_SEAM(rtyp_t, hashoutput, rdata_t): bitstring [data].
fun seamreport_f(bitstring, tcbi_t): bitstring[data].
fun tdreport(bitstring, reserved_string_t, tdi_t): bitstring [data].
fun request_quote(bitstring):bitstring[data].
fun tdreport_from_VMM(bitstring): bitstring[data].
fun verifyreport(bitstring, bitstring):bitstring[data].
fun verifyresult(bool):bool [data].
fun rptbody_f(bitstring, tcbi_t, reserved_string_t, tdi_t): bitstring[data].
fun quote_from_QE_to_VMM_f(bitstring,bitstring):bitstring[data].
fun quote_from_VMM_to_TD_f(bitstring):bitstring[data].
fun quote_from_TD_to_Challenger_f(bitstring):bitstring[data].
fun rms_f(bitstring,bitstring):bitstring[data].
fun key2bitstring(key):bitstring[data].


event check_hash().
event finished().

query secret session_key.

let Challenger(spk:pkey) =
	! qChallenger
	in(c1, ());
    (*step 1*)
	out(c2, ());
    (*step 19*)
    in(c25, quote_from_TD_to_Challenger_f(quote));
    let quote_from_VMM_to_TD_f(quote1)=quote in
    let quote_from_QE_to_VMM_f(rptbody, sig_in_QE)=quote1 in
    if(verify(rptbody,spk, sig_in_QE)) then(
        let rptbody_f(rms_except_mac_value, tcbi, res4, tdi) =rptbody in
        let  rms_except_mac_f(rtyp, res1, csvn, tcbh, tdih, rdata, res2)=rms_except_mac_value in
        let rdata_f(pk, rdata_other)=rdata in
        new session_key:key;
        let m1=enc(key2bitstring(session_key), pk) in
        out(c26, m1)
    )else
        out(c26,()).

let TD() =
   (*step 2*)
	! qTD
	in(c3, ());
    new r:keyseed;
    new rdata_other:rdata_other_t;
    let pk=pkgen(r) in
    let sk=skgen(r) in
    let rdata =rdata_f(pk,rdata_other) in
	out(c4, (rdata));
    (*step 9*)
    in(c11, (tdreport(smr_value, res4, tdi)));
    let tdr_value=tdreport(smr_value, res4, tdi) in
	out(c12, (request_quote(tdr_value)));
    (*step 18*)
    in(c23, quote_from_VMM_to_TD_f(quote));
    out(c24, quote_from_TD_to_Challenger_f(quote));
    (*step 20*)
    in(c28, m1: bitstring);
	let injbot(key2bitstring(session_key1)) = dec(m1, sk) in
    find i1<=qChallenger suchthat defined(session_key[i1]) && session_key[i1]=session_key1 then
        event finished().

let TDXM(hk: key) =
	! qTDXM
    (*step 3*)
	in(c5, (rdata_f(pk,rdata_other)));
    let rdata =rdata_f(pk,rdata_other) in
    new tdi:tdi_t;
    new rtyp:rtyp_t;
	(*step 4*)
    let hash_of_tdi_in_TDXM:hashoutput=hash(hk, tdi_t2bitstring(tdi)) in
	out(c6, (request_SEAM(rtyp, hash_of_tdi_in_TDXM , rdata)));
    (*step 7*)
    in(c9, (seamreport_f(rms_value, tcbi)));
    let smr_value=seamreport_f(rms_value, tcbi) in
    new res4:reserved_string_t;
    let tdr_value=tdreport(smr_value, res4, tdi) in
    (*step 8*)
    out(c10, (tdr_value)).

let CPU(hk:key, mkey:key) =
	! qCPU
	in(c7, (request_SEAM(rtyp, tdih, rdata)));
    (*step 5*)
	(*tcbi represents the data structure for measurement and configuration of TDX module*)
    new tcbi:tcbi_t;
    new res1:reserved_string_t;
    new csvn:csvn_t;
    let hash_of_tcbi_in_CPU:hashoutput=hash(hk, tcbi_t2bitstring(tcbi)) in
    new res2:reserved_string_t;
    let rms_except_mac_value=rms_except_mac_f(rtyp, res1, csvn, hash_of_tcbi_in_CPU, tdih, rdata, res2) in
    let mac_value=mac(rms_except_mac_value, mkey ) in
    let rms_value=rms_f(rms_except_mac_value, mac_value) in
    (*step 6*)
	out(c8, (seamreport_f(rms_value, tcbi)));
    (*step 13*)
    in(c17, verifyreport(rms_except_mac_value1, mac_value1));
    let res_of_verification=check(rms_except_mac_value1,mkey,mac_value1) in
    (*step 14*)
    out(c18, verifyresult(res_of_verification)).

let QE(hk:key, ssk:skey) =
	! qQE
    (*step 11*)
	in(c15, (tdreport_from_VMM(tdr_value)));
    let tdreport(smr_value, res4, tdi)= tdr_value in
    let seamreport_f(rms_value, tcbi)= smr_value in
    let rms_f(rms_except_mac_value, mac_value) = rms_value in
    let rms_except_mac_f(rtyp, res1, csvn, tcbh, tdih, rdata, res2)=rms_except_mac_value in
    (*check the hashes*)
    let resOfHash =
        find j<=qTDXM suchthat defined(hash_of_tdi_in_TDXM[j])&& tdih=hash_of_tdi_in_TDXM[j] then(
            find i<=qCPU suchthat defined(hash_of_tcbi_in_CPU[i]) && tcbh=hash_of_tcbi_in_CPU[i] then
                true
            else 
                false
        )
        else
            false
    in
    (*step 12*)
    if(resOfHash) then
        out(c16, verifyreport(rms_except_mac_value, mac_value));
    (*step 15*)
    in(c19, verifyresult(res_of_verification));
    if(res_of_verification) then (
        let rptbody=rptbody_f(rms_except_mac_value, tcbi, res4, tdi) in
        let sig_in_QE= sign(rptbody, ssk) in
        let quote=quote_from_QE_to_VMM_f(rptbody, sig_in_QE) in
        (*step 16*)
        out(c20, (quote))
    )else
        out(c20,()).
        
let VMM() =
	! qVMM
    (*step 10*)
    in(c13, (request_quote(tdr_value)));
	out(c14, (tdreport_from_VMM(tdr_value)));
    (*step 17*)
    in(c21, quote_from_QE_to_VMM_f(rptbody, sig_in_QE) );
    let quote=quote_from_QE_to_VMM_f(rptbody, sig_in_QE) in
    out(c22, quote_from_VMM_to_TD_f(quote)).

process
	in(start, ());
    new r:keyseed;
    new hk:key;
    new mkey:key;
    let ssk=sskgen(r) in
    let spk=spkgen(r) in
	out(c0, ());
	(
        hashoracle(hk) |
        Challenger(spk) | 
        TD() |
        TDXM(hk) |
        CPU(hk, mkey) |
        VMM() |
        QE(hk, ssk)
    )