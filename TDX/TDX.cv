(*
    TDX protocol
    six entities: Challenger, CPU, TDXM, TD, VMM, QE.
    Steps:
    1. Challenger->TD: Attestation requirements
    2. TD generate rdata and TD->TDXM: request TD report
    3.  Assemble tdi from TDCS and compute its hash tdih
    4. TDXM->CPU: rtyp, tdi, rdata and request SEAMREPORT
    5. CPU genarate SEAMREPORT
    6. CPU->TDXM: SEAMREPORT
    7. TDXM create TDREPORT
    8. TDXM->TD: TDREPORT
    9. TD->VMM: TDREPORT and request Quote
    10. VMM->QE: TDREPORT
    11. QE check hashes
    12. QE ->CPU: report mac struct
    13. CPU verify the MAC in the report
    14. CPU->QE: Verification result
    15. QE sign to form Quote
    16. QE->VMM: Quote
    17. VMM->TD: TD: Quote
    18. TD->Challenger: Quote
*)

(*replication numbers*)
param N1, N2, N3, N4, N5,qH

(*
    bounded means that the type is a set of bitstrings of bounded length or perhaps ⊥. In other
        words, the type is a finite subset of bitstrings plus ⊥.
    fixed means that the type is the set of all bitstrings of a certain length n. In particular, the
        type is a finite set, so fixed implies bounded.
    large: By default, large means that the type T is large enough so that all collisions with ran-
        dom elements of T can be eliminated
*)
(*These three types are used in the macro IND_CCA2_public_key_enc and UF_CMA_det_signature*)
type keyseed [large, bounded].
type skey [bounded].
type pkey [bounded].

(*channel name*)
channel c0, c1, c2, c3, c4, c5, start

(*qH is the number of queries to the hash oracle*)
type key [large,fixed].
expand ROM_hash_large(
    key,                 (**)
    bitstring,         (*hashinput is the type of the input of the hash function.*)
    ???bitstring,        (*hashoutput is the type of the output of the hash function, 
                                    must be bounded or nonuniform (typically fixed)*)如果这里这里说了fixed，那么我们还可以用bitstring吗还是定义一个type
    hash,               (*hash (key ,hashinput ) : hashoutput is the hash function.*)
    hashoracle,  (*hashoracle is a process that allows the adversary to call the hash function*)
    qH 
).

(* MAC *)
type key [large, fixed].
expand SUF_CMA_det_mac(
    key,            (*mkey is the type of keys, must be bounded*)
    bitstring , (*macinput is the type of inputs of MACs*)
    bitstring,  (*macres is the type of MACs.*)
    mac,          (*mac(macinput ,mkey ) : macres is the MAC function.*)
    check,      (*check (macinput ,mkey ,macres ) : bool is the verification function*)
    Pmac        (*Pmac(t,N,N′,Nu′,l) is the probability of breaking the SUF-CMA property in time t for one key,
                            N MAC queries, N′ verification queries modified by the transformation and Nu verification queries
                            left unchanged by the transformation for messages of length at most l.*)
).

(* Signature *)
proba Psign.
proba Psigncoll.
expand UF_CMA_det_signature(
        keyseed,
        pkey,                  (*pkey is the type of public keys, must be bounded.*),
        skey,                  (*skey is the type of secret keys, must be bounded.*)
        bitstring,            (*signinput*)
        bitstring,            (*signature*)
       	sskgen,                  (*skgen(keyseed ) : skey is the secret key generation function.*)
        spkgen,                 (*pkgen (keyseed ) : pkey is the public key generation function.*)
        sign,                     (*sign (signinput ,skey ) : signature is the signature function.*)
        verify,                  (*check (signinput ,pkey ,signature) : bool is the verification function.*)
        Psign,                  (*Psign (t,N,l) is the probability of breaking the UF-CMA property 
                                        in time t, for one key, N signature queries with messages of length at most l.*)
        Psigncoll           (*Psigncoll is the probability of collision between independently generated keys.*)
).

(* Asymmetric encryption *)
proba Penc.
proba Penccoll.
expand IND_CCA2_public_key_enc(
        keyseed, 
        pkey,                       (*pkey is the type of public keys, must be bounded*)
        skey,                        (*skey is the type of secret keys, must be bounded*) 
        bitstring,                (*cleartext is the type of cleartexts.*)
        bitstring,             (*ciphertext is the type of ciphertexts.*)
        skgen,                      (*skgen(keyseed ) : skey is the secret key generation function.*)
        pkgen,                      (*pkgen (keyseed ) : pkey is the public key generation function.*)
        enc,                            (*enc(cleartext ,pkey ) : ciphertext is the encryption function. 
                                                Internally, it generates random coins, so that it is probabilistic*)
        dec,                            (*dec(ciphertext ,skey ) : bitstringbot is the decryption function; it returns bottom 
                                                when decryption fails*)
        injbot,                         (*injbot (cleartext ) : bitstringbot is the natural injection from cleartext to bitstringbot*)
        Z,                                  (*Z (cleartext ) : cleartext is the function that returns for each cleartext a cleartext of 
                                                the same length consisting only of zeroes.*)
        Penc,                           (*Penc(t,N) is the probability of breaking the IND-CCA2 property
                                                (indistinguishable under adaptive chosen ciphertext attacks)
                                                in time t for one key and N decryption queries.*)
        Penccoll                    (*Penccoll is the probability of collision between independently generated keys.*)
)


