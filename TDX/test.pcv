

channel c1, c2, c3, c4, c5, c6.

type key [large,fixed].
type hashoutput [large, fixed].
type testString [fixed].
type skey [bounded].
type pkey [bounded].
type keyseed [large, bounded].

proba Penc.
proba Penccoll.
expand IND_CCA2_public_key_enc(
        keyseed, 
        pkey,                       (*pkey is the type of public keys, must be bounded*)
        skey,                        (*skey is the type of secret keys, must be bounded*) 
        bitstring,                (*cleartext is the type of cleartexts.*)
        bitstring,             (*ciphertext is the type of ciphertexts.*)
        skgen,                      (*skgen(keyseed ) : skey is the secret key generation function.*)
        pkgen,                      (*pkgen (keyseed ) : pkey is the public key generation function.*)
        enc,                            (*enc(cleartext ,pkey ) : ciphertext is the encryption function. 
                                                Internally, it generates random coins, so that it is probabilistic*)
        dec,                            (*dec(ciphertext ,skey ) : bitstringbot is the decryption function; it returns bottom 
                                                when decryption fails*)
        injbot,                         (*injbot (cleartext ) : bitstringbot is the natural injection from cleartext to bitstringbot*)
        Z,                                  (*Z (cleartext ) : cleartext is the function that returns for each cleartext a cleartext of 
                                                the same length consisting only of zeroes.*)
        Penc,                           (*Penc(t,N) is the probability of breaking the IND-CCA2 property
                                                (indistinguishable under adaptive chosen ciphertext attacks)
                                                in time t for one key and N decryption queries.*)
        Penccoll                    (*Penccoll is the probability of collision between independently generated keys.*)
).

param iA,iB.

event finished().
fun key2bitstring(key):bitstring[data].

query secret session_key.

let processA(pk:pkey)=
    !iA
    in(c3, ());
    new session_key:key;
    let m1=enc(key2bitstring(session_key), pk) in
    out(c4,  m1).

let processB(sk:skey)=
    !iB
    in(c5, m1:bitstring);
    let injbot(key2bitstring(session_key1)) = dec(m1, sk) in
    out(c6, ()).

process
    in(c1, ());
    new r:keyseed;
    let pk=pkgen(r) in
    let sk=skgen(r) in
    out(c2, ());
    (processA(pk) | processB(sk))
